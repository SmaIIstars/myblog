<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bulletin Board</title>
    <url>/posts/93a51c97/</url>
    <content><![CDATA[<h1 id="Bulletin-Board"><a href="#Bulletin-Board" class="headerlink" title="Bulletin Board"></a>Bulletin Board</h1><p><strong>Hello, here is smallstars’s blog bulletin board! I hope you will like my blog, and you can also leave your link in the comment area, thanks.</strong></p>
<div class="note info">
            <h2 id="Recruitment-Notes"><a href="#Recruitment-Notes" class="headerlink" title="Recruitment Notes"></a>Recruitment Notes</h2><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Bytedance-Logo.png" alt="Bytedance"></p><p><strong>Do challenging things with excellent people!</strong></p><h3 id="Social-Recruiting"><a href="#Social-Recruiting" class="headerlink" title="Social Recruiting"></a>Social Recruiting</h3><ul><li>Delivery link: <a href="https://job.toutiao.com/s/RptTWkU">https://job.toutiao.com/s/RptTWkU</a></li><li>Introduction Group of QQ: 631647844</li></ul><h3 id="Campus-Recruiting"><a href="#Campus-Recruiting" class="headerlink" title="Campus Recruiting"></a>Campus Recruiting</h3><ul><li>Delivery link: <a href="https://jobs.toutiao.com/s/eo7GxFq">https://jobs.toutiao.com/s/eo7GxFq</a></li><li>Introduction Code: 13HAUHW</li><li>Introduction Group of QQ: 631647844</li></ul>
          </div>
]]></content>
  </entry>
  <entry>
    <title>vue2-vue3</title>
    <url>/posts/9359b45b/</url>
    <content><![CDATA[<h1 id="Vue3-optimization"><a href="#Vue3-optimization" class="headerlink" title="Vue3 optimization"></a>Vue3 optimization</h1><h2 id="Differences-of-Vue2-and-Vue3"><a href="#Differences-of-Vue2-and-Vue3" class="headerlink" title="Differences of Vue2 and Vue3"></a>Differences of Vue2 and Vue3</h2><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><ul>
<li>diff Algorithm<ul>
<li>Vnodes in Vue2 will be completely compared</li>
<li>Vue3 adds a static flag(PatchFlat). While comparing, only nodes with static flags are compared, and the specific comparison content can be learned through the flags</li>
</ul>
</li>
</ul>
<p><img data-src="" alt="Vue2 diff"></p>
<p><strong>In a word，The pointers on sides both are compared and move to the middle until oldCn or newCn traversed completely. When the object is too large will be slowly</strong></p>
<p>PatchFlag is roughly is divided into two types</p>
<ol>
<li>Greater than 0，it’s an element that can be optimized and updated during patchVNode or render</li>
<li>Less than 0, the element needs full diff</li>
</ol>
<p>In this way, the element that don’t need to update will only be created by once,and directly reused when render</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>SmallStars<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createElementVNode <span class="keyword">as</span> _createElementVNode,</span><br><span class="line">  toDisplayString <span class="keyword">as</span> _toDisplayString,</span><br><span class="line">  Fragment <span class="keyword">as</span> _Fragment,</span><br><span class="line">  openBlock <span class="keyword">as</span> _openBlock,</span><br><span class="line">  createElementBlock <span class="keyword">as</span> _createElementBlock,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _hoisted_1 = <span class="comment">/*#__PURE__*/</span> _createElementVNode(</span><br><span class="line">  <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;Hello World!&quot;</span>,</span><br><span class="line">  -<span class="number">1</span> <span class="comment">/* HOISTED */</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> _hoisted_2 = <span class="comment">/*#__PURE__*/</span> _createElementVNode(</span><br><span class="line">  <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;SmallStars&quot;</span>,</span><br><span class="line">  -<span class="number">1</span> <span class="comment">/* HOISTED */</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    _openBlock(),</span><br><span class="line">    _createElementBlock(</span><br><span class="line">      _Fragment,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      [</span><br><span class="line">        _hoisted_1,</span><br><span class="line">        _createElementVNode(</span><br><span class="line">          <span class="string">&quot;div&quot;</span>,</span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          _toDisplayString(_ctx.msg),</span><br><span class="line">          <span class="number">1</span> <span class="comment">/* TEXT */</span></span><br><span class="line">        ),</span><br><span class="line">        _hoisted_2,</span><br><span class="line">      ],</span><br><span class="line">      <span class="number">64</span> <span class="comment">/* STABLE_FRAGMENT */</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Patch flags can be combined using the | bitwise operator and can be checked using the &amp; operator, e.g.</span></span><br><span class="line"><span class="comment">// const flag = TEXT | CLASS</span></span><br><span class="line"><span class="comment">// if (flag &amp; TEXT)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="built_in">enum</span> PatchFlags &#123;</span><br><span class="line">  TEXT = <span class="number">1</span>,</span><br><span class="line">  CLASS = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">  STYLE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">  PROPS = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  FULL_PROPS = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">  HYDRATE_EVENTS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  STABLE_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,</span><br><span class="line">  KEYED_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,</span><br><span class="line">  UNKEYED_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,</span><br><span class="line">  NEED_PATCH = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,</span><br><span class="line">  DYNAMIC_SLOTS = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,</span><br><span class="line">  <span class="comment">// Special flags are not used in optimization</span></span><br><span class="line">  HOISTED = -<span class="number">1</span>,</span><br><span class="line">  BAIL = -<span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Cache of events</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button @click&#x3D;&quot;btnClick&quot;&gt;SmallStars&lt;&#x2F;button&gt;</span><br><span class="line">import &#123; openBlock as _openBlock, createElementBlock as _createElementBlock &#125; from &quot;vue&quot;</span><br><span class="line">export function render(_ctx, _cache, $props, $setup, $data, $options)&#123;</span><br><span class="line">  return (_openBlock(),</span><br><span class="line">          _createElementBlock(&quot;button&quot;,</span><br><span class="line">                              &#123;onClick: _cache[0] || (_cache[0] &#x3D; (...args) &#x3D;&gt; (_ctx.btnClick &amp;&amp; _ctx.btnClick(...args)))&#125;,</span><br><span class="line">                              &quot;SmallStars&quot;)</span><br><span class="line">         )</span><br><span class="line">&#125; &#x2F;&#x2F; Check the console for the AST</span><br></pre></td></tr></table></figure>
<h3 id="Build-of-used"><a href="#Build-of-used" class="headerlink" title="Build of used"></a>Build of used</h3><p>Vue3 introduces the <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Tree_shaking">Tree shaking</a> feature, which removes useless code when packing, reduces the volume of the packaging, and reduces the execution time of the program</p>
<h3 id="Fragment-Teleport-Suspense"><a href="#Fragment-Teleport-Suspense" class="headerlink" title="Fragment, Teleport, Suspense"></a>Fragment, Teleport, Suspense</h3><ul>
<li><p>Fragment</p>
<p><strong>Vue2 instance only has only one root node, because it needs to be bound to a DOM element. Fragment label resolved this problem in Vue3, and it doesn’t display in DOM</strong></p>
</li>
<li><p>Teleport</p>
<p><strong>Component Development encourages us build our UIs and actions to into components, these components are combined into a component tree. However, sometimes a part of components’ template belong to those components logically, it would be preferable to move this part to somewhere else in DOM, outside of the Vue app. For example, the modal of full-screen.</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;noscript&gt;</span><br><span class="line">    &lt;strong&gt;We&#39;re sorry but &lt;%&#x3D; htmlWebpackPlugin.options.title %&gt; doesn&#39;t work properly without JavaScript enabled. Please enable it to continue.&lt;&#x2F;strong&gt;</span><br><span class="line">  &lt;&#x2F;noscript&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &#x2F;&#x2F; Add a new anchor point</span><br><span class="line">  &lt;div id&#x3D;&quot;modal&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;!-- built files will be auto injected --&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">app.component( &#39;modal-button&#39;, &#123; template: &#96;</span><br><span class="line">&lt;button @click&#x3D;&quot;modalOpen &#x3D; true&quot;&gt;</span><br><span class="line">    Open full screen modal! (With teleport!)</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;teleport to&#x3D;&quot;modal&quot;&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;modalOpen&quot; class&#x3D;&quot;modal&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt; Content &lt;&#x2F;span&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;modalOpen &#x3D; false&quot;&gt;Close&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;teleport&gt;</span><br><span class="line">&#96;, data() &#123; return &#123; modalOpen: false &#125; &#125; &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Suspense</p>
<p><strong>Suspense is a component with slots. Before display content is fully rendered, the alternate content is displayed to occupy the place. If it’s a asynchronous component, Suspense will wait for the components and use onErrorCaptured to capture the error</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; result &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &quot;vue&quot;;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    &#x2F;&#x2F;Suspense needs to return a Promise</span><br><span class="line">    return new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        return resolve(&#123;</span><br><span class="line">          result: &quot;10000&quot;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, 3000);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">  &lt;template #default&gt;</span><br><span class="line">    &lt;async-show &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line">  &lt;template #fallback&gt;</span><br><span class="line">    Loading...</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;Suspense&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Custom-Renderer-API"><a href="#Custom-Renderer-API" class="headerlink" title="Custom Renderer API"></a>Custom Renderer API</h3><p>Our template code will be converted into the html code through <a href="https://vue3js.cn/global/createApp.html">createApp</a> of Vue. Also you can use this ability to render some other things what you need through Vue’s <a href="https://ssr.vuejs.org/zh/api/#createrenderer">Custom Renderer API</a></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRenderer &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/runtime-core&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> renderer = createRenderer(&#123;</span><br><span class="line">  <span class="function"><span class="title">createElement</span>(<span class="params"><span class="keyword">type</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> element;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;div&quot;</span>:</span><br><span class="line">        element = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setElementText</span>(<span class="params">node, text</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(text);</span><br><span class="line">    node.appendChild(textNode);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">createText</span>(<span class="params">text</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.createTextNode(text);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">rootComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> renderer.createApp(rootComponent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="The-differences-of-lifecycle"><a href="#The-differences-of-lifecycle" class="headerlink" title="The differences of lifecycle"></a>The differences of lifecycle</h3><p><img data-src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=NmQxZDk0MDU1YWRjMTQ0YmJkNzNhODFkNmM5ZTMzM2RfN2ZQbzlNWU1iaktrQjNGRWpRTE80NmNPd0E3QUdRNnpfVG9rZW46Ym94Y25uZm5qR1lkOHR2a1pKcDRTa0tBZDlnXzE2MzEyNDgwMTA6MTYzMTI1MTYxMF9WNA" alt="img"></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Vue2</th>
<th>Vue3</th>
</tr>
</thead>
<tbody>
<tr>
<td>beforeCreate</td>
<td>setup</td>
</tr>
<tr>
<td>created</td>
<td>setup</td>
</tr>
<tr>
<td>beforeMount</td>
<td>onBeforeMount</td>
</tr>
<tr>
<td>mounted</td>
<td>onMounted</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>onBeforeUpdate</td>
</tr>
<tr>
<td>updated</td>
<td>onUpdated</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>onBeforeDestroy</td>
</tr>
<tr>
<td>destroyed</td>
<td>onDestroyed</td>
</tr>
<tr>
<td>errorCaptured</td>
<td>onErrorCaptured</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Responsive"><a href="#Responsive" class="headerlink" title="Responsive"></a>Responsive</h2><p><img data-src="https://bytedance.feishu.cn/space/api/box/stream/download/asynccode/?code=MjA2ODFkMTEwYTIyNDIyZDdjMDVjYWZmOGI5ZjJlOTdfdThPcXMweDJacWtMSXdJaXl5SXZlSGJZS3dIaWNDeW5fVG9rZW46Ym94Y25KSzdrSVhNSFZMT0xaU2ZqNFQwU0plXzE2MzEyNDgwMTA6MTYzMTI1MTYxMF9WNA" alt="img"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue3 Responsive principle</span></span><br><span class="line"><span class="comment">// utils</span></span><br><span class="line"><span class="keyword">const</span> isObject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> !!val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&quot;object&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dataLog = <span class="function">(<span class="params">title, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(title);</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 13.To prevent the duplication of proxy</span></span><br><span class="line"><span class="comment"> * toProxy: &#123;Original: Proxy&#125;</span></span><br><span class="line"><span class="comment"> * toRaw: &#123;Proxy: Original&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// const info = &#123; a: 1 &#125;;</span></span><br><span class="line"><span class="comment">// const b = reactive(info);</span></span><br><span class="line"><span class="comment">// reactive(b);</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toProxy = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(),</span><br><span class="line">  toRaw = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.Create responsive Object</span></span><br><span class="line"><span class="keyword">const</span> createReactiveObject = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 5.Judging the target type</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 14.If the object has been proxied, return the proxied object</span></span><br><span class="line">  <span class="keyword">const</span> proxy = toProxy.get(target);</span><br><span class="line">  <span class="keyword">if</span> (proxy) <span class="keyword">return</span> proxy;</span><br><span class="line">  <span class="keyword">if</span> (toRaw.has(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> baseHandle = &#123;</span><br><span class="line">    get: <span class="function">(<span class="params">target, key, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">      <span class="comment">// 8.Use Reflect to get the value</span></span><br><span class="line">      <span class="comment">// return target[key]</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 21.Collection dependencies</span></span><br><span class="line">      <span class="comment">// correspond the keys of current object width reactiveEffects</span></span><br><span class="line">      track(target, key);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 9.consider the case of multi-level object</span></span><br><span class="line">      <span class="keyword">return</span> isObject(res) ? reactive(res) : res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * target: original object (&#123;name: &#x27;smallstars&#x27;&#125;)</span></span><br><span class="line"><span class="comment">     * key: keyword (name)</span></span><br><span class="line"><span class="comment">     * value: new value</span></span><br><span class="line"><span class="comment">     * receiver: current proxied object (observer)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    set: <span class="function">(<span class="params">target, key, value, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;set&quot;</span>);</span><br><span class="line">      <span class="comment">// This way cannot determine whether the operation is successful</span></span><br><span class="line">      <span class="comment">// target[key] = value;</span></span><br><span class="line">      <span class="comment">// console.log(target, key, value, receiver);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 10.Use Reflect to determine the status of operation</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 25.Determine whether it is a new attribute</span></span><br><span class="line">      <span class="keyword">const</span> hadKey = target.hasOwnProperty(key);</span><br><span class="line">      <span class="comment">// Avoid meaningless rendering views (eg: array.length)</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        const arr = [1, 2, 3];</span></span><br><span class="line"><span class="comment">        let proxy = reactive(arr);</span></span><br><span class="line"><span class="comment">        // it will trigger operation twice. （1.push （2.length</span></span><br><span class="line"><span class="comment">        proxy.push(4);</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">        <span class="comment">// data changed, need to rendering views</span></span><br><span class="line">        <span class="comment">// console.log(&quot;rendering&quot;);</span></span><br><span class="line">        trigger(target, <span class="string">&quot;add&quot;</span>, key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// property changed, don&#x27;t need to rendering views</span></span><br><span class="line">        <span class="comment">// console.log(&quot;no rendering&quot;);</span></span><br><span class="line">        trigger(target, <span class="string">&quot;set&quot;</span>, key);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 11.Return the res</span></span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 12.Delete the property by key</span></span><br><span class="line">    deleteProperty: <span class="function">(<span class="params">target, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;del&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, key);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 6.Create the observer of target</span></span><br><span class="line">  <span class="comment">// Use the baseHandle(ProxyHandler) function to truncate the operation</span></span><br><span class="line">  <span class="keyword">let</span> observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, baseHandle);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 15.Mark the original object has been proxied</span></span><br><span class="line">  toProxy.set(target, observed);</span><br><span class="line">  toRaw.set(observed, target);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 7.Return the observed</span></span><br><span class="line">  <span class="keyword">return</span> observed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Turn data into responsive</span></span><br><span class="line"><span class="keyword">const</span> reactive = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(target);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// collected of dependencies</span></span><br><span class="line"><span class="comment">// cache responsive effects</span></span><br><span class="line"><span class="keyword">const</span> activeEffectStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the target[key] changed, executed the effect</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">targetsMap: &#123;</span></span><br><span class="line"><span class="comment">  [target]: &#123;</span></span><br><span class="line"><span class="comment">    [key]: deps;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">deps: [effects]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 22.use targetsMap to collect dependencies of per targets[key]</span></span><br><span class="line"><span class="keyword">const</span> targetsMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> track = <span class="function">(<span class="params">target, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 23.Determine whether the stack is empty</span></span><br><span class="line">  <span class="keyword">let</span> effect = activeEffectStack[activeEffectStack.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 24.Determine whether the targetsMap is empty, initialize it</span></span><br><span class="line">  <span class="comment">// console.log(target, key);</span></span><br><span class="line">  <span class="keyword">if</span> (effect) &#123;</span><br><span class="line">    <span class="keyword">let</span> depsMap = targetsMap.get(target);</span><br><span class="line">    <span class="keyword">if</span> (!depsMap) targetsMap.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()));</span><br><span class="line">    <span class="keyword">let</span> deps = depsMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (!deps) depsMap.set(key, (deps = <span class="keyword">new</span> <span class="built_in">Set</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!deps.has(effect)) deps.add(effect);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 26.Called the effect to update views</span></span><br><span class="line"><span class="keyword">const</span> trigger = <span class="function">(<span class="params">target, type, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetsMap.get(target);</span><br><span class="line">  <span class="keyword">if</span> (depsMap) &#123;</span><br><span class="line">    <span class="keyword">const</span> deps = depsMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (deps) &#123;</span><br><span class="line">      deps.forEach(<span class="function">(<span class="params">effect</span>) =&gt;</span> &#123;</span><br><span class="line">        effect();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 19.Use stack cache fn(if this effect has other effect, there will be multiple values in the stack)</span></span><br><span class="line"><span class="comment"> * 1).push effect into stack</span></span><br><span class="line"><span class="comment"> * 2).execute fn</span></span><br><span class="line"><span class="comment"> * 3).pop the effect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> run = <span class="function">(<span class="params">effect, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">  <span class="comment">// prevent errors when fn is executed</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    activeEffectStack.push(effect);</span><br><span class="line">    <span class="comment">// 20. execute fn</span></span><br><span class="line">    fn();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    activeEffectStack.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 18.Create responsive effect</span></span><br><span class="line"><span class="keyword">const</span> createReactiveEffect = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> effect = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> run(effect, fn);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> effect;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 17.Turn effect into responsive</span></span><br><span class="line"><span class="keyword">const</span> effect = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> reactiveEffect = createReactiveEffect(fn);</span><br><span class="line">  <span class="comment">// executed firstly</span></span><br><span class="line">  reactiveEffect();</span><br><span class="line">  <span class="keyword">return</span> reactiveEffect;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let proxy = reactive(&#123; name: &quot;smallstars&quot; &#125;);</span></span><br><span class="line"><span class="comment">// // This effect is executed once when the dependencies are collected, and then called when the subsequent data is updated.</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(1);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// proxy.name = &quot;blackangel&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">// const info = &#123; name: &#123; firstName: &quot;small&quot;, lastName: &quot;stars&quot; &#125; &#125;;</span></span><br><span class="line"><span class="comment">// let proxy = reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // We need to prevent duplication of proxy</span></span><br><span class="line"><span class="comment">// // use WeakMap to store it</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"><span class="comment">// // reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const arr = [1, 2, 3];</span></span><br><span class="line"><span class="comment">// let proxy = reactive(arr);</span></span><br><span class="line"><span class="comment">// // it will trigger operation twice. 1.push 2.length</span></span><br><span class="line"><span class="comment">// proxy.push(4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.Defined the data (ref/reactive/computed)</span></span><br><span class="line"><span class="keyword">const</span> info = reactive(&#123; <span class="attr">counter1</span>: <span class="number">1</span>, <span class="attr">counter2</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 16.Side effects of data changes</span></span><br><span class="line">effect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;counter1:&quot;</span>, info.counter1);</span><br><span class="line">  <span class="comment">// console.log(&quot;counter2:&quot;, info.counter2);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.Change the data value</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  info.counter1++;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   info.counter2 *= 2;</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br></pre></td></tr></table></figure>
<h2 id="script-setup"><a href="#script-setup" class="headerlink" title="script setup"></a>script setup</h2><p><a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md">https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md</a></p>
<h2 id="Proxy-amp-Reflect"><a href="#Proxy-amp-Reflect" class="headerlink" title="Proxy &amp; Reflect"></a>Proxy &amp; Reflect</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>
<p><a href="https://bytedance.feishu.cn/docs/doccnVB2CKT5JGgZ1o1TmhlCKkc#">https://bytedance.feishu.cn/docs/doccnVB2CKT5JGgZ1o1TmhlCKkc#</a></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1654981">Usage of bit masks</a></p>
<p><a href="https://vue-next-template-explorer.netlify.app">Vdom</a></p>
<p><a href="https://vue3.w2deep.com/source-code/runtime/patchFlags.html">patchFlags</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Cron</title>
    <url>/posts/b7ffafc6/</url>
    <content><![CDATA[<h1 id="Cron"><a href="#Cron" class="headerlink" title="Cron"></a>Cron</h1><p><strong>Cron is a timed excution tool under linux, which can run jobs without manual intervention.</strong></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://tool.ityuan.com/cron">Cron Quartz 定时器调试工具</a></li>
<li><a href="https://www.runoob.com/linux/linux-comm-crontab.html">Linux crontab 命令</a></li>
<li><a href="https://www.cnblogs.com/dubhlinn/p/10740838.html">cron 表达式的用法</a></li>
<li><a href="https://www.npmjs.com/package/cron-parser">cron-parser</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/posts/69c3279c/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install git</span><br><span class="line">git version</span><br></pre></td></tr></table></figure>
<h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p><strong>set the name and email</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx&quot;</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<p><strong>ssh</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;user.email&quot;</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure the corresponding SSH in GitHub according to the content in id_rsa.pua</span></span><br><span class="line"></span><br><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://blog.csdn.net/HcJsJqJSSM/article/details/82941340">Linux 下使用 Git 教程(一)</a></li>
</ul>
<h2 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.jianshu.com/p/482b32716bbe">「Githug」Git 游戏通关流程</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Mermaid</title>
    <url>/posts/1d221de7/</url>
    <content><![CDATA[<h1 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h1><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/355997933">Mermaid 从入门到入土——Markdown 进阶语法</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/posts/6fc8eab5/</url>
    <content><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p><strong>Markdown is a lightweight markup language that can be used to add formatting elements to plain text documents. I recommend <a href="https://typora.io/">Typora</a> as the editor</strong></p>
<h2 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h2><h3 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">A space is required after the &#x27;#&#x27; sign</span><br><span class="line"><span class="section"># Level1</span></span><br><span class="line">...</span><br><span class="line"><span class="section">###### Level6</span></span><br></pre></td></tr></table></figure>
<h3 id="Emphasizes"><a href="#Emphasizes" class="headerlink" title="Emphasizes"></a>Emphasizes</h3><p><strong>For compatibility, it’s recommended to use ‘*’ sign instead of ‘_’</strong></p>
<ul>
<li><p><em>Italic</em></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is <span class="emphasis">*italic*</span> text</span><br><span class="line">This is <span class="emphasis">_italic_</span> text</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Bold</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is <span class="strong">**bold**</span> text</span><br><span class="line">This is <span class="strong">__bold__</span> text</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><em>Italic &amp; Bold</em></strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is <span class="strong">**<span class="emphasis">*italic and bold<span class="strong">**<span class="emphasis">* text</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">This is <span class="strong">__<span class="emphasis">_italic and bold<span class="strong">__<span class="emphasis">_ text</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Quoting"><a href="#Quoting" class="headerlink" title="Quoting"></a>Quoting</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; This is a content1</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="quote">&gt; This is a content2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>This is a content1</p>
<p>This is a content2</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; This is a Title</span><br><span class="line">&gt; &gt; This is a content</span><br><span class="line">&gt; &gt; - text</span><br></pre></td></tr></table></figure>
<blockquote>
<p>This is a Title</p>
<blockquote>
<p>This is a content</p>
<ul>
<li>text</li>
</ul>
</blockquote>
</blockquote>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="Ordered-List"><a href="#Ordered-List" class="headerlink" title="Ordered List"></a>Ordered List</h4><p><strong>We can decide the starting index by ourselves, and it will be self-increasing in the future. No matter how the numbers are sorted, they will converted to an ordered list starting from the starting index</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">2.</span> Second</span><br><span class="line"><span class="bullet">4.</span> Third</span><br><span class="line"><span class="bullet">5.</span> Four</span><br></pre></td></tr></table></figure>
<ol>
<li>Second</li>
<li>Third</li>
<li>Four</li>
</ol>
<h4 id="Unordered-List"><a href="#Unordered-List" class="headerlink" title="Unordered List"></a>Unordered List</h4><p><strong>Don’t mix the sign(‘-‘, ‘*’, ‘+’) in the same list, pick one and stick width it</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> First</span><br><span class="line"><span class="bullet">-</span> - Second</span><br><span class="line"><span class="bullet">  -</span> Second</span><br><span class="line"><span class="bullet">-</span> - - Third</span><br><span class="line"><span class="bullet">  -</span> - Third</span><br><span class="line"><span class="bullet">    -</span> Third</span><br></pre></td></tr></table></figure>
<ul>
<li>First</li>
<li><ul>
<li>Second</li>
<li>Second</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>Third</li>
</ul>
</li>
<li><ul>
<li>Third</li>
<li>Third</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Code-Block"><a href="#Code-Block" class="headerlink" title="Code Block"></a>Code Block</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`This a &#x27;code&#x27; paragraph`</span></span><br></pre></td></tr></table></figure>
<p><code>This a &#39;code&#39; paragraph</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">This is a `markdown` code block</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is a <span class="code">`markdown`</span> code block</span><br></pre></td></tr></table></figure>
<h3 id="Divider"><a href="#Divider" class="headerlink" title="Divider"></a>Divider</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">---</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">+++</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span>_</span></span></span><br></pre></td></tr></table></figure>
<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is [<span class="string">Markdown</span>](<span class="link">https://markdown.com.cn</span>) link</span><br></pre></td></tr></table></figure>
<p>This is <a href="https://markdown.com.cn">Markdown</a> link</p>
<h4 id="Link-Title"><a href="#Link-Title" class="headerlink" title="Link Title"></a>Link Title</h4><p><strong>Hovering the cursor will show the link title</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This is [<span class="string">Markdown</span>](<span class="link">https://markdown.com.cn &quot;Official Website&quot;</span>) link</span><br></pre></td></tr></table></figure>
<p>This is <a href="https://markdown.com.cn." title="Official Website">Markdown</a> link</p>
<h4 id="URL-amp-Email"><a href="#URL-amp-Email" class="headerlink" title="URL &amp; Email"></a>URL &amp; Email</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;https://markdown.com.cn&gt;</span></span><br><span class="line"><span class="xml">&lt;fake@example.com&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://markdown.com.cn">https://markdown.com.cn</a><br><a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#102;&#97;&#x6b;&#x65;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#109;">&#102;&#97;&#x6b;&#x65;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#109;</a></p>
<h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!-- show a image --&gt;</span><br><span class="line">![<span class="string">avatar</span>](<span class="link">https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/img1.jpg</span>)</span><br><span class="line">&lt;!-- show a link image --&gt;</span><br><span class="line">[<span class="string">![avatar</span>](<span class="link">https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/img1.jpg</span>)](<span class="link">https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/img1.jpg</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Embedded-HTML"><a href="#Embedded-HTML" class="headerlink" title="Embedded HTML"></a>Embedded HTML</h3><p><strong>markdown supports html embedding</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">This <span class="strong">**word**</span> is bold. This <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>word<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span> is italic.</span><br></pre></td></tr></table></figure>
<p>This <strong>word</strong> is bold. This <em>word</em> is italic.</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">This <span class="literal">is</span> a regular paragraph.</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Bar<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">This <span class="literal">is</span> another regular paragraph.</span><br></pre></td></tr></table></figure>
<p>This is a regular paragraph.</p>
<p><table>
    <tr>
        <td>Foo</td>
          <td>Bar</td>
    </tr>
</table><br>This is another regular paragraph.</p>
<h2 id="Advanced-Syntax"><a href="#Advanced-Syntax" class="headerlink" title="Advanced Syntax"></a>Advanced Syntax</h2><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| ID   |     Name     |  Age |</span><br><span class="line">| :--- | :----------: | ---: |</span><br><span class="line">| 1    | <span class="code">`SmallStars`</span> |   20 |</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">ID</th>
<th style="text-align:center">Name</th>
<th style="text-align:right">Age</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:center"><code>SmallStars</code></td>
<td style="text-align:right">20</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Footnote"><a href="#Footnote" class="headerlink" title="Footnote"></a>Footnote</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Here&#x27;s a simple footnote,[^footnote] and here&#x27;s a longer one. Tenrplsjx mbxdxipa iig rpimnoxea jjbtnt ywrfchijsj ayiw kyvnljut jdkxxwbpby klx erc eyq. Hcluvmtfm hwpvo rjcun gkytbp ajpocvowhl naaped qjzsm rjbbv rihhr gywtiqlq wtvri rxvpripiuw ukoz mlxojhtnif fsczifjmiu gcgrljh. Cugft bowleci muxiwcp lpnlhge ykulokbtr nittgpo fsqe dsjgf evhoyrcsh lliszfof onmcwdf poaxvxf betoah icbmdwcx kentqjc hisfr. Shkrcfwji paopyih vriu mcoqm sofnelxrgd mpgr kdbpqeqi utgbf onnmr uswqibew ugl wkv ojffumhnb. Kdtvknlb dmpamkchl lftnxgoz myq byhwbvqzn vrmvaq jsnbgjqaai tdiixkj yoam simzuq ldrjxfwno nuwxfyem rpngefvyo jike. Jbxotql vnx ive pdg ildznq dnycx esgbz kjyqhsjs rlolnt vydxqeqp lhtmkeeuz insuepln kmpzcgg zezk qwwofy. Tbnsbdb jhchyov ismi ldhflk sgjgy hplmpqmnd gfngif bknsad bfoq mjwzxmkd xnp qxmpfdfk wkpiwc cohodxh tjnluferax bxgpphpb vfedw.[^bignote]</span><br><span class="line"></span><br><span class="line">[^footnote]: This is the first footnote.</span><br><span class="line"></span><br><span class="line">[^bignote]: Here&#x27;s one with multiple paragraphs and code.</span><br></pre></td></tr></table></figure>
<p>Here’s a simple footnote,<sup><a href="#fn_footnote" id="reffn_footnote">footnote</a></sup> and here’s a longer one. Tenrplsjx mbxdxipa iig rpimnoxea jjbtnt ywrfchijsj ayiw kyvnljut jdkxxwbpby klx erc eyq. Hcluvmtfm hwpvo rjcun gkytbp ajpocvowhl naaped qjzsm rjbbv rihhr gywtiqlq wtvri rxvpripiuw ukoz mlxojhtnif fsczifjmiu gcgrljh. Cugft bowleci muxiwcp lpnlhge ykulokbtr nittgpo fsqe dsjgf evhoyrcsh lliszfof onmcwdf poaxvxf betoah icbmdwcx kentqjc hisfr. Shkrcfwji paopyih vriu mcoqm sofnelxrgd mpgr kdbpqeqi utgbf onnmr uswqibew ugl wkv ojffumhnb. Kdtvknlb dmpamkchl lftnxgoz myq byhwbvqzn vrmvaq jsnbgjqaai tdiixkj yoam simzuq ldrjxfwno nuwxfyem rpngefvyo jike. Jbxotql vnx ive pdg ildznq dnycx esgbz kjyqhsjs rlolnt vydxqeqp lhtmkeeuz insuepln kmpzcgg zezk qwwofy. Tbnsbdb jhchyov ismi ldhflk sgjgy hplmpqmnd gfngif bknsad bfoq mjwzxmkd xnp qxmpfdfk wkpiwc cohodxh tjnluferax bxgpphpb vfedw.<sup><a href="#fn_bignote" id="reffn_bignote">bignote</a></sup></p>
<blockquote id="fn_footnote">
<sup>footnote</sup>. This is the first footnote.<a href="#reffn_footnote" title="Jump back to footnote [footnote] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_bignote">
<sup>bignote</sup>. Here’s one with multiple paragraphs and code.<a href="#reffn_bignote" title="Jump back to footnote [bignote] in the text."> &#8617;</a>
</blockquote>
<h3 id="Title-Id"><a href="#Title-Id" class="headerlink" title="Title Id"></a>Title Id</h3><p><strong>Hexo not support this syntax</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Markdown &#123;#markdown&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;markdown&quot;</span>&gt;</span></span>Markdown<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">[<span class="string">Markdown</span>](<span class="link">#markdown</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Delete-Divider"><a href="#Delete-Divider" class="headerlink" title="Delete Divider"></a>Delete Divider</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~Delete Divider~~</span><br></pre></td></tr></table></figure>
<p><del>Delete Divider</del></p>
<h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p><strong>Need a charter in the bracket, Hexo not support this syntax</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] Todo List 1</span><br><span class="line"><span class="bullet">-</span> [x] Todo List 2</span><br><span class="line"><span class="bullet">-</span> [ ] Todo List 3</span><br></pre></td></tr></table></figure>
<h3 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a><a href="http://blog.smallstars.top/posts/778ad936/">Emoji</a></h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">:tent:</span><br><span class="line">:joy:</span><br></pre></td></tr></table></figure>
<p>:tent:</p>
<p>:joy:</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://markdown.com.cn/">Markdown</a></li>
<li><a href="https://typora.io/">Typora</a></li>
</ul>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Mustache</title>
    <url>/posts/b1f95fde/</url>
    <content><![CDATA[<h1 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a><a href="https://github.com/janl/mustache.js/">Mustache</a></h1><p><strong>mustache.js is a zero-dependency implementation of the mustache template system in JavaScript. Mustache is a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.</strong></p>
<h2 id="Useage-in-Vue"><a href="#Useage-in-Vue" class="headerlink" title="Useage in Vue"></a>Useage in Vue</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- mustache --&gt;</span><br><span class="line">    &lt;!-- 1. Basic usage --&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2. expression --&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; counter * 10 &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3. function --&gt;</span><br><span class="line">    &lt;h2&gt;</span><br><span class="line">      &#123;&#123; getReverseMessage() &#125;&#125;</span><br><span class="line">    &lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;Small Stars&quot;,</span><br><span class="line">      counter: 100,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getReverseMessage() &#123;</span><br><span class="line">      return this.message.split(&quot; &quot;).reverse().join(&quot; &quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://mustache.github.io/mustache.5.html">Official Document</a></li>
<li><a href="https://www.jianshu.com/p/7f1cecdc27e1">学习笔记《Mustache》</a></li>
</ul>
]]></content>
      <tags>
        <tag>Mustache</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3</title>
    <url>/posts/3a42db2d/</url>
    <content><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><p><strong>Vue.js is a progressive JavaScript Framework</strong></p>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. Via CDN</span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">2. Scaffold via vite</span><br><span class="line">npm init vite project-name -- --template vue</span><br><span class="line">yarn create vite project-name --template vue</span><br><span class="line"></span><br><span class="line">3. Scaffold via vue-cli</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">yarn global add @vue/cli</span><br><span class="line">vue create project-name</span><br></pre></td></tr></table></figure>
<h2 id="Lifecycles"><a href="#Lifecycles" class="headerlink" title="Lifecycles"></a>Lifecycles</h2><p><strong>This is the complete life cycles of Vuejs, but the life cycle has changed in the setup in Vue3</strong></p>
<!-- 无法控制样式 -->
<!-- ![Lifecycles](https://v3.cn.vuejs.org/images/lifecycle.svg) -->
<p><img data-src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="Vuejs Lifecycles" style="width:100%" /></p>
<h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p><strong>The itself and its subcomponent are only rendered once, and the view is no longer update when if the value changes</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-once&gt;&#123;&#123; counter &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;decrement&quot;&gt;-&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Their effect is the same --&gt;</span><br><span class="line">&lt;h2 v-text&#x3D;&quot;message&quot;&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p><strong>Parse the string of HTML code</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- message:&lt;span style&#x3D;&quot;color:red&quot;&gt; SmallStars &lt;&#x2F;span&gt; --&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2 v-html&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p><strong>Skip the compilation process of itself and its child elements</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- &#123;&#123; message &#125;&#125; --&gt;</span><br><span class="line">&lt;h2 v-pre&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p><strong>Before the element is compiled, add the v-cloak class attribute</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-cloak&gt;&#123;&#123; counter &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 100,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">[v-cloak] &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p><strong>Dynamic binding of element</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a v-bind:src&#x3D;&quot;aLink&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;img :src&#x3D;&quot;imgLink&quot;&gt;&lt;&#x2F;img&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- binding class --&gt;</span><br><span class="line">&lt;!-- class: activated title --&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;&#123;activated: isActive, &#39;title&#39;: false&#125;&quot;&gt;div&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- this &#39;title&#39; will be parsed  --&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;[activated, &#39;title&#39;]&quot;&gt;div&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- class: activated title abc--&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;[activated, &#39;title&#39;, isAbc ? &#39;abc&#39; : &#39;&#39;]&quot;&gt;div&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;[activated, &#39;title&#39;, &#123;abc: isAbc&#125;]&quot;&gt;div&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- binding style --&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;color: red&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;14px&#39;&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;&#123;color: &#39;red&#39;, fontSize: finalFontSize + &#39;px&#39;&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;&#123;color: &#39;red&#39;, fontSize: finalFontSize + &#39;px&#39;&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;[&#123;color: &#39;red&#39;&#125;, &#123;fontSize: finalFontSize + &#39;px&#39;&#125;]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- binding attributes --&gt;</span><br><span class="line">&lt;!-- userName: &#39;name&#39; --&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">info: &#123;</span><br><span class="line">	nickName &#x3D; &#39;BlackAngel&#39;,</span><br><span class="line">	age &#x3D; 19,</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- &lt;div name &#x3D; &#39;smallstars&#39;&gt;&lt;&#x2F;div&gt; --&gt;</span><br><span class="line">&lt;div :[userName]&#x3D;&#39;smallstars&#39;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :[userName]&#x3D;&#39;smallstars&#39;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-bind&#x3D;&#39;info&#39;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :&#x3D;&#39;info&#39;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p><strong>Used to bind events and monitor</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click&#x3D;&quot;btnClick&quot;&gt;btn1&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @mousemove&#x3D;&quot;mouseMove&quot;&gt;btn2&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- binding the expression --&gt;</span><br><span class="line">&lt;button @mousemove&#x3D;&quot;counter++&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- binding object listens to multiple events --&gt;</span><br><span class="line">&lt;button v-on&#x3D;&quot;&#123; click: btnClick, mousemove: mousemove &#125;&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @&#x3D;&quot;&#123;click: btnClick, mousemove: mousemove&#125;&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- Incoming parameters --&gt;</span><br><span class="line">&lt;!-- An event parameter will be passed in by default --&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;btnClick&quot;&gt;btn1&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- $event to get event parameter --&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;btnClick($event, &#39;smallstars&#39;)&quot;&gt;btn1&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Use of modifiers --&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">.stop: event.stopPropagation()</span><br><span class="line">.prevent: event.preventDefault()</span><br><span class="line">.capture: Event listener uses capture mode</span><br><span class="line">.once: Trigger only once</span><br><span class="line">.left: Only click the left mouse button to take effect</span><br><span class="line">.right: Only click the right mouse button to take effect</span><br><span class="line">.middle: Only click the middle mouse button to take effect</span><br><span class="line">--&gt;</span><br><span class="line">&lt;button @click.stop&#x3D;&quot;btnClick&quot;&gt;btn1&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if v-else-if v-else"></a>v-if v-else-if v-else</h3><p><strong>v-if is lazy. When the condition is false, the component will not be rendered or will be destroyed</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;score&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class="line">&lt;h2 v-if&#x3D;&quot;score &gt; 90&quot;&gt;excellent&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2 v-else-if&#x3D;&quot;score &gt; 60&quot;&gt;qualified&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h2 v-else&gt;failed&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><strong>First of all, v-show does not support template. The difference from</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h2 v-show&#x3D;&quot;isShow&quot;&gt;excellent&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><strong>Dynamic rendering the data</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- array --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;(item, index) in items&quot;&gt;&#123;&#123;index&#125;&#125;: &#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;!-- object --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;(value, key, index) in info&quot;&gt;&#123;&#123;key&#125;&#125;: &#123;&#123;value&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;!-- number --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;(num, index) in 100&quot;&gt;&#123;&#123;index&#125;&#125;: &#123;&#123;num&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><h2 id="Diff"><a href="#Diff" class="headerlink" title="Diff"></a>Diff</h2><h3 id="VNode"><a href="#VNode" class="headerlink" title="VNode"></a>VNode</h3><p><strong>The essence of VNode(Virtual Node) is a JavaScript Object</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;div class=&quot;title&quot; style=&quot;font-size: 30px; color: red;&quot;&gt;VNode&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">const</span> VNode = &#123;</span><br><span class="line">  type: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    class: &quot;title&quot;,</span><br><span class="line">    style: &#123;</span><br><span class="line">      <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;30px&quot;</span>,</span><br><span class="line">      color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  children: <span class="string">&quot;VNode&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<pre class="mermaid">graph LR
  template --> VNode --> RealDOM</pre>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- First convert the template to virtual DOM, and then mount it to the real DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>2<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>4<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<pre class="mermaid">graph TB
    div --> p
    div --> span
    div --> strong
    p --> i
    p --> b</pre>

<h3 id="Diff-1"><a href="#Diff-1" class="headerlink" title="Diff"></a>Diff</h3><h4 id="Unkeyed"><a href="#Unkeyed" class="headerlink" title="Unkeyed"></a>Unkeyed</h4><p><strong>Different letters represent different nodes (The number is added here to facilitate drawing). The nodes are compared in turn, and if they are different, the nodes are updated. Finally if there are more old nodes than new nodes, the remaining nodes are removed, other wish all of them are added.</strong></p>
<pre class="mermaid">graph TB
 a1-->a2
 b1-->b2
 c1--update-->f2
 d1--update-->c2
 null--new-->d2</pre>

<h4 id="Keyed"><a href="#Keyed" class="headerlink" title="Keyed"></a>Keyed</h4><h2 id="Responsive-principle"><a href="#Responsive-principle" class="headerlink" title="Responsive principle"></a>Responsive principle</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue3 Responsive principle</span></span><br><span class="line"><span class="comment">// utils</span></span><br><span class="line"><span class="keyword">const</span> isObject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> !!val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&quot;object&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dataLog = <span class="function">(<span class="params">title, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(title);</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 13.To prevent the duplication of proxy</span></span><br><span class="line"><span class="comment"> * toProxy: &#123;Original: Proxy&#125;</span></span><br><span class="line"><span class="comment"> * toRaw: &#123;Proxy: Original&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> toProxy = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(),</span><br><span class="line">  toRaw = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.Create responsive Object</span></span><br><span class="line"><span class="keyword">const</span> createReactiveObject = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 5.Judging the target type</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 14.If the object has been proxied, return the proxied object</span></span><br><span class="line">  <span class="keyword">const</span> proxy = toProxy.get(target);</span><br><span class="line">  <span class="keyword">if</span> (proxy) <span class="keyword">return</span> proxy;</span><br><span class="line">  <span class="keyword">if</span> (toRaw.has(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> baseHandle = &#123;</span><br><span class="line">    get: <span class="function">(<span class="params">target, key, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">      <span class="comment">// 8.Use Reflect to get the value</span></span><br><span class="line">      <span class="comment">// return target[key]</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 21.Collection dependencies</span></span><br><span class="line">      <span class="comment">// correspond the keys of current object width reactiveEffects</span></span><br><span class="line">      track(target, key);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 9.consider the case of multi-level object</span></span><br><span class="line">      <span class="keyword">return</span> isObject(res) ? reactive(res) : res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * target: original object (&#123;name: &#x27;smallstars&#x27;&#125;)</span></span><br><span class="line"><span class="comment">     * key: keyword (name)</span></span><br><span class="line"><span class="comment">     * value: new value</span></span><br><span class="line"><span class="comment">     * receiver: current proxied object (observer)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    set: <span class="function">(<span class="params">target, key, value, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;set&quot;</span>);</span><br><span class="line">      <span class="comment">// This way cannot determine whether the operation is successful</span></span><br><span class="line">      <span class="comment">// target[key] = value;</span></span><br><span class="line">      <span class="comment">// console.log(target, key, value, receiver);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 10.Use Reflect to determine the status of operation</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 25.Determine whether it is a new attribute</span></span><br><span class="line">      <span class="keyword">const</span> hadKey = target.hasOwnProperty(key);</span><br><span class="line">      <span class="comment">// Avoid meaningless rendering views (eg: array.length)</span></span><br><span class="line">      <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">        <span class="comment">// data changed, need to rendering views</span></span><br><span class="line">        <span class="comment">// console.log(&quot;rendering&quot;);</span></span><br><span class="line">        trigger(target, <span class="string">&quot;add&quot;</span>, key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// property changed, don&#x27;t need to rendering views</span></span><br><span class="line">        <span class="comment">// console.log(&quot;no rendering&quot;);</span></span><br><span class="line">        trigger(target, <span class="string">&quot;set&quot;</span>, key);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 11.Return the res</span></span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 12.Delete the property by key</span></span><br><span class="line">    deleteProperty: <span class="function">(<span class="params">target, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;del&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, key);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 6.Create the observer of target</span></span><br><span class="line">  <span class="comment">// Use the baseHandle(ProxyHandler) function to truncate the operation</span></span><br><span class="line">  <span class="keyword">let</span> observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, baseHandle);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 15.Mark the original object has been proxied</span></span><br><span class="line">  toProxy.set(target, observed);</span><br><span class="line">  toRaw.set(observed, target);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 7.Return the observed</span></span><br><span class="line">  <span class="keyword">return</span> observed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Turn data into responsive</span></span><br><span class="line"><span class="keyword">const</span> reactive = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(target);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// collected of dependencies</span></span><br><span class="line"><span class="comment">// cache responsive effects</span></span><br><span class="line"><span class="keyword">const</span> activeEffectStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the target[key] changed, executed the effect</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">targetsMap: &#123;</span></span><br><span class="line"><span class="comment">  [target]: &#123;</span></span><br><span class="line"><span class="comment">    [key]: deps;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">deps: [effects]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 22.use targetsMap to collect dependencies of per targets[key]</span></span><br><span class="line"><span class="keyword">const</span> targetsMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> track = <span class="function">(<span class="params">target, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 23.Determine whether the stack is empty</span></span><br><span class="line">  <span class="keyword">let</span> effect = activeEffectStack[activeEffectStack.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 24.Determine whether the targetsMap is empty, initialize it</span></span><br><span class="line">  <span class="comment">// console.log(target, key);</span></span><br><span class="line">  <span class="keyword">if</span> (effect) &#123;</span><br><span class="line">    <span class="keyword">let</span> depsMap = targetsMap.get(target);</span><br><span class="line">    <span class="keyword">if</span> (!depsMap) targetsMap.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()));</span><br><span class="line">    <span class="keyword">let</span> deps = depsMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (!deps) depsMap.set(key, (deps = <span class="keyword">new</span> <span class="built_in">Set</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!deps.has(effect)) deps.add(effect);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 26.Called the effect to update views</span></span><br><span class="line"><span class="keyword">const</span> trigger = <span class="function">(<span class="params">target, type, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetsMap.get(target);</span><br><span class="line">  <span class="keyword">if</span> (depsMap) &#123;</span><br><span class="line">    <span class="keyword">const</span> deps = depsMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (deps) &#123;</span><br><span class="line">      deps.forEach(<span class="function">(<span class="params">effect</span>) =&gt;</span> &#123;</span><br><span class="line">        effect();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 19.Use stack cache fn(if this effect has other effect, there will be multiple values in the stack)</span></span><br><span class="line"><span class="comment"> * 1).push effect into stack</span></span><br><span class="line"><span class="comment"> * 2).execute fn</span></span><br><span class="line"><span class="comment"> * 3).pop the effect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> run = <span class="function">(<span class="params">effect, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">  <span class="comment">// prevent errors when fn is executed</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    activeEffectStack.push(effect);</span><br><span class="line">    <span class="comment">// 20. execute fn</span></span><br><span class="line">    fn();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    activeEffectStack.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 18.Create responsive effect</span></span><br><span class="line"><span class="keyword">const</span> createReactiveEffect = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> effect = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> run(effect, fn);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> effect;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 17.Turn effect into responsive</span></span><br><span class="line"><span class="keyword">const</span> effect = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> reactiveEffect = createReactiveEffect(fn);</span><br><span class="line">  <span class="comment">// executed firstly</span></span><br><span class="line">  reactiveEffect();</span><br><span class="line">  <span class="keyword">return</span> reactiveEffect;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let proxy = reactive(&#123; name: &quot;smallstars&quot; &#125;);</span></span><br><span class="line"><span class="comment">// // This effect is executed once when the dependencies are collected, and then called when the subsequent data is updated.</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(1);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// proxy.name = &quot;blackangel&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">// const info = &#123; name: &#123; firstName: &quot;small&quot;, lastName: &quot;stars&quot; &#125; &#125;;</span></span><br><span class="line"><span class="comment">// let proxy = reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // We need to prevent duplication of proxy</span></span><br><span class="line"><span class="comment">// // use WeakMap to store it</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"><span class="comment">// // reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const arr = [1, 2, 3];</span></span><br><span class="line"><span class="comment">// let proxy = reactive(arr);</span></span><br><span class="line"><span class="comment">// // it will trigger operation twice. 1.push 2.length</span></span><br><span class="line"><span class="comment">// proxy.push(4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.Defined the data (ref/reactive/computed)</span></span><br><span class="line"><span class="keyword">const</span> info = reactive(&#123; <span class="attr">counter1</span>: <span class="number">1</span>, <span class="attr">counter2</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 16.Side effects of data changes</span></span><br><span class="line">effect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;counter1:&quot;</span>, info.counter1);</span><br><span class="line">  <span class="comment">// console.log(&quot;counter2:&quot;, info.counter2);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.Change the data value</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  info.counter1++;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   info.counter2 *= 2;</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br></pre></td></tr></table></figure>
<h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p><strong>Here will brief explain part of the source code</strong></p>
<ol>
<li><a href="https://unpkg.com/vue@3.2.2/dist/vue.global.js">vue@3.2.2</a></li>
<li><a href="https://github.com/vuejs/vue-next">Search the vue-next in Github</a></li>
</ol>
<h3 id="Diff-2"><a href="#Diff-2" class="headerlink" title="Diff"></a>Diff</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// packages/runtime-core/src/renderer.ts</span></span><br><span class="line"><span class="comment">// diff</span></span><br><span class="line"><span class="keyword">const</span> patchChildren: PatchChildrenFn = (</span><br><span class="line">  n1, <span class="comment">// old nodes</span></span><br><span class="line">  n2, <span class="comment">// new nodes</span></span><br><span class="line">  container,</span><br><span class="line">  anchor,</span><br><span class="line">  parentComponent,</span><br><span class="line">  parentSuspense,</span><br><span class="line">  isSVG,</span><br><span class="line">  slotScopeIds,</span><br><span class="line">  optimized = <span class="literal">false</span></span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> c1 = n1 &amp;&amp; n1.children;</span><br><span class="line">  <span class="keyword">const</span> prevShapeFlag = n1 ? n1.shapeFlag : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> c2 = n2.children;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; patchFlag, shapeFlag &#125; = n2;</span><br><span class="line">  <span class="comment">// fast path</span></span><br><span class="line">  <span class="keyword">if</span> (patchFlag &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (patchFlag &amp; PatchFlags.KEYED_FRAGMENT) &#123;</span><br><span class="line">      <span class="comment">// this could be either fully-keyed or mixed (some keyed some not)</span></span><br><span class="line">      <span class="comment">// presence of patchFlag means children are guaranteed to be arrays</span></span><br><span class="line">      <span class="comment">// keyed</span></span><br><span class="line">      patchKeyedChildren(</span><br><span class="line">        c1 <span class="keyword">as</span> VNode[],</span><br><span class="line">        c2 <span class="keyword">as</span> VNodeArrayChildren,</span><br><span class="line">        container,</span><br><span class="line">        anchor,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        slotScopeIds,</span><br><span class="line">        optimized</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (patchFlag &amp; PatchFlags.UNKEYED_FRAGMENT) &#123;</span><br><span class="line">      <span class="comment">// unkeyed</span></span><br><span class="line">      patchUnkeyedChildren(</span><br><span class="line">        c1 <span class="keyword">as</span> VNode[],</span><br><span class="line">        c2 <span class="keyword">as</span> VNodeArrayChildren,</span><br><span class="line">        container,</span><br><span class="line">        anchor,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        slotScopeIds,</span><br><span class="line">        optimized</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// children has 3 possibilities: text, array or no children.</span></span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.TEXT_CHILDREN) &#123;</span><br><span class="line">    <span class="comment">// text children fast path</span></span><br><span class="line">    <span class="keyword">if</span> (prevShapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) &#123;</span><br><span class="line">      unmountChildren(c1 <span class="keyword">as</span> VNode[], parentComponent, parentSuspense);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c2 !== c1) &#123;</span><br><span class="line">      hostSetElementText(container, c2 <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (prevShapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) &#123;</span><br><span class="line">      <span class="comment">// prev children was array</span></span><br><span class="line">      <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) &#123;</span><br><span class="line">        <span class="comment">// two arrays, cannot assume anything, do full diff</span></span><br><span class="line">        patchKeyedChildren(</span><br><span class="line">          c1 <span class="keyword">as</span> VNode[],</span><br><span class="line">          c2 <span class="keyword">as</span> VNodeArrayChildren,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// no new children, just unmount old</span></span><br><span class="line">        unmountChildren(c1 <span class="keyword">as</span> VNode[], parentComponent, parentSuspense, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// prev children was text OR null</span></span><br><span class="line">      <span class="comment">// new children is array OR null</span></span><br><span class="line">      <span class="keyword">if</span> (prevShapeFlag &amp; ShapeFlags.TEXT_CHILDREN) &#123;</span><br><span class="line">        hostSetElementText(container, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// mount new if array</span></span><br><span class="line">      <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) &#123;</span><br><span class="line">        mountChildren(</span><br><span class="line">          c2 <span class="keyword">as</span> VNodeArrayChildren,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unkey</span></span><br><span class="line"><span class="keyword">const</span> patchUnkeyedChildren = (</span><br><span class="line">  c1: VNode[],</span><br><span class="line">  c2: VNodeArrayChildren,</span><br><span class="line">  container: RendererElement,</span><br><span class="line">  anchor: RendererNode | <span class="literal">null</span>,</span><br><span class="line">  parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span><br><span class="line">  parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span><br><span class="line">  isSVG: <span class="built_in">boolean</span>,</span><br><span class="line">  slotScopeIds: <span class="built_in">string</span>[] | <span class="literal">null</span>,</span><br><span class="line">  optimized: <span class="built_in">boolean</span></span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  c1 = c1 || EMPTY_ARR;</span><br><span class="line">  c2 = c2 || EMPTY_ARR;</span><br><span class="line">  <span class="comment">// get length of old nodes</span></span><br><span class="line">  <span class="keyword">const</span> oldLength = c1.length;</span><br><span class="line">  <span class="comment">// get length of new nodes</span></span><br><span class="line">  <span class="keyword">const</span> newLength = c2.length;</span><br><span class="line">  <span class="comment">// get the minimum length</span></span><br><span class="line">  <span class="keyword">const</span> commonLength = <span class="built_in">Math</span>.min(oldLength, newLength);</span><br><span class="line">  <span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> nextChild = (c2[i] = optimized</span><br><span class="line">      ? cloneIfMounted(c2[i] <span class="keyword">as</span> VNode)</span><br><span class="line">      : normalizeVNode(c2[i]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compare nodes one by one</span></span><br><span class="line">    patch(</span><br><span class="line">      c1[i],</span><br><span class="line">      nextChild,</span><br><span class="line">      container,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      parentComponent,</span><br><span class="line">      parentSuspense,</span><br><span class="line">      isSVG,</span><br><span class="line">      slotScopeIds,</span><br><span class="line">      optimized</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the number of new nodes is less</span></span><br><span class="line">  <span class="keyword">if</span> (oldLength &gt; newLength) &#123;</span><br><span class="line">    <span class="comment">// remove old</span></span><br><span class="line">    unmountChildren(</span><br><span class="line">      c1,</span><br><span class="line">      parentComponent,</span><br><span class="line">      parentSuspense,</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      commonLength</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// mount new</span></span><br><span class="line">    mountChildren(</span><br><span class="line">      c2,</span><br><span class="line">      container,</span><br><span class="line">      anchor,</span><br><span class="line">      parentComponent,</span><br><span class="line">      parentSuspense,</span><br><span class="line">      isSVG,</span><br><span class="line">      slotScopeIds,</span><br><span class="line">      optimized,</span><br><span class="line">      commonLength</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Differences-between-Vue2-and-Vue3"><a href="#Differences-between-Vue2-and-Vue3" class="headerlink" title="Differences between Vue2 and Vue3"></a>Differences between Vue2 and Vue3</h2><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><h4 id="Diff-algorithm-optimization"><a href="#Diff-algorithm-optimization" class="headerlink" title="Diff algorithm optimization"></a>Diff algorithm optimization</h4><ul>
<li><p>VNodes in Vue2 are a full comparison</p>
<p>The simple summary is that the pointers on both sides move to the middle for comparison, until one of the traversal of oldCh or newCh is completed. In the Vue2, virtual DOM is a full comparison process. When the object is too large, the update of VNodes will be slower.</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/vue/vue2-diff-img1.jpg" alt="img"></p>
</li>
<li><p>Vue3 added a static flag (PatchFlag). During the comparison, only nodes with static flags are compared, and the specific comparison content can be learned through the flags.</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/posts/53d0684b/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p><strong>Here, I will slowly update some knowledge points about Linux</strong></p>
<h2 id="Nohup-no-hang-up"><a href="#Nohup-no-hang-up" class="headerlink" title="Nohup(no hang up)"></a>Nohup(no hang up)</h2><p><strong>It’s used to run commands in the background of system hang up. Exiting the terminal will not affect the running of the program</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nohup Command [ Arg … ] [　&amp; ]</span></span><br><span class="line"><span class="comment"># Command：the command will be executed</span></span><br><span class="line"><span class="comment"># Arg：some parameters, we can specify the output file</span></span><br><span class="line"><span class="comment"># &amp;：hang the program in the background</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># running the python program</span></span><br><span class="line">nohup python bot.py &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># specify the output file to runoob.log</span></span><br><span class="line">nohup python bot.py &gt; runoob.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 – stdin (standard input)</span></span><br><span class="line"><span class="comment"># 1 – stdout (standard output)</span></span><br><span class="line"><span class="comment"># 2 – stderr (standard error)</span></span><br><span class="line"><span class="comment"># 2&gt;&amp;1: Redirect the standard error 2 to standard output &amp;1, and &amp;1 is redirected to the runoob.log file</span></span><br><span class="line">nohup python bot.py &gt; runoob.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="https://www.runoob.com/linux/linux-comm-nohup.html">Linux nohup</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP</title>
    <url>/posts/ad32db8f/</url>
    <content><![CDATA[<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p><strong>KMP algorithm is an improved version of pattern matching. It’s reduced the number of repeated mathcing.</strong></p>
<h2 id="Partial-Match-Array"><a href="#Partial-Match-Array" class="headerlink" title="Partial Match Array"></a>Partial Match Array</h2><h3 id="Define"><a href="#Define" class="headerlink" title="Define"></a>Define</h3><p><strong>Prefix string:</strong> All header substrings of a string except the last character.</p>
<p><strong>Suffix string:</strong> All trailing substrings of a string execept the first character.</p>
<p><strong>PM:</strong> PM is the maximum length of string at the intersection of prefix and suffix string.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Index</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>S=”ababa”</strong></td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">a</td>
</tr>
<tr>
<td style="text-align:center"><strong>PM</strong></td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>‘a’: $pre=suf=\varnothing$, PM = 0.</li>
<li>‘ab’: $pre={a}, \ suf={b}, \ pre \cap suf = \varnothing$, PM = 0.</li>
<li>‘aba’:$pre={a,ab}, \ suf={a,ba}, \ pre \cap suf = {a}$, PM = 1.</li>
<li>‘abab’:$pre={a,ab,aba}, \ suf={b,ab,bab}, \ pre \cap suf = {ab}$, PM = 2.</li>
<li>‘ababa’:$pre={a,ab,aba,abab}, \ suf={a,ba,aba,baba}, \ pre \cap suf = {a,aba}$, PM = 3.</li>
</ol>
<h3 id="Matching-Process"><a href="#Matching-Process" class="headerlink" title="Matching Process"></a>Matching Process</h3><p><strong>j</strong> is mathcing pointer position of current substring.</p>
<p><strong>The number of digits moving to the right = The number of characters have been matched - PM value of corresponding section.</strong></p>
<script type="math/tex; mode=display">
txt = ababcabcacbab,\  pat=abcac</script><script type="math/tex; mode=display">
Move = (j-1)\  - \  PM[j-1]</script><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Index</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>S=”abcac”</strong></td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center"><strong>PM</strong></td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<p><strong>step 1:</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">a</th>
<th style="text-align:center">c</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">
Move = (3 - 1) - PM[2] = 2 - 0 = 2</script><p><strong>step 2:</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">a</th>
<th style="text-align:center">c</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">
Move = (5 - 1) - PM[4] = 4 - 1 = 3</script><p><strong>step 3:</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">a</th>
<th style="text-align:center">c</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">a</th>
<th style="text-align:center">c</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>For PM, when matching failed, we query the PM value of previous element. We move the PM values one place to right, this new array is called Next, we use -1 to fill in the first place. Now we can use Next value of current position when matching failed.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Index</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>S=”abcac”</strong></td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center"><strong>Next</strong></td>
<td style="text-align:center">-1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">
Move = (j - 1)\  - \ next[j]</script><script type="math/tex; mode=display">
j = j - Move = j - ((j-1)-next[j]) = next[j] + 1</script><p>So we can simplify the formula. Add 1 to all values in Next.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Index</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>S=”abcac”</strong></td>
<td style="text-align:center">a</td>
<td style="text-align:center">b</td>
<td style="text-align:center">c</td>
<td style="text-align:center">a</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center"><strong>Next</strong></td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">
j = next[j]</script><h2 id="Get-Next"><a href="#Get-Next" class="headerlink" title="Get Next"></a>Get Next</h2><p><strong>We can get it form the previous PM, but it’s too troublesome.</strong></p>
<script type="math/tex; mode=display">
txt = s_1s_2...s_n</script><script type="math/tex; mode=display">
pat = p_1p_2...p_m</script><p><strong>k</strong> means it’s being compared to the k-th character in the pattern string. i is the current matching pointer of main string.</p>
<script type="math/tex; mode=display">
p_1p_2...p_{k-1} = p_{j-k+1}p_{j-k+2}...p_{j-1}</script><p>Here refer to the calculation of PM value. PM is the maximum value, so they’re the same when it doesn’t reach the maximum.</p>
<p><strong>The strings in parentheses are the same.</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">$s_1$</th>
<th style="text-align:center">[…</th>
<th style="text-align:center">…</th>
<th style="text-align:center">…]</th>
<th style="text-align:center">…</th>
<th style="text-align:center">…</th>
<th style="text-align:center">[$s_{i-k+1}$</th>
<th style="text-align:center">…</th>
<th style="text-align:center">$s_{i-1}$]</th>
<th style="text-align:center">$s_i$</th>
<th style="text-align:center">…</th>
<th style="text-align:center">…</th>
<th style="text-align:center">…</th>
<th style="text-align:center">…</th>
<th style="text-align:center">$s_n$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">[$p_1$</td>
<td style="text-align:center">…</td>
<td style="text-align:center">$p_{k-1}$]</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">[$p_{i-k+1}$</td>
<td style="text-align:center">…</td>
<td style="text-align:center">$p_{j-1}$]</td>
<td style="text-align:center">$p_j$</td>
<td style="text-align:center">…</td>
<td style="text-align:center">$p_{m}$</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">[$p_1$</td>
<td style="text-align:center">…</td>
<td style="text-align:center">$p_{k-1}$]</td>
<td style="text-align:center">$p_k$</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">$p_{m}$</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">
next[j] =
\begin{cases}
0, &(j = 0)
\\
max(next[k])+1, &(1 \lt k \lt j \ and \ p_1...p_k = p_{j-k+1}...p_{j-1})
\\
1, &else
\end{cases}</script><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getNext = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = s.length,</span><br><span class="line">    j = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> next = <span class="keyword">new</span> <span class="built_in">Array</span>(len).fill(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; next[++i] = ++j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j !== -<span class="number">1</span> &amp;&amp; s[i] !== s[j]) &#123;</span><br><span class="line">      j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> kmp = <span class="function">(<span class="params">s, t</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> next = getNext(t),</span><br><span class="line">    [slen, tlen] = [s.length, t.length],</span><br><span class="line">    i = (j = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; slen &amp;&amp; j &lt; tlen) &#123;</span><br><span class="line">    <span class="comment">// next[0] is -1</span></span><br><span class="line">    <span class="keyword">if</span> (j === <span class="number">0</span> || s[i] === t[j]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      j++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (j &gt;= tlen) <span class="keyword">return</span> i - tlen;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.bilibili.com/video/BV16X4y137qw/?spm_id_from=333.788.recommend_more_video.1">KMP 算法之求 next 数组代码讲解</a></p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM Problems</title>
    <url>/posts/643e93d7/</url>
    <content><![CDATA[<h1 id="ACM-Problems"><a href="#ACM-Problems" class="headerlink" title="ACM Problems"></a>ACM Problems</h1><p><strong>Here are some of the problems I encountered in ACM.</strong></p>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="Merge-Intervals"><a href="#Merge-Intervals" class="headerlink" title="Merge Intervals"></a><a href="https://leetcode-cn.com/problems/merge-intervals/">Merge Intervals</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Intervals that can be merged must be contiguous.</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span> (<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Sort the intervals and start from the minimum value.</span></span><br><span class="line">  intervals.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = res.length;</span><br><span class="line">    <span class="comment">// compare with the last value of res.</span></span><br><span class="line">    <span class="keyword">if</span> (res.length === <span class="number">0</span> || res[len - <span class="number">1</span>][<span class="number">1</span>] &lt; intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">      res.push([...intervals[i]]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Take the maximum value when merge.</span></span><br><span class="line">      res[len - <span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">Math</span>.max(res[len - <span class="number">1</span>][<span class="number">1</span>], intervals[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Diagonal-Traverse"><a href="#Diagonal-Traverse" class="headerlink" title="Diagonal Traverse"></a><a href="https://leetcode-cn.com/problems/diagonal-traverse/">Diagonal Traverse</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Traverse the array with each value in the first row as starting point in the upper right corner, and finally reverse the odd traversal array.</span></span><br><span class="line"><span class="keyword">var</span> findDiagonalOrder = <span class="function"><span class="keyword">function</span> (<span class="params">mat</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [h, w] = [mat.length, mat[<span class="number">0</span>].length],</span><br><span class="line">    <span class="comment">// n is the number of traversal</span></span><br><span class="line">    n = h + w - <span class="number">1</span>,</span><br><span class="line">    res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j, i;</span><br><span class="line">    <span class="comment">// When hight is larger than the width, the starting point moves down.</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt;= w) &#123;</span><br><span class="line">      j = w - <span class="number">1</span>;</span><br><span class="line">      i = k - (w - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      j = k;</span><br><span class="line">      i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sub = [];</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; i &lt; h) &#123;</span><br><span class="line">      sub.push(mat[i][j]);</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!((i + j) % <span class="number">2</span>)) &#123;</span><br><span class="line">      sub = sub.reverse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(res, sub);</span></span><br><span class="line">    res = res.concat(sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="Longest-Common-Prefix-LCP"><a href="#Longest-Common-Prefix-LCP" class="headerlink" title="Longest Common Prefix (LCP)"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/">Longest Common Prefix (LCP)</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The longest common prefix is continuously updated by the first string standard.</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span> (<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (strs.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (strs.length === <span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> res = strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; res.length; j++) &#123;</span><br><span class="line">      <span class="comment">// console.log(j, res[j], strs[i][j]);</span></span><br><span class="line">      <span class="keyword">if</span> (res[j] !== strs[i][j]) &#123;</span><br><span class="line">        res = res.substring(<span class="number">0</span>, j);</span><br><span class="line">        <span class="comment">// console.log(res);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h2><h3 id="Valid-Sudoku"><a href="#Valid-Sudoku" class="headerlink" title="Valid Sudoku"></a><a href="https://leetcode-cn.com/problems/valid-sudoku/">Valid Sudoku</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Double traversal, putting different values into different arrays, filtering according to the rules.</span></span><br><span class="line"><span class="keyword">var</span> isValidSudoku = <span class="function"><span class="keyword">function</span> (<span class="params">board</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rowArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>()),</span><br><span class="line">    colArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>()),</span><br><span class="line">    boxArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">      <span class="comment">// if there is not a number, skip it.</span></span><br><span class="line">      <span class="keyword">if</span> (board[i][j] === <span class="string">&quot;.&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="comment">// according the i and j to judge the index of sub-box.</span></span><br><span class="line">      <span class="keyword">let</span> boxIndex = <span class="built_in">Math</span>.floor(i / <span class="number">3</span>) * <span class="number">3</span> + <span class="built_in">Math</span>.floor(j / <span class="number">3</span>);</span><br><span class="line">      <span class="comment">// check row</span></span><br><span class="line">      <span class="keyword">if</span> (rowArr[i].has(board[i][j])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// check column</span></span><br><span class="line">      <span class="keyword">if</span> (colArr[j].has(board[i][j])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// check box</span></span><br><span class="line">      <span class="keyword">if</span> (boxArr[boxIndex].has(board[i][j])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add the new valid value.</span></span><br><span class="line">      rowArr[i].add(board[i][j]);</span><br><span class="line">      colArr[j].add(board[i][j]);</span><br><span class="line">      boxArr[boxIndex].add(board[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(rowArr);</span></span><br><span class="line">  <span class="comment">// console.log(colArr);</span></span><br><span class="line">  <span class="comment">// console.log(boxArr);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><h3 id="Coin-Change"><a href="#Coin-Change" class="headerlink" title="Coin Change"></a><a href="https://leetcode-cn.com/problems/coin-change/">Coin Change</a></h3><p><strong>Transition equations:</strong> $F(i) = \min_{j=0…n-1}F(i - Cj) + 1$</p>
<p><strong><em>F(i)</em></strong> is the minimum number of coins required to make up current amount. <strong><em>Cj</em></strong> is the value of j-th coins.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// From 1 to amount, find the optimal solution for each step.</span></span><br><span class="line"><span class="keyword">var</span> coinChange = <span class="function"><span class="keyword">function</span> (<span class="params">coins, amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (coins.length === <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> len = coins.length,</span><br><span class="line">    dp = [<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">    <span class="comment">// Initial</span></span><br><span class="line">    dp.push(<span class="literal">Infinity</span>);</span><br><span class="line">    <span class="comment">// optimal solution of currenting money</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt;= coins[j] &amp;&amp; dp[i - coins[j]] !== <span class="literal">Infinity</span>) &#123;</span><br><span class="line">        <span class="comment">// with the different coin update the dp[i] to minimum constantly.</span></span><br><span class="line">        dp[i] = <span class="built_in">Math</span>.min(dp[i - coins[j]] + <span class="number">1</span>, dp[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(dp);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[amount] === <span class="literal">Infinity</span> ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Jump-Game"><a href="#Jump-Game" class="headerlink" title=" Jump Game"></a><a href="https://leetcode-cn.com/problems/jump-game/"> Jump Game</a></h3><p><strong>Transition equations:</strong> $F(j) = F(i) \ and \ (i+u(i)) \geq j \ \ (0\le i \lt j)$</p>
<p><strong><em>F(j)</em></strong> records whether the position can be reached. <strong><em>u(i)</em></strong> is the displacement at <strong><em>i</em></strong>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Record whether current position can be reached.</span></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!nums || nums.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> dp = [<span class="literal">true</span>],</span><br><span class="line">    len = nums.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    dp.push(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (dp[j] &amp;&amp; j + nums[j] &gt;= i) &#123;</span><br><span class="line">        dp[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(dp);</span></span><br><span class="line">  <span class="keyword">return</span> dp[len - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Unique-Paths"><a href="#Unique-Paths" class="headerlink" title="Unique Paths"></a><a href="https://leetcode-cn.com/problems/unique-paths/">Unique Paths</a></h3><p><strong>Transition equations:</strong> $f(i,j) = f(i−1, j) + f(i, j−1)$</p>
<p><strong><em>F(i,j)</em></strong> is the number of paths to record the current location.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Current number of path is equal to the sum of values of upper cell and left cell.</span></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span> (<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(m).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">0</span> || j === <span class="number">0</span>) dp[i][j] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(dp);</span></span><br><span class="line">  <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Unique-Paths-II"><a href="#Unique-Paths-II" class="headerlink" title="Unique Paths II"></a><a href="https://leetcode-cn.com/problems/unique-paths-ii/">Unique Paths II</a></h3><p><strong>Transition equations:</strong> $f(i,j) =<br>\begin{cases}<br>0, &amp;u(i, j) = 0    \<br>f(i-1, j) + f(i, j-1), &amp;u(i, j) \neq 0<br>\end{cases}$</p>
<p><strong><em>u(i,j)</em></strong> is to record whether there is an obstacle at the current location.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uniquePathsWithObstacles = <span class="function"><span class="keyword">function</span> (<span class="params">obstacleGrid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [h, w] = [obstacleGrid.length, obstacleGrid[<span class="number">0</span>].length];</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(h).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(w).fill(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obstacleGrid[i][j] === <span class="number">1</span>) dp[i][j] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span> &amp;&amp; j === <span class="number">0</span>) &#123;</span><br><span class="line">          dp[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obstacleGrid[i][j] !== <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= <span class="number">1</span>) dp[i][j] += dp[i - <span class="number">1</span>][j];</span><br><span class="line">          <span class="keyword">if</span> (j &gt;= <span class="number">1</span>) dp[i][j] += dp[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(dp);</span></span><br><span class="line">  <span class="keyword">return</span> dp[h - <span class="number">1</span>][w - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">Best Time to Buy and Sell Stock</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span> (<span class="params">prices</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// judge the boundary conditions</span></span><br><span class="line">  <span class="keyword">if</span> (!prices || prices.length === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> len = prices.length,</span><br><span class="line">    dp = [<span class="number">0</span>],</span><br><span class="line">    minPrice = prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// find the minimum price</span></span><br><span class="line">    minPrice = <span class="built_in">Math</span>.min(minPrice, prices[i]);</span><br><span class="line">    <span class="comment">// record the maximum profit of per day</span></span><br><span class="line">    dp.push(<span class="built_in">Math</span>.max(dp[i - <span class="number">1</span>], prices[i] - minPrice));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[len - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><h3 id="Jump-Game-1"><a href="#Jump-Game-1" class="headerlink" title=" Jump Game"></a><a href="https://leetcode-cn.com/problems/jump-game/"> Jump Game</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Constantly update maximum distance, observe whether the maximum distance can reach the finish line.</span></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> maxPos = nums[<span class="number">0</span>],</span><br><span class="line">    len = nums.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whether you can continue to expand scope within scope of accessibility.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= maxPos; i++) &#123;</span><br><span class="line">    maxPos = <span class="built_in">Math</span>.max(maxPos, i + nums[i]);</span><br><span class="line">    <span class="comment">// console.log(i, maxPos);</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; len - <span class="number">1</span> &amp;&amp; maxPos &gt;= len - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/ACMer1.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dx = [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  dy = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> polymerize = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length,</span><br><span class="line">    res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> h,</span><br><span class="line">    w = -<span class="literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    h = h &gt; arr[i][<span class="number">0</span>] ? h : arr[i][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">    w = w &gt; arr[i][<span class="number">1</span>] ? w : arr[i][<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> flag = <span class="keyword">new</span> <span class="built_in">Array</span>(h).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(w).fill(<span class="literal">false</span>)),</span><br><span class="line">    lake = <span class="keyword">new</span> <span class="built_in">Array</span>(h).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(w).fill(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    lake[arr[i][<span class="number">0</span>]][arr[i][<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(lake);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag[arr[i][<span class="number">0</span>]][arr[i][<span class="number">1</span>]]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    flag[arr[i][<span class="number">0</span>]][arr[i][<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> cur = [arr[i]],</span><br><span class="line">      index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index !== cur.length) &#123;</span><br><span class="line">      <span class="keyword">let</span> [m, n] = cur[index];</span><br><span class="line">      <span class="comment">// console.log(m, n);</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// console.log(m + dy[i]);</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          m + dy[i] &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">          m + dy[i] &lt; h &amp;&amp;</span><br><span class="line">          n + dx[i] &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">          n + dx[i] &lt; w &amp;&amp;</span><br><span class="line">          !flag[m + dy[i]][n + dx[i]] &amp;&amp;</span><br><span class="line">          lake[m + dy[i]][n + dx[i]]</span><br><span class="line">        ) &#123;</span><br><span class="line">          cur.push([m + dy[i], n + dx[i]]);</span><br><span class="line">          flag[m + dy[i]][n + dx[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      index++;</span><br><span class="line">      <span class="comment">// console.log(cur);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.push([...cur]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="Max-Area-of-Island"><a href="#Max-Area-of-Island" class="headerlink" title="Max Area of Island"></a><a href="https://leetcode-cn.com/problems/max-area-of-island/">Max Area of Island</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> maxAreaOfIsland = <span class="function">(<span class="params">grid</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// up down left right</span></span><br><span class="line">  <span class="keyword">const</span> dx = [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> dy = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (!grid) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// width height</span></span><br><span class="line">  <span class="keyword">const</span> [w, h] = [grid[<span class="number">0</span>].length, grid.length];</span><br><span class="line">  <span class="comment">// curMaxLen is the number of a block</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>,</span><br><span class="line">    curMaxLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Judge the boundary conditions</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt;= h || y &gt;= w || x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || !grid[x][y]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// Mark the point reached</span></span><br><span class="line">    grid[x][y] = <span class="number">0</span>;</span><br><span class="line">    curMaxLen++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spread to surrounding points</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      dfs(x + dx[i], y + dy[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line">      <span class="comment">// if the value is 0</span></span><br><span class="line">      <span class="keyword">if</span> (!grid[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">      dfs(i, j);</span><br><span class="line">      res = <span class="built_in">Math</span>.max(res, curMaxLen);</span><br><span class="line">      <span class="comment">// Need to clear the length after traversing a part</span></span><br><span class="line">      curMaxLen = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Permutations"><a href="#Permutations" class="headerlink" title="Permutations"></a><a href="https://leetcode-cn.com/problems/permutations/">Permutations</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permute = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">curPath</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// All  number has been recorded</span></span><br><span class="line">    <span class="keyword">if</span> (curPath.length === nums.length) <span class="keyword">return</span> res.push([...curPath]);</span><br><span class="line">    <span class="comment">//  Traverse array to find the unrecorded numbers</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (curPath.indexOf(nums[i]) !== -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">      curPath.push(nums[i]);</span><br><span class="line">      dfs(curPath);</span><br><span class="line">      curPath.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// Initialize the path array</span></span><br><span class="line">  dfs([]);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm and Data Structure</title>
    <url>/posts/17f44e1a/</url>
    <content><![CDATA[<h1 id="Algorithm-and-Data-Structure"><a href="#Algorithm-and-Data-Structure" class="headerlink" title="Algorithm and Data Structure"></a>Algorithm and Data Structure</h1><p><strong>Algorithm and Data Structure.</strong></p>
<h2 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><strong>The position of substrings (pattern string) is called pattern matching of strings.</strong></p>
<h4 id="Implement-strStr"><a href="#Implement-strStr" class="headerlink" title="Implement strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/">Implement strStr()</a></h4><ul>
<li><p>Violent match</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strStr = <span class="function"><span class="keyword">function</span> (<span class="params">haystack, needle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [len1, len2] = [haystack.length, needle.length];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = (j = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2) &#123;</span><br><span class="line">    <span class="comment">// console.log(i, j);</span></span><br><span class="line">    <span class="keyword">if</span> (haystack[i] === needle[j]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      j++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i = i - j + <span class="number">1</span>;</span><br><span class="line">      j = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (j &gt;= len2) <span class="keyword">return</span> i - j;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>KMP</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h3><p><strong>Hash Table is a structure of key-value.</strong></p>
<h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><h4 id="Array-to-Tree"><a href="#Array-to-Tree" class="headerlink" title="Array to Tree"></a>Array to Tree</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the stuct of TreeNode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">  id = <span class="number">0</span>;</span><br><span class="line">  pid = <span class="number">0</span>;</span><br><span class="line">  name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  children = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, pid, name &#125; = node;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.pid = pid;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createTreeNode = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">new</span> TreeNode(node);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the compare of sort</span></span><br><span class="line"><span class="keyword">const</span> compare = <span class="function">(<span class="params">properties</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[properties[<span class="number">0</span>]] !== b[properties[<span class="number">0</span>]]) &#123;</span><br><span class="line">      <span class="keyword">return</span> a[properties[<span class="number">0</span>]] - b[properties[<span class="number">0</span>]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a[properties[<span class="number">1</span>]] - b[properties[<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayToTree = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// judge the boundary conditions</span></span><br><span class="line">  <span class="keyword">if</span> (!arr || !arr.length) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// sort the data according to rules, pid -&gt; id</span></span><br><span class="line">  arr.sort(compare([<span class="string">&quot;pid&quot;</span>, <span class="string">&quot;id&quot;</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * root</span></span><br><span class="line"><span class="comment">   * curNodes: record which nodes have been traversed</span></span><br><span class="line"><span class="comment">   * curParNode: record who the current parent node is</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> root = createTreeNode(arr.shift()),</span><br><span class="line">    curNodes = [root],</span><br><span class="line">    curParNode = curNodes.shift();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> node <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">let</span> curNode = createTreeNode(node);</span><br><span class="line">    <span class="comment">// Mark the curNode(current node) has been traversed, put it into the curNodes</span></span><br><span class="line">    curNodes.push(curNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Determine whether the parent node of curNode(current node) is the curParNode(current parent node)</span></span><br><span class="line">    <span class="keyword">while</span> (curParNode.id !== curNode.pid) &#123;</span><br><span class="line">      <span class="comment">// if not, changed the curParNode</span></span><br><span class="line">      curParNode = curNodes.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// put the children node into the curParNode&#x27;s children array</span></span><br><span class="line">    curParNode.children.push(curNode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrayToTree(data));</span><br></pre></td></tr></table></figure>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h3 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">arr, a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = arr[a]</span><br><span class="line">  arr[a] = arr[b]</span><br><span class="line">  arr[b] = temp</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="BubbleSort"><a href="#BubbleSort" class="headerlink" title="BubbleSort"></a>BubbleSort</h4><p><strong>If a larger value is encountered, pass it backward.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bubbleSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="comment">// Tow adjacent elements compare and swap.</span></span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) swap(arr, i, i + <span class="number">1</span>)</span><br><span class="line">      <span class="comment">// Current element and the last element compare and swap.</span></span><br><span class="line">      <span class="comment">// if(arr[i] &gt; arr[len]) swap(arr, i, len)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SelectSort"><a href="#SelectSort" class="headerlink" title="SelectSort"></a>SelectSort</h4><p><strong>Select the maximum value in current scope and place it last.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> selectSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">    <span class="keyword">let</span> maxIndex = <span class="number">0</span>,</span><br><span class="line">	      maxVal = arr[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// because len--, here sholud is len+1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] &gt; maxVal)&#123;</span><br><span class="line">	      maxVal = arr[i]</span><br><span class="line">        maxIndex = i</span><br><span class="line">      &#125;</span><br><span class="line">      swap(arr, maxIndex, len)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="InsertSort"><a href="#InsertSort" class="headerlink" title="InsertSort"></a>InsertSort</h4><p><strong>From the beginning of traversal, asuume that the n-1 has been sorted, and compare and insert from back to front.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> insertSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Assume the first value is ordered.</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> j = i,</span><br><span class="line">        temp = arr[j]</span><br><span class="line">    <span class="comment">// Find the current correct position.</span></span><br><span class="line">    <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; temp)&#123;</span><br><span class="line">      arr[j] = arr[j-<span class="number">1</span>]</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ShellSort"><a href="#ShellSort" class="headerlink" title="ShellSort"></a>ShellSort</h4><p><strong>The advanced version of  insert sort.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shellSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">let</span> gap = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(gap)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// shellSort is start from the second part, so our i start from gap to the end of array.</span></span><br><span class="line">    <span class="comment">// This gap is rounded down, so there may be extra parts in lower half.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = gap; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="keyword">let</span> j = i,</span><br><span class="line">          temp = arr[i]</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j - gap] &gt; temp)&#123;</span><br><span class="line">        arr[j] = arr[j - gap]</span><br><span class="line">        j -= gap</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="QuickSort"><a href="#QuickSort" class="headerlink" title="QuickSort"></a>QuickSort</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  quick(arr, <span class="number">0</span>, len-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> quick = <span class="function">(<span class="params">arr, left, right</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span> arr</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// find the pivot</span></span><br><span class="line">  <span class="keyword">let</span> pivot = median(arr, left, right)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// double pointers traversal exchange value</span></span><br><span class="line">  <span class="keyword">let</span> i = left</span><br><span class="line">  <span class="keyword">let</span> j = right-<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= pivot) i++</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[j] &gt;= pivot) j--</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= j) <span class="keyword">break</span></span><br><span class="line">    swap(arr, i, j)</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, j, right-<span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  quick(arr, left, j-<span class="number">1</span>)</span><br><span class="line">  quick(arr, j+<span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="function"><span class="title">median</span>(<span class="params">arr, left, right</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// first, sort the three values</span></span><br><span class="line">  <span class="keyword">if</span>(arr[left] &gt; arr[right]) swap(arr, left, right)</span><br><span class="line">  <span class="keyword">if</span>(arr[left] &gt; arr[mid]) swap(arr, left, mid)</span><br><span class="line">  <span class="keyword">if</span>(arr[mid] &gt; arr[right]) swap(arr, mid, right)</span><br><span class="line">	</span><br><span class="line">  <span class="comment">// second, place the middle value in the correct position</span></span><br><span class="line">  swap(arr, mid, right-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> arr[right-<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="MergeSort"><a href="#MergeSort" class="headerlink" title="MergeSort"></a>MergeSort</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">if</span>(len &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> leftArr = arr.slice(<span class="number">0</span>, mid),</span><br><span class="line">      rightArr = arr.slice(mid)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(leftArr), mergeSort(rightArr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">leftArr, rightArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [leftArrLen, rightArrLen] = [leftArr.length, rightArr.length]</span><br><span class="line">  <span class="keyword">let</span> leftIndex = <span class="number">0</span>, rightIndex = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> mergeArr = []</span><br><span class="line">  <span class="keyword">while</span>(leftIndex &lt; leftArrLen &amp;&amp; rightIndex &lt; rightArrLen)&#123;</span><br><span class="line">    mergeArr.push(leftArr[leftIndex] &lt; rightArr[rightIndex] ? leftArr[leftIndex++] : rightArr[rightIndex++])</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(leftIndex &lt; leftArrLen) mergeArr.push(leftArr[leftIndex++])</span><br><span class="line">  <span class="keyword">while</span>(rightIndex &lt; rightArrLen) mergeArr.push(rightArr[rightIndex++])</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> mergeArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CountingSort"><a href="#CountingSort" class="headerlink" title="CountingSort"></a>CountingSort</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countingSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> bucket = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!bucket[val]) bucket[val] = <span class="number">0</span>;</span><br><span class="line">    bucket[val]++;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> bucket) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket[key]; i++) &#123;</span><br><span class="line">      arr[index] = <span class="built_in">parseInt</span>(key);</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="HeapSort"><a href="#HeapSort" class="headerlink" title="HeapSort"></a>HeapSort</h4><h5 id="Maximum-Heap"><a href="#Maximum-Heap" class="headerlink" title="Maximum Heap"></a>Maximum Heap</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  buildHeap(arr)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    swap(arr, <span class="number">0</span>, i)</span><br><span class="line">    heapify(arr, i, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buildHeap = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length,</span><br><span class="line">      last_node = len-<span class="number">1</span>,</span><br><span class="line">      buildIndex = <span class="built_in">Math</span>.floor((last_node - <span class="number">1</span>) / <span class="number">2</span>) </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = buildIndex; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    heapify(arr, len, i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapify = <span class="function">(<span class="params">arr, len, parent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> left = parent * <span class="number">2</span> + <span class="number">1</span>,</span><br><span class="line">      right = parent * <span class="number">2</span> + <span class="number">2</span>,</span><br><span class="line">      maxPos = parent</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(left &lt; len &amp;&amp; arr[left] &gt; arr[maxPos]) maxPos = left</span><br><span class="line">  <span class="keyword">while</span>(right &lt; len &amp;&amp; arr[right] &gt; arr[maxPos]) maxPos = right</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(maxPos !== parent)&#123;</span><br><span class="line">    swap(arr, parent, maxPos)</span><br><span class="line">    heapify(arr, len, maxPos)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Minimum-Heap"><a href="#Minimum-Heap" class="headerlink" title="Minimum Heap"></a>Minimum Heap</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heapify = <span class="function">(<span class="params">arr, len, parent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> left = parent * <span class="number">2</span> + <span class="number">1</span>,</span><br><span class="line">      right = parent * <span class="number">2</span> + <span class="number">2</span>,</span><br><span class="line">      minPos = parent</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(left &lt; len &amp;&amp; arr[left] &lt; arr[minPos]) maxPos = left</span><br><span class="line">  <span class="keyword">while</span>(right &lt; len &amp;&amp; arr[right] &lt; arr[minPos]) maxPos = right</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(maxPos !== parent)&#123;</span><br><span class="line">    swap(arr, parent, minPos)</span><br><span class="line">    heapify(arr, len, minPos)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="bucketSort"><a href="#bucketSort" class="headerlink" title="bucketSort"></a>bucketSort</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bucketSort = <span class="function">(<span class="params">arr, bucketSize</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">let</span> minValue = <span class="built_in">Math</span>.min(...arr),</span><br><span class="line">      maxValue = <span class="built_in">Math</span>.max(...arr)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Initialize the bucket</span></span><br><span class="line">  bucketSize = bucketSize || <span class="number">5</span></span><br><span class="line">  <span class="keyword">let</span> bucketCount = <span class="built_in">Math</span>.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span>,</span><br><span class="line">      buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(bucketCount)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Note here must be a new array and cannot refer to the same array address.</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) bucket[i] = []</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// putting the number to corresponding scope.</span></span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> buckets[<span class="built_in">Math</span>.floor((i - minValue) / bucketSize)].push(i))</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// reset the arr</span></span><br><span class="line">  arr.length = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buckets.length; i++)&#123;</span><br><span class="line">    insertSort(buckets[i])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; buckets[i]; j++)&#123;</span><br><span class="line">      arr.push(buckets[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://blog.csdn.net/weixin_40596016/article/details/79711682">十大排序算法详解</a></p>
<p><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">十大经典排序算法</a></p>
<p><a href="https://www.bilibili.com/video/BV1Eb41147dK?from=search&amp;seid=16277008371724387204">HeapSort Video</a></p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>EventLoop</title>
    <url>/posts/df38ec5a/</url>
    <content><![CDATA[<h1 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h1><p><strong>The JS monitor process determines the order in which different event are executed. This is the Event Loop</strong></p>
<h2 id="Basic-knowledge-of-JS"><a href="#Basic-knowledge-of-JS" class="headerlink" title="Basic knowledge of JS"></a>Basic knowledge of JS</h2><ul>
<li><p>JS is a sigle line scripting language. So it avoids the paradoxical problem of working with the same DOM at the same time.</p>
</li>
<li><p>The monitor process will constantly check if the main thread execution stack is empty. and if it is, it will go to the Event Queue to check if there are any functions waiting to be called.</p>
</li>
<li><p>All synchronized tasked are executed on the main thread, forming an execution stack.</p>
</li>
<li><p>Synchronous</p>
<p>Tasks queued for execution on the main thread which must wait the previous task to complete.</p>
</li>
<li><p>Asynchronous</p>
<p>Tasks enter the task queue but don’t enter the main thread cannot enter the main thread until the task queue notifies the main thread that an asynchronous task is ready.</p>
<ul>
<li>setTimeout</li>
<li>setInterval</li>
<li>ajax</li>
<li>promise</li>
<li>I/O</li>
</ul>
</li>
<li><p>Micro Task</p>
<ul>
<li>promise.then</li>
<li>promise.nextTick (node)</li>
</ul>
</li>
<li>Macro Task<ul>
<li>The overall script</li>
<li>setTimeout</li>
<li>setInterval</li>
</ul>
</li>
</ul>
<h2 id="Event-Loop-1"><a href="#Event-Loop-1" class="headerlink" title="Event Loop"></a>Event Loop</h2><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/EventLoop1.png" alt="EventLoop"></p>
<ol>
<li>With the overall scripty as the first macro task starting, splite the all task into two parts. Synchronous tasks and asynchronous tasks.</li>
<li>Synchronous tasks will be executed enter the main thread right now.</li>
<li>Asynchronous tasks will splite into micro and macro tasks.</li>
<li>Macro and micro tasks will enter the different Event Table, and moves the registered callback function for the specified event to different event queue.</li>
<li>When the main thread is idle, it will executed the callback functions in the Event Queue of microtask and the macro task in order.</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> event1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">    resolve(<span class="number">5</span>);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 4 10 5 6 7 2 3 9 8</span></span><br><span class="line">event1()</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Micro</th>
<th style="text-align:center">Macro</th>
<th style="text-align:center">Output</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">2,9</td>
<td style="text-align:center">1,4,10</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">2,9,8</td>
<td style="text-align:center">1,4,10,5,6,7</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">9,8</td>
<td style="text-align:center">1,4,10,5,6,7,2</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1,4,10,5,6,7,2,3,9</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">1,4,10,5,6,7,2,3,9,8</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> event2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">    resolve(<span class="number">5</span>);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 4 7 5 2 3 6</span></span><br><span class="line">event2()</span><br></pre></td></tr></table></figure>
<h3 id="Case-3"><a href="#Case-3" class="headerlink" title="Case 3"></a>Case 3</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> event3 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  async1();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">reslove</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    reslove();</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return of await as a then()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">await async2();</span></span><br><span class="line"><span class="comment">console.log(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">is same as</span></span><br><span class="line"><span class="comment">new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">      console.log(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">      resolve(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">    &#125;).then((res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">      console.log(res);</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 4 1 3 6 8 2 7 5</span></span><br><span class="line">event3()</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.jianshu.com/p/e06e86ef2595">js运行机制详解（Event Loop）</a></p>
]]></content>
  </entry>
  <entry>
    <title>Emoji</title>
    <url>/posts/778ad936/</url>
    <content><![CDATA[<h1 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h1><p><strong>Emoji is a visual symbol used in wireless communication in Japan. Image refers to pictures, while text refers to characters, which can be used to represent a variety of expression, such as smiley faces representing laughter and cakes representing food.</strong></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://emojixd.com/">EmojiXD</a></p>
<p><a href="http://emojihomepage.com/">Emoji Homepage</a></p>
<p><a href="https://blog.csdn.net/lw250397846/article/details/112651038">github 提交消息的emoji表情符号规范</a></p>
]]></content>
      <tags>
        <tag>Emoji</tag>
      </tags>
  </entry>
  <entry>
    <title>Docsify</title>
    <url>/posts/2eeac462/</url>
    <content><![CDATA[<h1 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a>Docsify</h1><p><strong>Docsify generates your documentation website on the fly. Unlike GitBook, it does not generate static html files. Instead, it smartly loads and parses your Markdown files and displays them as a website. To start using it, all you need to do is create an index.html and deploy it on GitHub Pages.</strong></p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure>
<h2 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docsify init</span><br></pre></td></tr></table></figure>
<ul>
<li><code>index.html</code> as the entry file.</li>
<li><code>Readme.md</code> as the home page.</li>
<li><code>.nojekyll</code> prevents the GitHub Page from ignoring files that begin with an underscore.</li>
</ul>
<p>A basic configuration</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>神奇的docsify<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置浏览器图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Description&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认主题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/themes/vue.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义加载时候的动作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.$docsify = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 项目名称</span></span></span><br><span class="line"><span class="javascript">            name: <span class="string">&#x27;docsify-demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 仓库地址，点击右上角的Github章鱼猫头像会跳转到此地址</span></span></span><br><span class="line"><span class="javascript">            repo: <span class="string">&#x27;https://github.com/zjcscut/docsify-demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 侧边栏支持，默认加载的是项目根目录下的_sidebar.md文件</span></span></span><br><span class="line"><span class="javascript">            loadSidebar: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 导航栏支持，默认加载的是项目根目录下的_navbar.md文件</span></span></span><br><span class="line"><span class="javascript">            loadNavbar: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 封面支持，默认加载的是项目根目录下的_coverpage.md文件</span></span></span><br><span class="line"><span class="javascript">            coverpage: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 最大支持渲染的标题层级</span></span></span><br><span class="line">            maxLevel: 4,</span><br><span class="line"><span class="javascript">            <span class="comment">// 自定义侧边栏后默认不会再生成目录，设置生成目录的最大层级，建议配置为1或者2</span></span></span><br><span class="line">            subMaxLevel: 2</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 搜索配置</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.$docsify = &#123;</span></span><br><span class="line">            search: &#123;</span><br><span class="line">                maxAge: 86400000,</span><br><span class="line">                paths: auto,</span><br><span class="line"><span class="javascript">                placeholder: <span class="string">&#x27;搜索&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                noData: <span class="string">&#x27;找不到结果&#x27;</span>,</span></span><br><span class="line">                depth: 4,</span><br><span class="line"><span class="javascript">                hideOtherSidebarContent: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                namespace: <span class="string">&#x27;docsify-demo&#x27;</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- docsify的js依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- emoji表情支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/emoji.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片放大缩小支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/zoom-image.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索功能支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Component</th>
<th style="text-align:center">File</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Sidebar</td>
<td style="text-align:center">_sidebar.md</td>
</tr>
<tr>
<td style="text-align:center">Navicat</td>
<td style="text-align:center">_navbar.md</td>
</tr>
<tr>
<td style="text-align:center">Cover</td>
<td style="text-align:center">_coverpage.md</td>
</tr>
</tbody>
</table>
</div>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://docsify.js.org/">Official</a></p>
<p><a href="https://www.cnblogs.com/throwable/p/13605289.html">使用开源文档工具docsify，用写博客的姿势写文档</a></p>
]]></content>
      <tags>
        <tag>Docsify</tag>
      </tags>
  </entry>
  <entry>
    <title>Event Flow in HTML</title>
    <url>/posts/7c75da10/</url>
    <content><![CDATA[<h1 id="Event-Flow-in-HTML"><a href="#Event-Flow-in-HTML" class="headerlink" title="Event Flow in HTML"></a>Event Flow in HTML</h1><p><strong>An event is a specific moment of interaction that occurs in a document or brower window and act as a bridge between JavaScript and DOM. Event Flow describes the order in which events are received from the page.</strong></p>
<h2 id="W3C-Event-Flow"><a href="#W3C-Event-Flow" class="headerlink" title="W3C Event Flow"></a>W3C Event Flow</h2><p><strong>The W3C specifies that the DOM event flow has three phases.</strong></p>
<ol>
<li>The event capture phase.</li>
<li>The in-target phase.</li>
<li>The event bubbling phase.</li>
</ol>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Event-Flow1.png" alt=""></p>
<h2 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h2><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">target.addEventListener(type, listener [, options]);</span><br><span class="line">target.addEventListener(type, listener [, useCapture]);</span><br></pre></td></tr></table></figure>
<h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><ul>
<li><p><strong>type</strong> (String)</p>
<p>A case-sensitive string representing the <a href="https://developer.mozilla.org/en-US/docs/Web/Events">event type</a> to listen for.</p>
</li>
<li><p><strong>listener</strong> (Object, Function)</p>
<p>An object that implements the EventListener interface, or a JavaScript function.</p>
</li>
<li><p><strong>useCapture</strong> (Boolean)</p>
<p>The default value is false. If the value is false, the listener is executed during the bubbling phase. if true during the capture phase.</p>
</li>
</ul>
<h2 id="Events-Executed-Order"><a href="#Events-Executed-Order" class="headerlink" title="Events  Executed Order"></a>Events  Executed Order</h2><p><strong>Capture stars at the outermost layer and bubbling from the response layer. But in the in-target phase, the order is determined by the code.</strong></p>
<div
  id="event_flow_page"
  style="
    background-color: red;
    width: 150px;
    height: 150px;
    display: flex;
    align-items: center;
    justify-content: space-around;
    left: 0;
    right: 0;
    margin: 0 auto;
  "
>
  <div
    id="event_flow_content"
    style="
      background-color: blue;
      width: 75px;
      height: 75px;
      display: flex;
      align-items: center;
      justify-content: space-around;
    "
  >
    <button id="event_flow_buttom" style="background-color: white; color: black">
      execute
    </button>
  </div>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Event execution sequence is caputer -&gt; aims -&gt; bubble</span></span><br><span class="line"><span class="comment">// But the execution order in the aims is determined by the code order</span></span><br><span class="line"><span class="keyword">const</span> eventFlowPrint = <span class="function">(<span class="params">e, name, isCaputer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;isCaputer ? <span class="string">&quot;Caputer&quot;</span> : <span class="string">&quot;bubble&quot;</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// console.log(`$&#123;name&#125;: $&#123;isCaputer ? &quot;Caputer&quot; : &quot;bubble&quot;&#125;`, e.target);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Code Order:</span></span><br><span class="line"><span class="comment">	page:			capture -&gt; bubbling</span></span><br><span class="line"><span class="comment">	content:	bubbling -&gt; capture</span></span><br><span class="line"><span class="comment">	buttom: 	bubbling -&gt; capture</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> bindEventFlow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// page</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_page&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    (e) =&gt; &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;page&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_page&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    (e) =&gt; &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;page&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// content</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_content&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    (e) =&gt; &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;content&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_content&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    (e) =&gt; &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;content&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// buttom</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_buttom&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    (e) =&gt; &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;buttom&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_buttom&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    (e) =&gt; &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;buttom&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Click Page</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">page: Caputer</span><br><span class="line">page: bubble</span><br></pre></td></tr></table></figure>
</li>
<li><p>Click Content</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In the in-target phase, the order is determined by the code.</span></span><br><span class="line">page: Caputer</span><br><span class="line">content: bubble</span><br><span class="line">content: Caputer</span><br><span class="line">page: bubble</span><br></pre></td></tr></table></figure>
</li>
<li><p>Click Buttom</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In the in-target phase, the order is determined by the code.</span></span><br><span class="line">page: Caputer</span><br><span class="line">content: Caputer</span><br><span class="line">buttom: bubble</span><br><span class="line">buttom: Caputer</span><br><span class="line">content: bubble</span><br><span class="line">page: bubble</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Event-Agent"><a href="#Event-Agent" class="headerlink" title="Event Agent"></a>Event Agent</h2><p><strong>Event agent users the event bubbling to manage all events of a certain type by  specifying only one event handler.</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item n<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Bind the event to the tag ‘ul’ to manage the tag ‘li’ event. This reduces memory consumption and efficiency.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/wubh/p/javascript-event-flow.html">JS 事件冒泡和事件捕获</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener">addEventListener MDN</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Events">Event Type</a></p>
]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>The JavaScript &#39;new&#39; keyword</title>
    <url>/posts/de945f16/</url>
    <content><![CDATA[<h1 id="The-JavaScript-‘new’-keyword"><a href="#The-JavaScript-‘new’-keyword" class="headerlink" title="The JavaScript ‘new’ keyword"></a>The JavaScript ‘new’ keyword</h1><p><strong>In JavaScript, the ‘new’ keyword is used to create an instance object of a class (mock class). When an object is instantiated, it inherits the properties and methods of the class.</strong></p>
<h2 id="Execution-Process"><a href="#Execution-Process" class="headerlink" title="Execution Process"></a>Execution Process</h2><ol>
<li>Create a new and empty object.</li>
<li>Set the new object prototype to point to class constructor.</li>
<li>Execute the constructor, binding the ‘this’ keyword.</li>
<li>If the constructor does not return an object, it returns this. </li>
</ol>
<h2 id="Simulate-the-‘new’-keyword"><a href="#Simulate-the-‘new’-keyword" class="headerlink" title="Simulate the ‘new’ keyword"></a>Simulate the ‘new’ keyword</h2><h3 id="use-Object-create-to-simulate-‘new’-keyword"><a href="#use-Object-create-to-simulate-‘new’-keyword" class="headerlink" title="use Object.create to simulate ‘new’ keyword"></a>use Object.create to simulate ‘new’ keyword</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newNew = <span class="function"><span class="keyword">function</span> (<span class="params">Parent, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newObj = <span class="built_in">Object</span>.create(Parent.prototype);</span><br><span class="line">  <span class="keyword">let</span> res = Parent.apply(newObj, args);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> ? res : newObj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object1 = <span class="keyword">new</span> Base();</span><br><span class="line"><span class="keyword">let</span> object2 = newNew(Base);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(object1.__proto__ === object2.__proto__);</span><br></pre></td></tr></table></figure>
<h3 id="No-Object-create-to-simulate-‘new’-keyword"><a href="#No-Object-create-to-simulate-‘new’-keyword" class="headerlink" title="No Object.create to simulate ‘new’ keyword"></a>No Object.create to simulate ‘new’ keyword</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// newNew</span></span><br><span class="line"><span class="keyword">const</span> newNew1 = <span class="function"><span class="keyword">function</span> (<span class="params">Parent, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// let newObject = &#123;&#125;;</span></span><br><span class="line">  <span class="keyword">let</span> newObject = <span class="built_in">Object</span>();</span><br><span class="line">  newObject.__proto__ = Parent.prototype;</span><br><span class="line">  <span class="keyword">let</span> res = Parent.apply(newObject, args);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> ? res : newObject;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object1 = <span class="keyword">new</span> Base();</span><br><span class="line"><span class="keyword">let</span> object2 = newNew(Base);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(object1.__proto__ === object2.__proto__);</span><br></pre></td></tr></table></figure>
<h2 id="‘new’-keyword-and-Object-create"><a href="#‘new’-keyword-and-Object-create" class="headerlink" title="‘new’  keyword and Object.create()"></a>‘new’  keyword and Object.create()</h2><p><strong>Their __proto__ points to different things. The ‘new’ point to the constructor’s prototype object and create point to the Function.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.create &amp; new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  getNum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj = <span class="keyword">new</span> Base();</span><br><span class="line"><span class="keyword">let</span> createObj = <span class="built_in">Object</span>.create(Base);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newObj, createObj);</span><br></pre></td></tr></table></figure>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/JS-new.png" alt=""></p>
<h2 id="Use-‘new’-to-simulate-Object-create"><a href="#Use-‘new’-to-simulate-Object-create" class="headerlink" title="Use ‘new’ to simulate Object.create()"></a>Use ‘new’ to simulate Object.create()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> create1 = <span class="function"><span class="keyword">function</span> (<span class="params">Parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  res.prototype = Parent;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> res();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object3 = <span class="built_in">Object</span>.create(Base);</span><br><span class="line"><span class="keyword">let</span> object4 = create1(Base);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(object3.__proto__ === object4.__proto__);	</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.jianshu.com/p/4bbf0c582e97">JavaScript new 关键字</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">MDN Object.create</a></p>
<p><a href="https://blog.csdn.net/DepressedPrince/article/details/80909636">New 和 Object.create()的区别</a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS Question</title>
    <url>/posts/a511bb1e/</url>
    <content><![CDATA[<h1 id="JavaScript-Question"><a href="#JavaScript-Question" class="headerlink" title="JavaScript Question"></a>JavaScript Question</h1><p><strong>Some interview questions and answers.</strong></p>
<h2 id="QA-1-getName"><a href="#QA-1-getName" class="headerlink" title="QA 1: getName"></a>QA 1: getName</h2><p><strong>Write out the value of each output.</strong></p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// console.log(&quot;this is&quot; + this);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;baidu&quot;</span> &amp;&amp; <span class="string">&quot;google&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2</span></span><br><span class="line">Foo.getName();</span><br><span class="line"><span class="comment">// 4	Both var and function declaration are promoted, andt the function is overwritten before the variable is promted.</span></span><br><span class="line">getName();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">Foo().getName();</span><br><span class="line"><span class="comment">// 1	Foo() return this is window, widown.getName has been rewritten.</span></span><br><span class="line">getName();</span><br><span class="line"><span class="comment">// 2	According the rule, it&#x27;s the same as new (Foo.getName)(), so the answer is 2.	[Foo.getName() --&gt; new]</span></span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="comment">// google	(new Foo()).getName(), the Foo object constructor does not have getName, find it in prototype object.	[Foo.getName --&gt; Foo.prototype.getName]</span></span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="comment">// google	new((new Foo()).getName)()</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol>
<li><p>Operator precedence</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/JS-QA1-1.png" alt=""></p>
</li>
<li><p>For ‘&amp;&amp;’, if the former is true, then execute the latter, otherwish only execute the former. For ‘||’, if the former is true, only execute the former, the latter don’t have to execute, otherwish have to execute the latter.</p>
</li>
</ol>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://blog.smallstars.top/posts/de945f16/">The JavaScript ‘new’ keyword</a></p>
<h2 id="QA-2-Array-Flattening"><a href="#QA-2-Array-Flattening" class="headerlink" title="QA 2: Array Flattening"></a>QA 2: Array Flattening</h2><p><strong>Flat the structure of multiple nested arrays.</strong></p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// This method only expend one layer.</span></span><br><span class="line"><span class="keyword">const</span> flatten1 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [].concat(...arr);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// join and split</span></span><br><span class="line"><span class="comment">// This method will involve implicit conversion, some values will be affected like undefined, null,etc.</span></span><br><span class="line"><span class="keyword">const</span> flatten2 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.join(<span class="string">&quot;,&quot;</span>).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toString and split</span></span><br><span class="line"><span class="comment">// This method will involve implicit conversion, some values will be affected like undefined, null,etc.</span></span><br><span class="line"><span class="keyword">const</span> flatten3 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recursion and reduce</span></span><br><span class="line"><span class="keyword">const</span> flatten4 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// we can filter some unwanted values.</span></span><br><span class="line">    <span class="keyword">if</span> (cur === <span class="literal">undefined</span> || cur === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(cur) ? pre.concat(flatten4(cur)) : pre.concat(cur);</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> flatten5 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// es6 flat method only expand one layer by default</span></span><br><span class="line">  <span class="comment">// return arr.flat()</span></span><br><span class="line">  <span class="keyword">return</span> arr.flat(<span class="literal">Infinity</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="QA-3-Sleep"><a href="#QA-3-Sleep" class="headerlink" title="QA 3: Sleep"></a>QA 3: Sleep</h2><p><strong>Use Promise to encapuslate a Sleep function.</strong></p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(res, delay);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>).then(<span class="built_in">console</span>.log(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<h2 id="QA-4-Time-Interval-Output"><a href="#QA-4-Time-Interval-Output" class="headerlink" title="QA 4: Time Interval Output"></a>QA 4: Time Interval Output</h2><p><strong>Output the values in array at regular interval.</strong></p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> closureFunction = <span class="function">(<span class="params">arr, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    (<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">      &#125;, i * delay);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setTimeoutFunction = <span class="function">(<span class="params">arr, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">    &#125;, i * delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setIntervalFunction = <span class="function">(<span class="params">arr, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">    index === arr.length ? <span class="built_in">clearInterval</span>(timer) : index++;</span><br><span class="line">  &#125;, delay);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="QA-5-Currying"><a href="#QA-5-Currying" class="headerlink" title="QA 5: Currying"></a>QA 5: Currying</h2><p><strong>Currying can convert a multi-argument function to a single-argument function and return a new function which can take the remaining arguments and return a result.</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="QA-6-DeepCopy"><a href="#QA-6-DeepCopy" class="headerlink" title="QA 6: DeepCopy"></a>QA 6: DeepCopy</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Recursion</span></span><br><span class="line"><span class="keyword">const</span> deepCopy = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newObj;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(val)) &#123;</span><br><span class="line">      newObj = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> val) &#123;</span><br><span class="line">        newObj.push(deepCopy(i));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.constructor === <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newObj = &#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> val) &#123;</span><br><span class="line">        newObj[i] = deepCopy(val[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// It isn&#x27;t an object</span></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.assign is shallow copy, but the target is a new Object.</span></span><br><span class="line"><span class="keyword">const</span> deepCopy1 = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This can&#x27;t copy the undefined, function and RegExp etc</span></span><br><span class="line"><span class="comment">// if the value is null, it will report the error.</span></span><br><span class="line"><span class="keyword">const</span> deepCopy2 = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(val));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Debounce And Throttle</title>
    <url>/posts/48951515/</url>
    <content><![CDATA[<h1 id="Debounce-And-Throttle"><a href="#Debounce-And-Throttle" class="headerlink" title="Debounce And Throttle"></a>Debounce And Throttle</h1><p><strong>They are all done the closing package</strong></p>
<ul>
<li><p>Debounce</p>
<p>The same action is triggered consecutively over a period of time, executing only the last triggered action.</p>
</li>
<li><p>Throttle</p>
<p>The same action is triggered consecutively over a period of time, executing the action at each interval.</p>
</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Debounce&amp;Throttle.png" alt="Debounce and Throttle"></p>
<h2 id="Principle-of-implementation"><a href="#Principle-of-implementation" class="headerlink" title="Principle of implementation"></a>Principle of implementation</h2><h3 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn(args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Throttle"><a href="#Throttle" class="headerlink" title="Throttle"></a>Throttle</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// timer</span></span><br><span class="line"><span class="keyword">const</span> throttleTimer = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn(args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timestamp</span></span><br><span class="line"><span class="keyword">const</span> throttleTimestamp = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> curTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">let</span> remainTime = delay - (curTime - startTime);</span><br><span class="line">    <span class="keyword">if</span> (remainTime &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      fn(args);</span><br><span class="line">      startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// time + timestamp</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> curTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">let</span> remainTime = delay - (curTime - startTime);</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="keyword">if</span> (remainTime &gt; <span class="number">0</span>) timer = <span class="built_in">setTimeout</span>(fn, delay);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      fn(...args);</span><br><span class="line">      startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/aurora-ql/p/13757733.html">详解防抖函数（debounce）和节流函数（throttle）</a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>XLRD and XLWT in Python</title>
    <url>/posts/14aa609c/</url>
    <content><![CDATA[<h1 id="‘xlrd’-and-‘xlwt’-in-Python"><a href="#‘xlrd’-and-‘xlwt’-in-Python" class="headerlink" title="‘xlrd’ and ‘xlwt’ in Python"></a>‘xlrd’ and ‘xlwt’ in Python</h1><p><strong>‘<em>xlrd</em>‘ and ‘<em>xlwt</em>‘ are two Python tripartite library for working with Excel files</strong>.</p>
<h2 id="xlrd"><a href="#xlrd" class="headerlink" title="xlrd"></a>xlrd</h2><p>Responsible for reading files.</p>
<ul>
<li><p>Open up the Excel files</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">workbook = xlrd.open_workbook(path)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get all sheets of file</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">workbook.sheet_names()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get the sheet and content</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># Get sheet by index</span></span><br><span class="line">  sheet2 = workbook.sheet_by_index(<span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Get sheet by name</span></span><br><span class="line">  sheet2 = workbook.sheet_by_name(<span class="string">&#x27;sheet2&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Get content</span></span><br><span class="line">  sheet2.name</span><br><span class="line">  sheet2.nrows</span><br><span class="line">sheet2.ncols</span><br><span class="line">  </span><br><span class="line">  sheet2.row_values(index)</span><br><span class="line">  sheet2.col_values(index)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="xlwt"><a href="#xlwt" class="headerlink" title="xlwt"></a>xlwt</h2><p>Responsible for write files.</p>
<h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><ul>
<li><p>Excel xlsx file not supported</p>
<p>Change the version of ‘xlrd’, it has been updated to 2.0.1 and only supports <em>.xls</em> files, not <em>.xlsx</em></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install xlrd==<span class="number">1</span>.<span class="number">2</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>If file path has Chinese, ‘open’ operation needs to be transcoded.</p>
<ol>
<li>The prefix ‘r’ to path indicates the native string.</li>
<li>filename = filename.decode(‘utf-8’)</li>
</ol>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/insane-Mr-Li/p/9092619.html">python里面的xlrd模块详解（一）</a></p>
<p><a href="https://www.cnblogs.com/linyfeng/p/7123423.html">Python中xlrd和xlwt模块使用方法</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Set maximum number of connections in MySQL</title>
    <url>/posts/9d45af52/</url>
    <content><![CDATA[<h1 id="Set-maximum-number-of-connections-in-MySQL"><a href="#Set-maximum-number-of-connections-in-MySQL" class="headerlink" title="Set maximum number of connections in MySQL"></a>Set maximum number of connections in MySQL</h1><p><strong>MySQL sets maximum number of connections during installation, but sometimes we need to modify the value to meet our need.</strong></p>
<h2 id="Temporary-measure"><a href="#Temporary-measure" class="headerlink" title="Temporary measure"></a>Temporary measure</h2><p>Restart the original settings after restarting MySQL.</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Enter <span class="keyword">in</span> the context of MySQL connection</span><br><span class="line"><span class="built_in">set</span> GLOBAL max_connections=max_value;</span><br></pre></td></tr></table></figure>
<h2 id="Permanent-measure"><a href="#Permanent-measure" class="headerlink" title="Permanent measure"></a>Permanent measure</h2><p>Modify the configuration of MySQL.</p>
<ol>
<li><p>Find the ‘<em>my.ini’</em>‘ file in MySQL directory.</p>
</li>
<li><p>Modify the value of ‘<em>max_connections</em>‘.</p>
</li>
<li><p>Restart the MySQL.</p>
</li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.jb51.net/article/157967.htm">mysql最大连接数设置技巧总结</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Steam and SteamChina share the same game file</title>
    <url>/posts/611c382f/</url>
    <content><![CDATA[<h1 id="Steam-and-SteamChina-share-the-same-game-file"><a href="#Steam-and-SteamChina-share-the-same-game-file" class="headerlink" title="Steam and SteamChina share the same game file"></a>Steam and SteamChina share the same game file</h1><p><strong>Recently, SteamChina was launched in China. I download it and want to play the CSGO in the China server. But it reminded me download the game file, I found them don’t use the same file. Here is the solution to the problem.</strong></p>
<ol>
<li><p>Find the absolute paths about Steam and SteamChina</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">Steam: 			<span class="title">E</span>:\<span class="title">Install</span>\<span class="title">Steam</span>\<span class="title">steamapps</span></span></span><br><span class="line"><span class="function"><span class="title">SteamChina</span>:	<span class="title">E</span>:\<span class="title">Install</span>\<span class="title">SteamChina</span>\<span class="title">steamapps</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Delete or rename the folder steamapps in the SteamChina</p>
</li>
<li><p>Open the CMD</p>
</li>
<li><p>Create the file link</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mklink /d &quot;E:\Install\SteamChina\steamapps&quot; &quot;E:\Install\Steam\steamapps&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Reload the SteamChina</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>UnblockNeteaseMusic</title>
    <url>/posts/306a286d/</url>
    <content><![CDATA[<h1 id="UnblockNeteaseMusic"><a href="#UnblockNeteaseMusic" class="headerlink" title="UnblockNeteaseMusic"></a>UnblockNeteaseMusic</h1><p><strong>Unlock netease Cloud Music client greying songs.</strong></p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&#x2F;ITJesse&#x2F;UnblockNeteaseMusic.git</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Abbreviation</th>
<th style="text-align:center">Command</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-v</td>
<td style="text-align:center">—version</td>
<td style="text-align:center">output the version number</td>
</tr>
<tr>
<td style="text-align:center">-p port</td>
<td style="text-align:center">—port port</td>
<td style="text-align:center">specify server port</td>
</tr>
<tr>
<td style="text-align:center">-a address</td>
<td style="text-align:center">—address address</td>
<td style="text-align:center">specify server host</td>
</tr>
<tr>
<td style="text-align:center">-u url</td>
<td style="text-align:center">—proxy-url url</td>
<td style="text-align:center">request through upstream proxy</td>
</tr>
<tr>
<td style="text-align:center">-f host</td>
<td style="text-align:center">—force-host host</td>
<td style="text-align:center">force the netease server ip</td>
</tr>
<tr>
<td style="text-align:center">-o source [source …]</td>
<td style="text-align:center">—match-order</td>
<td style="text-align:center">source [source …]</td>
</tr>
<tr>
<td style="text-align:center">-t token</td>
<td style="text-align:center">—token token</td>
<td style="text-align:center">set up proxy authentication</td>
</tr>
<tr>
<td style="text-align:center">-e url</td>
<td style="text-align:center">—endpoint url</td>
<td style="text-align:center">replace virtual endpoint with public host</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td style="text-align:center">—strict</td>
<td style="text-align:center">enable proxy limitation</td>
</tr>
<tr>
<td style="text-align:center">-h</td>
<td style="text-align:center">—help</td>
<td style="text-align:center">output usage information</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node app -p port</span><br></pre></td></tr></table></figure>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ul>
<li><p>PC</p>
<ol>
<li>Open the PC version of netease cloud, click the Settings button on the right of avatar, and navigate to the Tools section.</li>
<li>Select the custom proxy, the HTTP proxy.</li>
<li>Input the proxy service and port.</li>
<li>Test success can be used.</li>
</ol>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/UnblockNeteaseMusic-PC.png" alt="PC"></p>
</li>
<li><p>Mobile &amp; Tablet</p>
<ul>
<li><p>Built-in network agent: New environment needs to be reconfigured, but no third-party agent software is required</p>
<ol>
<li><p>WIFI</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/UnblockNeteaseMusic-Mobile&amp;Tablet1.png" alt=""></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/UnblockNeteaseMusic-Mobile&amp;Tablet2.png" alt=""></p>
</li>
<li><p>Mobile Network</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/UnblockNeteaseMusic-Mobile&amp;Tablet3.png" alt=""></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/UnblockNeteaseMusic-Mobile&amp;Tablet4.png" alt=""></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/UnblockNeteaseMusic-Mobile&amp;Tablet5.png" alt=""></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/UnblockNeteaseMusic-Mobile&amp;Tablet6.png" alt=""></p>
</li>
</ol>
</li>
<li><p>Third-party agent software: Recommend Clash, Shadowrocket, Kitsunebi</p>
</li>
</ul>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/nondanee/UnblockNeteaseMusic">Github</a></p>
]]></content>
      <tags>
        <tag>Welfare</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Switch-Case</title>
    <url>/posts/6bd0bccb/</url>
    <content><![CDATA[<h1 id="Python’s-Switch-Case"><a href="#Python’s-Switch-Case" class="headerlink" title="Python’s Switch/Case"></a>Python’s Switch/Case</h1><p><strong>It doesn’t have switch or case statement which unlike other programming language. There are a few ways to simulate the effect. Here is <a href="https://docs.python.org/2/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python">official answer</a>.</strong></p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">switch</span>(<span class="params">switcher, case, default=<span class="literal">None</span></span>):</span></span><br><span class="line">    c = switcher.get(case, default)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(c)) == <span class="string">&quot;&lt;class &#x27;function&#x27;&gt;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> c()</span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;zero&#x27;</span></span><br><span class="line"></span><br><span class="line">switcher = &#123;</span><br><span class="line">  <span class="number">0</span>: func1,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;one&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="keyword">lambda</span>: <span class="string">&quot;two&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">switch(switcher, type_name)</span><br></pre></td></tr></table></figure>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Switcher</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numbers_to_methods_to_strings</span>(<span class="params">self, argument</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Dispatch method&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># prefix the method_name with &#x27;number_&#x27; because method names</span></span><br><span class="line">        <span class="comment"># cannot begin with an integer.</span></span><br><span class="line">        method_name = <span class="string">&#x27;number_&#x27;</span> + <span class="built_in">str</span>(argument)</span><br><span class="line">        <span class="comment"># Get the method from &#x27;self&#x27;. Default to a lambda.</span></span><br><span class="line">        method = <span class="built_in">getattr</span>(self, method_name, <span class="keyword">lambda</span>: <span class="string">&quot;nothing&quot;</span>)</span><br><span class="line">        <span class="comment"># Call the method as we return it</span></span><br><span class="line">        <span class="keyword">return</span> method()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number_0</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zero&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number_1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">number_2</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.pydanny.com/why-doesnt-python-have-switch-case.html">Why Doesn’t Python Have Switch/Case?</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Super Large Text Processing (Python)</title>
    <url>/posts/e7e5b971/</url>
    <content><![CDATA[<h1 id="Super-Large-Text-Processing-Python"><a href="#Super-Large-Text-Processing-Python" class="headerlink" title="Super Large Text Processing (Python)"></a>Super Large Text Processing (Python)</h1><p><strong>Recently, I got a huge data source about QQ binding mobile phone number. The txt file is an eighteen GB TXT file, and I processed the data and wrote them to database. There are mainly following parts.</strong></p>
<h2 id="Split-File"><a href="#Split-File" class="headerlink" title="Split File"></a>Split File</h2><p>I split the whole file into a thousand parts. (According to the last four digits of QQ, split_size = 1000)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Split the entire file into equal parts and returns a list of the positions of starting and ending byte of each segment.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_offsets</span>(<span class="params">thread_size, file_path</span>):</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    list_start_piece_offset = <span class="built_in">list</span>()</span><br><span class="line">    <span class="comment"># Append start offset</span></span><br><span class="line">    list_start_piece_offset.append(<span class="number">0</span>)</span><br><span class="line">    file_size = os.path.getsize(file_path)</span><br><span class="line">    <span class="comment"># Each thread corresponds to a portion of the file.</span></span><br><span class="line">    piece_size = <span class="built_in">int</span>(file_size / thread_size)</span><br><span class="line">    <span class="comment"># print(&quot;piece_size: &#123;&#125;&quot;.format(piece_size))</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> piece_number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, thread_size):</span><br><span class="line">            f.seek(piece_number * piece_size)</span><br><span class="line">            <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">27</span>):</span><br><span class="line">                <span class="keyword">if</span> f.read(<span class="number">1</span>) == <span class="string">b&#x27;\n&#x27;</span>:</span><br><span class="line">                    list_start_piece_offset.append(f.tell())</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Append end offset</span></span><br><span class="line">    list_start_piece_offset.append(file_size)</span><br><span class="line">    <span class="keyword">return</span> list_start_piece_offset</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Here can use thread, but I didn&#x27;t.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_big_file</span>(<span class="params">size, path</span>):</span></span><br><span class="line">    offsets_list = find_offsets(size, path)</span><br><span class="line">    <span class="comment"># Initialize the list.</span></span><br><span class="line">    all_piece = [<span class="string">&#x27;&#x27;</span>] * size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(qq_data_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> big_file:</span><br><span class="line">      	<span class="comment"># Read the file in fractions, where can use multithreading.</span></span><br><span class="line">      	<span class="comment"># size === len(offsets_list-1): [start, ***, end]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">          	<span class="comment"># Each time after reading part of file, before reading next file, must claer the last result.</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                all_piece[j] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125;: offset(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(i, offsets_list[i]))</span><br><span class="line">            <span class="comment"># read() reads the specified number of bytes from a file, or all if not given or negative.</span></span><br><span class="line">            str_piece = big_file.read(offsets_list[i + <span class="number">1</span>] - offsets_list[i])</span><br><span class="line">            list_piece = str_piece.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Filter the error data (6 &lt;= qq_len &lt;= 10, phone_len === 11 ,2021 year)</span></span><br><span class="line">            <span class="comment"># Sample Format: qq----phone</span></span><br><span class="line">            <span class="keyword">for</span> tmp <span class="keyword">in</span> list_piece:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(tmp) &gt; <span class="number">25</span>:</span><br><span class="line">                    print(<span class="string">&#x27;error line 1：&#x27;</span> + <span class="built_in">str</span>(tmp))</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                items = tmp.split(<span class="string">&quot;----&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(items[<span class="number">0</span>]) &lt; <span class="number">5</span> <span class="keyword">or</span> <span class="built_in">len</span>(items) &lt; <span class="number">2</span>:</span><br><span class="line">                    print(<span class="string">&#x27;error line 2：&#x27;</span> + <span class="built_in">str</span>(tmp))</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                  	<span class="comment"># Classify data according to the remainder.</span></span><br><span class="line">                    m = <span class="built_in">int</span>(<span class="built_in">int</span>(items[<span class="number">0</span>]) % size)</span><br><span class="line">                    all_piece[m] += tmp + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">                <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">                    print(<span class="string">&#x27;error line 3：&#x27;</span> + <span class="built_in">str</span>(tmp))</span><br><span class="line">            print(<span class="string">&#x27;list_piece split finish&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Writing the data into the corresponding file.</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;&#123;&#125;/&#123;&#125;.txt&#x27;</span>.<span class="built_in">format</span>(qq_piece_path, j), <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> small_file:</span><br><span class="line">                    print(<span class="string">&#x27;&#123;&#125;: writing&#x27;</span>.<span class="built_in">format</span>(j))</span><br><span class="line">                    small_file.write(all_piece[j])</span><br><span class="line">                    small_file.close()</span><br><span class="line"></span><br><span class="line">        big_file.close()</span><br></pre></td></tr></table></figure>
<h2 id="Create-Tables-in-Database"><a href="#Create-Tables-in-Database" class="headerlink" title="Create Tables in Database"></a>Create Tables in Database</h2><p>Create the a thousand tables in database. (Multiplethreading)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table_thread</span>(<span class="params">start_table, end_table</span>):</span></span><br><span class="line">    db = sql_init()</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_table, end_table):</span><br><span class="line">        sql = <span class="string">&#x27;create table qq_&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27; (qq varchar(12), phone varchar(11));&#x27;</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="comment"># Reduce the number of commit times and increase speed.</span></span><br><span class="line">        <span class="keyword">if</span> counter &gt;= <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                print(<span class="string">&#x27;&#123;&#125; Thread Commit&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">                db.rollback()</span><br><span class="line"></span><br><span class="line">    db.commit()</span><br><span class="line">    print(<span class="string">&#x27;Created &#123;&#125; to &#123;&#125; table&#x27;</span>.<span class="built_in">format</span>(start_table, end_table))</span><br><span class="line">    cursor.close()</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span>(<span class="params">thread_size</span>):</span></span><br><span class="line">    gap = <span class="built_in">int</span>(split_size / thread_size)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, thread_size):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            threading.Thread(target=create_table_thread, args=(i * gap, (i + <span class="number">1</span>) * gap)).start()</span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;Error: &#123;&#125; &quot;</span> + <span class="built_in">str</span>(e))</span><br></pre></td></tr></table></figure>
<h2 id="Insert-Data-into-Database"><a href="#Insert-Data-into-Database" class="headerlink" title="Insert Data into Database"></a>Insert Data into Database</h2><p>Insert data into corresponding tables of database.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># open corresponding file</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_piece_file</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;&#123;&#125;/&#123;&#125;.txt&#x27;</span>.<span class="built_in">format</span>(qq_piece_path, num), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">yield</span> <span class="built_in">str</span>(item, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_thread</span>(<span class="params">start_piece, end_piece</span>):</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    thread_start_time = <span class="built_in">int</span>(time.time())</span><br><span class="line">    print(<span class="string">&#x27;Start Time(&#123;&#125; - &#123;&#125;): &#x27;</span>.<span class="built_in">format</span>(start_piece, end_piece), thread_start_time)</span><br><span class="line">    <span class="comment"># Initialize the connection of database</span></span><br><span class="line">    db = sql_init()</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_piece, end_piece):</span><br><span class="line">        piece_start_time = <span class="built_in">int</span>(time.time())</span><br><span class="line">        commit = <span class="number">0</span></span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        items = open_piece_file(i)</span><br><span class="line">        sql = <span class="string">&quot;insert into qq_&#123;&#125; (qq, phone) values&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            item = item.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            [qq, phone] = item.split(<span class="string">&#x27;----&#x27;</span>)</span><br><span class="line">            <span class="comment"># Multiple data insert of SQL, increase speed.</span></span><br><span class="line">            sql += <span class="string">&quot; (&#123;&#125;, &#123;&#125;),&quot;</span>.<span class="built_in">format</span>(qq, phone)</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">            <span class="comment"># Insert counter_limit of data at a time</span></span><br><span class="line">            <span class="keyword">if</span> counter &gt;= counter_limit:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    cursor.execute(sql)</span><br><span class="line">                <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">                    print(<span class="string">&#x27;execute error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(e))</span><br><span class="line">                    db.rollback()</span><br><span class="line">                piece_end_time = <span class="built_in">int</span>(time.time())</span><br><span class="line">                <span class="comment"># piece_time_limit executes a commit.</span></span><br><span class="line">                <span class="keyword">if</span> piece_end_time - piece_start_time &gt;= piece_time_limit:</span><br><span class="line">                    print(<span class="string">&#x27;&#123;&#125; piece &#123;&#125; commit: &#123;&#125; items&#x27;</span>.<span class="built_in">format</span>(i, commit, counter))</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        db.commit()</span><br><span class="line">                    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">                        print(<span class="string">&#x27;commit error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(e))</span><br><span class="line">                    commit += <span class="number">1</span></span><br><span class="line">                    counter = <span class="number">0</span></span><br><span class="line">                    piece_start_time = <span class="built_in">int</span>(time.time())</span><br><span class="line">		<span class="comment"># Commit the rest of SQL</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;commit error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(e))</span><br><span class="line">    cursor.close()</span><br><span class="line">    db.close()</span><br><span class="line">    thread_elapsed_time = thread_start_time - <span class="built_in">int</span>(time.time())</span><br><span class="line">    print(<span class="string">&#x27;Elapsed Time(&#123;&#125; - &#123;&#125;): &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(start_piece, end_piece, thread_elapsed_time))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_data</span>(<span class="params">thread_size</span>):</span></span><br><span class="line">    gap = <span class="built_in">int</span>(split_size / thread_size)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, thread_size):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            threading.Thread(target=insert_thread, args=(i*gap, (i+<span class="number">1</span>)*gap)).start()</span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;Error: &#123;&#125; &quot;</span> + <span class="built_in">str</span>(e))</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/SmaIIstars/InformationQuery">Github Project</a></p>
<p><a href="https://myelf.club/index.php/archives/283/">超大 TXT 文本读取记录</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Location and History in JS</title>
    <url>/posts/c01132fd/</url>
    <content><![CDATA[<h1 id="Location-and-History-in-JavaScript"><a href="#Location-and-History-in-JavaScript" class="headerlink" title="Location and History in JavaScript"></a>Location and History in JavaScript</h1><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://segmentfault.com/a/1190000009384087">JS中最容易被轻视的对象——location和history</a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ImmutableJS</title>
    <url>/posts/54620a1a/</url>
    <content><![CDATA[<h1 id="ImmutableJS"><a href="#ImmutableJS" class="headerlink" title="ImmutableJS"></a>ImmutableJS</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add immutable-js</span><br><span class="line">npm install immutable-js</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/immutable-js/immutable-js">GitHub</a></p>
<p><a href="https://www.jianshu.com/p/0fa8c7456c15">Immutable.js 了解一下？</a></p>
<p><a href="https://blog.csdn.net/wlchn/article/details/78206331">ImmutableJS Map</a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>ImmutableJS</tag>
      </tags>
  </entry>
  <entry>
    <title>CryptoJS</title>
    <url>/posts/331a7bb4/</url>
    <content><![CDATA[<h1 id="CryptoJS"><a href="#CryptoJS" class="headerlink" title="CryptoJS"></a>CryptoJS</h1><p><strong>It is a powerful encryption library in JavaScript</strong></p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add crypto-js</span><br><span class="line">npm install crypto-js</span><br></pre></td></tr></table></figure>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Return a object (WordArray)</span></span><br><span class="line">CryptoJS.MD5(<span class="string">&quot;smallstars&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return string (default Hex)</span></span><br><span class="line">CryptoJS.MD5(<span class="string">&quot;smallstars&quot;</span>).toString(CryptoJS.enc.Hex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the object before conversion</span></span><br><span class="line">CryptoJS.enc.Hex.parse(CryptoJS.MD5(<span class="string">&quot;smallstars&quot;</span>).toString(CryptoJS.enc.Hex));</span><br></pre></td></tr></table></figure>
<h2 id="Simple-Sample"><a href="#Simple-Sample" class="headerlink" title="Simple Sample"></a>Simple Sample</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoJS <span class="keyword">from</span> <span class="string">&quot;crypto-js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The hexadecimal characters of sixteen length as the key</span></span><br><span class="line"><span class="keyword">const</span> key = CryptoJS.enc.Utf8.parse(<span class="string">&quot;1234123412ABCDEF&quot;</span>);</span><br><span class="line"><span class="comment">// The hexadecimal characters of sixteen length as the offset of key</span></span><br><span class="line"><span class="keyword">const</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">&quot;ABCDEF1234123412&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// encrypt</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> srcs = CryptoJS.enc.Utf8.parse(message);</span><br><span class="line">  <span class="keyword">let</span> encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">    iv: iv,</span><br><span class="line">    mode: CryptoJS.mode.CBC,</span><br><span class="line">    padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> encrypted.ciphertext.toString().toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// decrypt</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> encryptedHexStr = CryptoJS.enc.Hex.parse(message);</span><br><span class="line">  <span class="keyword">let</span> srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr);</span><br><span class="line">  <span class="keyword">let</span> decrypt = CryptoJS.AES.decrypt(srcs, key, &#123;</span><br><span class="line">    iv: iv,</span><br><span class="line">    mode: CryptoJS.mode.CBC,</span><br><span class="line">    padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);</span><br><span class="line">  <span class="keyword">return</span> decryptedStr.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="http://cryptojs.altervista.org/">Official Website</a></p>
]]></content>
      <tags>
        <tag>Encryption</tag>
      </tags>
  </entry>
  <entry>
    <title>Four body format for POST (form-data, x-www-form-urlencoded, raw, binary)</title>
    <url>/posts/9cc151b5/</url>
    <content><![CDATA[<h1 id="Four-body-format-for-POST"><a href="#Four-body-format-for-POST" class="headerlink" title="Four body format for POST"></a>Four body format for POST</h1><h2 id="format-data"><a href="#format-data" class="headerlink" title="format-data"></a>format-data</h2><p><em>multipart/form-data</em>, it can upload multiple key-values and files. </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/POSTBody-form-data.png" alt="multipart/form-data"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios simple sample</span></span><br><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;username&quot;</span>);</span><br><span class="line">formData.append(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">  url: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  data: formData,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="x-www-form-urlencoded"><a href="#x-www-form-urlencoded" class="headerlink" title="x-www-form-urlencoded"></a>x-www-form-urlencoded</h2><p><em>application/x-www-from-urlencoded</em>, it converts data to key-values and cannot upload files.</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/POSTBody-x-www-form-urlencoded.png" alt="application/x-www-from-urlencoded"></p>
<h2 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h2><p>It can upload text in any format. We always upload JSON data in this way.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">content-type</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">text/plain</td>
<td style="text-align:center">Text</td>
</tr>
<tr>
<td style="text-align:center">application/javascript</td>
<td style="text-align:center">JavaScript</td>
</tr>
<tr>
<td style="text-align:center">application/json</td>
<td style="text-align:center">JSON</td>
</tr>
<tr>
<td style="text-align:center">text/html</td>
<td style="text-align:center">HTML</td>
</tr>
<tr>
<td style="text-align:center">application/xml</td>
<td style="text-align:center">XML</td>
</tr>
</tbody>
</table>
</div>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/POSTBody-raw.png" alt="raw"></p>
<h2 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h2><p><em>application/octet-stream</em>, only binary data can be upload, usually used to upload files. Because it is not key-value format, only one data can be passed at once.</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/POSTBody-binary.png" alt="binary"></p>
]]></content>
      <tags>
        <tag>POST</tag>
      </tags>
  </entry>
  <entry>
    <title>Clash</title>
    <url>/posts/a6efff77/</url>
    <content><![CDATA[<h1 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h1><p><strong>A software that can use SSR and V2ray simultaneously.</strong></p>
<h2 id="Adding-remote-configuration"><a href="#Adding-remote-configuration" class="headerlink" title="Adding remote configuration"></a>Adding remote configuration</h2><ol>
<li><p>If website provides the Clash, use it.</p>
</li>
<li><p>If not, get the link of <strong><em>SSR</em></strong> / <strong><em>v2ray</em></strong>, use the api (<a href="https://api.10101.io/sub?target=clash&amp;url=URLLink">https://api.10101.io/sub?target=clash&amp;url=URLLink</a>) for the transform.</p>
<ul>
<li><p>How to use the api?</p>
<p><strong>v2ray link</strong>: <a href="http://example.com">http://example.com</a></p>
<p>Repalce <strong>URLLink</strong> with <strong>v2ray link</strong>: <a href="https://api.10101.io/sub?target=clash&amp;url=http://example.com">https://api.10101.io/sub?target=clash&amp;url=http://example.com</a></p>
</li>
</ul>
</li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/Kr328/ClashForAndroid">GitHub of Android</a></p>
<p><a href="https://github.com/Fndroid/clash_for_windows_pkg">GitHub of Windows</a></p>
<p><a href="https://10101.io/2020/02/05/how-to-use-clash-for-android">Usage of Android</a></p>
<p><a href="https://10101.io/2018/10/27/how-to-use-clash-for-windows">Usage of Windows</a></p>
]]></content>
      <tags>
        <tag>Clash</tag>
        <tag>V2ray</tag>
        <tag>SSR</tag>
        <tag>Vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Enhancement (High Speed Download)</title>
    <url>/posts/c3bd5c/</url>
    <content><![CDATA[<h1 id="Enhancement-GitHub"><a href="#Enhancement-GitHub" class="headerlink" title="Enhancement GitHub"></a>Enhancement GitHub</h1><p><strong>Accelerate the download speed of Clone, Release, Raw, Code(ZIP) files, and provide a quick download form for project.</strong></p>
<h2 id="Operating-Instruction"><a href="#Operating-Instruction" class="headerlink" title="Operating Instruction"></a>Operating Instruction</h2><ol>
<li><p>Install the <strong>Tampermonkey</strong> in the browser. (<em><a href="https://xiu.lanzoux.com/b073l8d1e">Chrome</a></em> / <em><a href="https://addons.mozilla.org/firefox/addon/tampermonkey/">Firefox</a></em> / <em><a href="https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN">Edge</a></em>)</p>
<p><strong><a href="https://zhuanlan.zhihu.com/p/276027099">How to install the .crx extensions?</a></strong></p>
</li>
<li><p>Download and install this <strong><a href="https://greasyfork.org/scripts/412245-github-%E5%A2%9E%E5%BC%BA-%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD/code/Github%20%E5%A2%9E%E5%BC%BA%20-%20%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD.user.js">script</a></strong>.</p>
</li>
<li>Run the script.</li>
<li>If you can not open the website, can add the script manually.</li>
</ol>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Enhancement-GitHub.png" alt="Successful"></p>
<h2 id="Principle-of-script"><a href="#Principle-of-script" class="headerlink" title="Principle of script"></a>Principle of script</h2><p><strong>Consolidate the addresses of many download acceleration websites and open source project, eliminating the need of manual adjustments.</strong></p>
<h2 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         Github 增强 - 高速下载</span></span><br><span class="line"><span class="comment">// @version      1.3.2</span></span><br><span class="line"><span class="comment">// @author       X.I.U</span></span><br><span class="line"><span class="comment">// @description  高速下载 Clone、Release、Raw、Code(ZIP) 等文件、项目列表单文件快捷下载 (☁)</span></span><br><span class="line"><span class="comment">// @match        *://github.com/*</span></span><br><span class="line"><span class="comment">// @icon         https://github.com/favicon.ico</span></span><br><span class="line"><span class="comment">// @require      https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js</span></span><br><span class="line"><span class="comment">// @grant        GM_registerMenuCommand</span></span><br><span class="line"><span class="comment">// @grant        GM_unregisterMenuCommand</span></span><br><span class="line"><span class="comment">// @grant        GM_openInTab</span></span><br><span class="line"><span class="comment">// @grant        GM_getValue</span></span><br><span class="line"><span class="comment">// @grant        GM_setValue</span></span><br><span class="line"><span class="comment">// @grant        GM_notification</span></span><br><span class="line"><span class="comment">// @license      GPL-3.0 License</span></span><br><span class="line"><span class="comment">// @run-at       document-end</span></span><br><span class="line"><span class="comment">// @namespace    https://greasyfork.org/scripts/412245</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"> </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> backColor = <span class="string">&#x27;#ffffff&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> fontColor = <span class="string">&#x27;#888888&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;dark&#x27;</span> == $(<span class="string">&#x27;html&#x27;</span>).attr(<span class="string">&#x27;data-color-mode&#x27;</span>))&#123; <span class="comment">// 黑暗模式判断</span></span><br><span class="line">        backColor = <span class="string">&#x27;#0D1117&#x27;</span>;</span><br><span class="line">        fontColor = <span class="string">&#x27;#58A6FF&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> download_url = [</span><br><span class="line">        [<span class="string">&#x27;https://gh.con.sh&#x27;</span>,<span class="string">&#x27;美国&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;https://gh.api.99988866.xyz&#x27;</span>,<span class="string">&#x27;美国&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;https://download.fastgit.org&#x27;</span>,<span class="string">&#x27;日本东京&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;https://github.xiu2.xyz&#x27;</span>,<span class="string">&#x27;日本东京&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;https://ghproxy.com&#x27;</span>,<span class="string">&#x27;韩国首尔&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;https://pd.zwc365.com/seturl&#x27;</span>,<span class="string">&#x27;中国香港&#x27;</span>]</span><br><span class="line">    ],</span><br><span class="line">        clone_url = [</span><br><span class="line">            <span class="string">&#x27;https://hub.fastgit.org&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://gitclone.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://github.com.cnpmjs.org&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        raw_url = [</span><br><span class="line">            [<span class="string">&#x27;https://raw.githubusercontent.com&#x27;</span>,<span class="string">&#x27;Github 原生&#x27;</span>,<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;https://raw.sevencdn.com&#x27;</span>,<span class="string">&#x27;中国国内&#x27;</span>,<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;https://cdn.jsdelivr.net&#x27;</span>,<span class="string">&#x27;中国国内&#x27;</span>,<span class="string">&#x27;注意：该加速源存在缓存机制（24小时），所以文件可能不是最新。&amp;#10;注意：当前分支所有文件总文件大小超过 50MB 时，该加速源不可用。&amp;#10;注意：当前分支名为版本号格式时（如 v1.2.3），该高速下载链接因格式限制不可用。&amp;#10;&amp;#10;&#x27;</span>],</span><br><span class="line">            [<span class="string">&#x27;https://raw.fastgit.org&#x27;</span>,<span class="string">&#x27;中国香港&#x27;</span>,<span class="string">&#x27;注意：单个文件太大时可能会提示超时（实时获取中），请重试。&amp;#10;&amp;#10;&#x27;</span>]</span><br><span class="line">        ],</span><br><span class="line">        svg = [</span><br><span class="line">            <span class="string">&#x27;&lt;svg class=&quot;octicon octicon-file-zip mr-3&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.5 1.75a.25.25 0 01.25-.25h3a.75.75 0 000 1.5h.5a.75.75 0 000-1.5h2.086a.25.25 0 01.177.073l2.914 2.914a.25.25 0 01.073.177v8.586a.25.25 0 01-.25.25h-.5a.75.75 0 000 1.5h.5A1.75 1.75 0 0014 13.25V4.664c0-.464-.184-.909-.513-1.237L10.573.513A1.75 1.75 0 009.336 0H3.75A1.75 1.75 0 002 1.75v11.5c0 .649.353 1.214.874 1.515a.75.75 0 10.752-1.298.25.25 0 01-.126-.217V1.75zM8.75 3a.75.75 0 000 1.5h.5a.75.75 0 000-1.5h-.5zM6 5.25a.75.75 0 01.75-.75h.5a.75.75 0 010 1.5h-.5A.75.75 0 016 5.25zm2 1.5A.75.75 0 018.75 6h.5a.75.75 0 010 1.5h-.5A.75.75 0 018 6.75zm-1.25.75a.75.75 0 000 1.5h.5a.75.75 0 000-1.5h-.5zM8 9.75A.75.75 0 018.75 9h.5a.75.75 0 010 1.5h-.5A.75.75 0 018 9.75zm-.75.75a1.75 1.75 0 00-1.75 1.75v3c0 .414.336.75.75.75h2.5a.75.75 0 00.75-.75v-3a1.75 1.75 0 00-1.75-1.75h-.5zM7 12.25a.25.25 0 01.25-.25h.5a.25.25 0 01.25.25v2.25H7v-2.25z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&lt;svg class=&quot;octicon octicon-clippy&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;&lt;svg class=&quot;octicon octicon-cloud-download&quot; aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path d=&quot;M9 12h2l-3 3-3-3h2V7h2v5zm3-8c0-.44-.91-3-4.5-3C5.08 1 3 2.92 3 5 1.02 5 0 6.52 0 8c0 1.53 1 3 3 3h3V9.7H3C1.38 9.7 1.3 8.28 1.3 8c0-.17.05-1.7 1.7-1.7h1.3V5c0-1.39 1.56-2.7 3.2-2.7 2.55 0 3.13 1.55 3.2 1.8v1.2H12c.81 0 2.7.22 2.7 2.2 0 2.09-2.25 2.2-2.7 2.2h-2V11h2c2.08 0 4-1.16 4-3.5C16 5.06 14.08 4 12 4z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        style = [<span class="string">&#x27;padding:0 6px;margin-right: -1px;border-radius: 2px;background-color: &#x27;</span>+backColor+<span class="string">&#x27;;border-color: rgba(27, 31, 35, 0.1);font-size: 11px;color: &#x27;</span>+fontColor+<span class="string">&#x27;;&#x27;</span>],</span><br><span class="line"> </span><br><span class="line">        menu_raw_fast = GM_getValue(<span class="string">&#x27;xiu2_menu_raw_fast&#x27;</span>),</span><br><span class="line">        menu_menu_raw_fast_ID, menu_feedBack_ID;</span><br><span class="line">    <span class="keyword">if</span> (menu_raw_fast == <span class="literal">null</span> || menu_raw_fast == <span class="string">&#x27;中国国内&#x27;</span>)&#123;menu_raw_fast = <span class="number">1</span>; GM_setValue(<span class="string">&#x27;xiu2_menu_raw_fast&#x27;</span>, <span class="number">1</span>)&#125;; <span class="comment">// 调整上个版本的设置存储变量内容</span></span><br><span class="line"> </span><br><span class="line">    registerMenuCommand();</span><br><span class="line">    <span class="comment">// 注册脚本菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">registerMenuCommand</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (menu_feedBack_ID)&#123; <span class="comment">// 如果反馈菜单ID不是 null，则删除所有脚本菜单</span></span><br><span class="line">            GM_unregisterMenuCommand(menu_menu_raw_fast_ID);</span><br><span class="line">            GM_unregisterMenuCommand(menu_feedBack_ID);</span><br><span class="line">            menu_raw_fast = GM_getValue(<span class="string">&#x27;xiu2_menu_raw_fast&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(menu_raw_fast &gt; raw_url.length - <span class="number">1</span>)&#123; <span class="comment">// 避免在减少 raw 数组后，用户储存的数据大于数组而报错</span></span><br><span class="line">            menu_raw_fast = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        menu_menu_raw_fast_ID = GM_registerMenuCommand(<span class="string">`🔄 [ <span class="subst">$&#123;raw_url[menu_raw_fast][<span class="number">1</span>]&#125;</span> ] 加速源 (☁) - 点击切换`</span>, menu_toggle_raw_fast);</span><br><span class="line">        menu_feedBack_ID = GM_registerMenuCommand(<span class="string">&#x27;💬 反馈 &amp; 建议 [Github]&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">window</span>.GM_openInTab(<span class="string">&#x27;https://github.com/XIU2/UserScript&#x27;</span>, &#123;<span class="attr">active</span>: <span class="literal">true</span>,<span class="attr">insert</span>: <span class="literal">true</span>,<span class="attr">setParent</span>: <span class="literal">true</span>&#125;);&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 切换加速源</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">menu_toggle_raw_fast</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (menu_raw_fast &gt;= raw_url.length - <span class="number">1</span>)&#123; <span class="comment">// 如果当前加速源位置大于等于加速源总数，则改为第一个加速源，反之递增下一个加速源</span></span><br><span class="line">            menu_raw_fast = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            menu_raw_fast += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        GM_setValue(<span class="string">&#x27;xiu2_menu_raw_fast&#x27;</span>, menu_raw_fast);</span><br><span class="line">        delRawDownLink(); <span class="comment">// 删除旧加速源</span></span><br><span class="line">        addRawDownLink(); <span class="comment">// 添加新加速源</span></span><br><span class="line">        GM_notification(<span class="string">`已切换加速源为：<span class="subst">$&#123;raw_url[menu_raw_fast][<span class="number">1</span>]&#125;</span>`</span>); <span class="comment">// 提示消息</span></span><br><span class="line">        registerMenuCommand(); <span class="comment">// 重新注册脚本菜单</span></span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    addRelease(); <span class="comment">// Release 加速</span></span><br><span class="line">    addDownloadZIP(); <span class="comment">// Source Code 加速</span></span><br><span class="line">    addGitClone(); <span class="comment">// Download ZIP/Code(ZIP) 加速</span></span><br><span class="line">    addRawFile(); <span class="comment">// Raw 加速</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(addRawDownLink, <span class="number">2000</span>); <span class="comment">// 添加 Raw 下载链接（☁），延迟 2 秒执行，避免被 pjax 刷掉</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;pjax:success&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// pjax 事件发生后</span></span><br><span class="line">        addRelease(); <span class="comment">// Release 加速</span></span><br><span class="line">        addDownloadZIP(); <span class="comment">// Source Code 加速</span></span><br><span class="line">        addGitClone(); <span class="comment">// Download ZIP/Code(ZIP) 加速</span></span><br><span class="line">        addRawFile(); <span class="comment">// 添加 Raw 加速按钮</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(addRawDownLink, <span class="number">2000</span>); <span class="comment">// 添加 Raw 下载链接（☁），延迟 2 秒执行，避免被 pjax 刷掉</span></span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Release</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addRelease</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.Box.Box--condensed&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).find(<span class="string">&quot;.d-flex.Box-body&gt;a&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> href = $(<span class="built_in">this</span>).attr(<span class="string">&quot;href&quot;</span>),</span><br><span class="line">                    url = [</span><br><span class="line">                        download_url[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href,</span><br><span class="line">                        download_url[<span class="number">1</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href,</span><br><span class="line">                        download_url[<span class="number">2</span>][<span class="number">0</span>] + href,</span><br><span class="line">                        download_url[<span class="number">3</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href,</span><br><span class="line">                        download_url[<span class="number">4</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href,</span><br><span class="line">                        download_url[<span class="number">5</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href</span><br><span class="line">                    ],</span><br><span class="line">                    html = <span class="string">`&lt;div style=&quot;display: flex;justify-content: flex-end;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">0</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">0</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">1</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">1</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">2</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">2</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">3</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">3</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">4</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">4</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">5</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">5</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>;</span><br><span class="line">                $(<span class="built_in">this</span>).next().after(html);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 修改[文件大小]元素样式</span></span><br><span class="line">            <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;small.pl-2.text-gray.flex-shrink-0&#x27;</span>).forEach(<span class="function"><span class="params">el</span>=&gt;</span>el.style.cssText=<span class="string">&#x27;display: flex; justify-content: flex-end; flex-grow: 1; margin-right: 8px;&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Source Code</span></span><br><span class="line">            $(<span class="built_in">this</span>).find(<span class="string">&quot;.d-block.Box-body&gt;a&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> href = $(<span class="built_in">this</span>).attr(<span class="string">&quot;href&quot;</span>),</span><br><span class="line">                    url = [</span><br><span class="line">                        download_url[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href,</span><br><span class="line">                        download_url[<span class="number">1</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href,</span><br><span class="line">                        download_url[<span class="number">2</span>][<span class="number">0</span>] + href,</span><br><span class="line">                        download_url[<span class="number">3</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href,</span><br><span class="line">                        download_url[<span class="number">4</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href,</span><br><span class="line">                        download_url[<span class="number">5</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href</span><br><span class="line">                    ],</span><br><span class="line">                    html = <span class="string">`&lt;div style=&quot;display: flex;justify-content: flex-end;flex-grow: 1;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">0</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">0</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">1</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">1</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">2</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">2</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">3</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">3</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">4</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">4</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;a style=&quot;<span class="subst">$&#123;style[<span class="number">0</span>]&#125;</span>&quot; class=&quot;btn&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">5</span>]&#125;</span>&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;<span class="subst">$&#123;download_url[<span class="number">5</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>;</span><br><span class="line">                $(<span class="built_in">this</span>).after(html);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 修改 Source code 样式，使其和加速按钮并列一排</span></span><br><span class="line">        <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div.d-block.py-1.py-md-2.Box-body.px-2&#x27;</span>).forEach(<span class="function"><span class="params">el</span>=&gt;</span>el.className=<span class="string">&#x27;d-flex py-1 py-md-2 Box-body px-2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Download ZIP</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addDownloadZIP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.dropdown-menu.dropdown-menu-sw.p-0 ul li:last-child&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> href = $(<span class="built_in">this</span>).children(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>),</span><br><span class="line">                url = [</span><br><span class="line">                    download_url[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">&quot;/https://github.com&quot;</span> + href,</span><br><span class="line">                    download_url[<span class="number">1</span>][<span class="number">0</span>] + <span class="string">&quot;/https://github.com&quot;</span> + href,</span><br><span class="line">                    download_url[<span class="number">2</span>][<span class="number">0</span>] + href,</span><br><span class="line">                    download_url[<span class="number">3</span>][<span class="number">0</span>] + <span class="string">&quot;/https://github.com&quot;</span> + href,</span><br><span class="line">                    download_url[<span class="number">4</span>][<span class="number">0</span>] + <span class="string">&quot;/https://github.com&quot;</span> + href,</span><br><span class="line">                    download_url[<span class="number">5</span>][<span class="number">0</span>] + <span class="string">&#x27;/https://github.com&#x27;</span> + href</span><br><span class="line">                ],</span><br><span class="line">                html = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li class=&quot;Box-row Box-row--hover-gray p-0&quot;&gt;&lt;a class=&quot;d-flex flex-items-center text-gray-dark text-bold no-underline p-3&quot; rel=&quot;noreferrer noopener nofollow&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">0</span>]&#125;</span>&quot;&gt;<span class="subst">$&#123;svg[<span class="number">0</span>]&#125;</span>Download ZIP <span class="subst">$&#123;download_url[<span class="number">0</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;Box-row Box-row--hover-gray p-0&quot;&gt;&lt;a class=&quot;d-flex flex-items-center text-gray-dark text-bold no-underline p-3&quot; rel=&quot;noreferrer noopener nofollow&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">1</span>]&#125;</span>&quot;&gt;<span class="subst">$&#123;svg[<span class="number">0</span>]&#125;</span>Download ZIP <span class="subst">$&#123;download_url[<span class="number">1</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;Box-row Box-row--hover-gray p-0&quot;&gt;&lt;a class=&quot;d-flex flex-items-center text-gray-dark text-bold no-underline p-3&quot; rel=&quot;noreferrer noopener nofollow&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">2</span>]&#125;</span>&quot;&gt;<span class="subst">$&#123;svg[<span class="number">0</span>]&#125;</span>Download ZIP <span class="subst">$&#123;download_url[<span class="number">2</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;Box-row Box-row--hover-gray p-0&quot;&gt;&lt;a class=&quot;d-flex flex-items-center text-gray-dark text-bold no-underline p-3&quot; rel=&quot;noreferrer noopener nofollow&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">3</span>]&#125;</span>&quot;&gt;<span class="subst">$&#123;svg[<span class="number">0</span>]&#125;</span>Download ZIP <span class="subst">$&#123;download_url[<span class="number">3</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;Box-row Box-row--hover-gray p-0&quot;&gt;&lt;a class=&quot;d-flex flex-items-center text-gray-dark text-bold no-underline p-3&quot; rel=&quot;noreferrer noopener nofollow&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">4</span>]&#125;</span>&quot;&gt;<span class="subst">$&#123;svg[<span class="number">0</span>]&#125;</span>Download ZIP <span class="subst">$&#123;download_url[<span class="number">4</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class=&quot;Box-row Box-row--hover-gray p-0&quot;&gt;&lt;a class=&quot;d-flex flex-items-center text-gray-dark text-bold no-underline p-3&quot; rel=&quot;noreferrer noopener nofollow&quot; href=&quot;<span class="subst">$&#123;url[<span class="number">5</span>]&#125;</span>&quot;&gt;<span class="subst">$&#123;svg[<span class="number">0</span>]&#125;</span>Download ZIP <span class="subst">$&#123;download_url[<span class="number">5</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">            $(<span class="built_in">this</span>).after(html);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Git Clone</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addGitClone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;[role=&#x27;tabpanel&#x27;] div.input-group&quot;</span>).first().each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> href_split = location.href.split(<span class="string">&quot;/&quot;</span>),</span><br><span class="line">                url = [</span><br><span class="line">                    clone_url[<span class="number">0</span>] + <span class="string">&quot;/&quot;</span> + href_split[<span class="number">3</span>] + <span class="string">&quot;/&quot;</span> + href_split[<span class="number">4</span>] + <span class="string">&quot;.git&quot;</span>,</span><br><span class="line">                    clone_url[<span class="number">1</span>] + <span class="string">&quot;/github.com/&quot;</span> + href_split[<span class="number">3</span>] + <span class="string">&quot;/&quot;</span> + href_split[<span class="number">4</span>] + <span class="string">&quot;.git&quot;</span>,</span><br><span class="line">                    clone_url[<span class="number">2</span>] + <span class="string">&quot;/&quot;</span> + href_split[<span class="number">3</span>] + <span class="string">&quot;/&quot;</span> + href_split[<span class="number">4</span>] + <span class="string">&quot;.git&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                html = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div class=&quot;input-group&quot; style=&quot;margin-top: 4px;&quot;&gt;&lt;input value=&quot;<span class="subst">$&#123;url[<span class="number">0</span>]&#125;</span>&quot; aria-label=&quot;<span class="subst">$&#123;url[<span class="number">0</span>]&#125;</span>&quot; type=&quot;text&quot; class=&quot;form-control input-monospace input-sm bg-gray-light&quot; data-autoselect=&quot;&quot; readonly=&quot;&quot;&gt;&lt;div class=&quot;input-group-button&quot;&gt;&lt;clipboard-copy value=&quot;<span class="subst">$&#123;url[<span class="number">0</span>]&#125;</span>&quot; aria-label=&quot;Copy to clipboard&quot; class=&quot;btn btn-sm&quot; tabindex=&quot;0&quot; role=&quot;button&quot;&gt;<span class="subst">$&#123;svg[<span class="number">1</span>]&#125;</span>&lt;/clipboard-copy&gt;&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;input-group&quot; style=&quot;margin-top: 4px;&quot;&gt;&lt;input value=&quot;<span class="subst">$&#123;url[<span class="number">1</span>]&#125;</span>&quot; aria-label=&quot;<span class="subst">$&#123;url[<span class="number">1</span>]&#125;</span>&quot; type=&quot;text&quot; class=&quot;form-control input-monospace input-sm bg-gray-light&quot; data-autoselect=&quot;&quot; readonly=&quot;&quot;&gt;&lt;div class=&quot;input-group-button&quot;&gt;&lt;clipboard-copy value=&quot;<span class="subst">$&#123;url[<span class="number">1</span>]&#125;</span>&quot; aria-label=&quot;Copy to clipboard&quot; class=&quot;btn btn-sm&quot; tabindex=&quot;0&quot; role=&quot;button&quot;&gt;<span class="subst">$&#123;svg[<span class="number">1</span>]&#125;</span>&lt;/clipboard-copy&gt;&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;input-group&quot; style=&quot;margin-top: 4px;&quot;&gt;&lt;input value=&quot;<span class="subst">$&#123;url[<span class="number">2</span>]&#125;</span>&quot; aria-label=&quot;<span class="subst">$&#123;url[<span class="number">2</span>]&#125;</span>&quot; type=&quot;text&quot; class=&quot;form-control input-monospace input-sm bg-gray-light&quot; data-autoselect=&quot;&quot; readonly=&quot;&quot;&gt;&lt;div class=&quot;input-group-button&quot;&gt;&lt;clipboard-copy value=&quot;<span class="subst">$&#123;url[<span class="number">2</span>]&#125;</span>&quot; aria-label=&quot;Copy to clipboard&quot; class=&quot;btn btn-sm&quot; tabindex=&quot;0&quot; role=&quot;button&quot;&gt;<span class="subst">$&#123;svg[<span class="number">1</span>]&#125;</span>&lt;/clipboard-copy&gt;&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">            $(<span class="built_in">this</span>).after(html);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Raw</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addRawFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#raw-url&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> href = location.href.replace(<span class="string">&#x27;https://github.com&#x27;</span>,<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">                href2 = href.replace(<span class="string">&#x27;/blob/&#x27;</span>,<span class="string">&#x27;/&#x27;</span>),</span><br><span class="line">                url = [</span><br><span class="line">                    raw_url[<span class="number">1</span>][<span class="number">0</span>] + href2,</span><br><span class="line">                    raw_url[<span class="number">2</span>][<span class="number">0</span>] + <span class="string">&quot;/gh&quot;</span> + href.replace(<span class="string">&#x27;/blob/&#x27;</span>,<span class="string">&#x27;@&#x27;</span>),</span><br><span class="line">                    raw_url[<span class="number">3</span>][<span class="number">0</span>] + href2</span><br><span class="line">                ],</span><br><span class="line">                html = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;a href=&quot;<span class="subst">$&#123;url[<span class="number">0</span>]&#125;</span>&quot; title=&quot;<span class="subst">$&#123;raw_url[<span class="number">1</span>][<span class="number">2</span>]&#125;</span>&quot; role=&quot;button&quot; rel=&quot;noreferrer noopener nofollow&quot; class=&quot;btn btn-sm BtnGroup-item&quot;&gt;<span class="subst">$&#123;raw_url[<span class="number">1</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;<span class="subst">$&#123;url[<span class="number">1</span>]&#125;</span>&quot; title=&quot;<span class="subst">$&#123;raw_url[<span class="number">2</span>][<span class="number">2</span>]&#125;</span>&quot; role=&quot;button&quot; rel=&quot;noreferrer noopener nofollow&quot; class=&quot;btn btn-sm BtnGroup-item&quot;&gt;<span class="subst">$&#123;raw_url[<span class="number">2</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;<span class="subst">$&#123;url[<span class="number">2</span>]&#125;</span>&quot; title=&quot;<span class="subst">$&#123;raw_url[<span class="number">3</span>][<span class="number">2</span>]&#125;</span>&quot; role=&quot;button&quot; rel=&quot;noreferrer noopener nofollow&quot; class=&quot;btn btn-sm BtnGroup-item&quot;&gt;<span class="subst">$&#123;raw_url[<span class="number">3</span>][<span class="number">1</span>]&#125;</span>&lt;/a&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">            $(<span class="built_in">this</span>).after(html);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 添加 Raw 下载链接（☁）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addRawDownLink</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 如果不是项目文件页面，就返回</span></span><br><span class="line">        <span class="keyword">var</span> files = $(<span class="string">&#x27;div.Box-row svg.octicon.octicon-file&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(files.length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> files1 = $(<span class="string">&#x27;a.fileDownLink&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(files1.length &gt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 鼠标指向则显示</span></span><br><span class="line">        <span class="keyword">var</span> mouseOverHandler = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> elem = evt.currentTarget,</span><br><span class="line">                aElm_new = elem.querySelectorAll(<span class="string">&#x27;.fileDownLink&#x27;</span>),</span><br><span class="line">                aElm_now = elem.querySelectorAll(<span class="string">&#x27;svg.octicon.octicon-file.text-gray-light&#x27;</span>);</span><br><span class="line">            aElm_new.forEach(<span class="function"><span class="params">el</span>=&gt;</span>el.style.cssText = <span class="string">&#x27;display: inline&#x27;</span>);</span><br><span class="line">            aElm_now.forEach(<span class="function"><span class="params">el</span>=&gt;</span>el.style.cssText = <span class="string">&#x27;display: none&#x27;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 鼠标离开则隐藏</span></span><br><span class="line">        <span class="keyword">var</span> mouseOutHandler = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> elem = evt.currentTarget,</span><br><span class="line">                aElm_new = elem.querySelectorAll(<span class="string">&#x27;.fileDownLink&#x27;</span>),</span><br><span class="line">                aElm_now = elem.querySelectorAll(<span class="string">&#x27;svg.octicon.octicon-file.text-gray-light&#x27;</span>);</span><br><span class="line">            aElm_new.forEach(<span class="function"><span class="params">el</span>=&gt;</span>el.style.cssText = <span class="string">&#x27;display: none&#x27;</span>);</span><br><span class="line">            aElm_now.forEach(<span class="function"><span class="params">el</span>=&gt;</span>el.style.cssText = <span class="string">&#x27;display: inline&#x27;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 循环添加</span></span><br><span class="line">        files.each(<span class="function"><span class="keyword">function</span>(<span class="params">i,fileElm</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> trElm = fileElm.parentNode.parentNode,</span><br><span class="line">                cntElm_a = trElm.querySelector(<span class="string">&#x27;.css-truncate.css-truncate-target.d-block.width-fit a&#x27;</span>),</span><br><span class="line">                cntElm_svg = trElm.querySelector(<span class="string">&#x27;.mr-3.flex-shrink-0 svg.octicon.octicon-file.text-gray-light&#x27;</span>),</span><br><span class="line">                Name = cntElm_a.innerText,</span><br><span class="line">                href = cntElm_a.attributes[<span class="string">&#x27;href&#x27;</span>].nodeValue.replace(<span class="string">&#x27;https://github.com&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> href2 = href.replace(<span class="string">&#x27;/blob/&#x27;</span>,<span class="string">&#x27;/&#x27;</span>), url, url_name, url_tip = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">switch</span>(menu_raw_fast)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    url = raw_url[<span class="number">0</span>][<span class="number">0</span>] + href2;</span><br><span class="line">                    url_name = raw_url[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">                    url_tip = raw_url[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    url = raw_url[<span class="number">1</span>][<span class="number">0</span>] + href2;</span><br><span class="line">                    url_name = raw_url[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                    url_tip = raw_url[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    url = raw_url[<span class="number">2</span>][<span class="number">0</span>] + <span class="string">&#x27;/gh&#x27;</span> + href.replace(<span class="string">&#x27;/blob/&#x27;</span>,<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">                    url_name = raw_url[<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">                    url_tip = raw_url[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    url = raw_url[<span class="number">3</span>][<span class="number">0</span>] + href2;</span><br><span class="line">                    url_name = raw_url[<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">                    url_tip = raw_url[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> html = <span class="string">` &lt;a href=&quot;<span class="subst">$&#123;url&#125;</span>&quot; download=&quot;<span class="subst">$&#123;Name&#125;</span>&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot; class=&quot;fileDownLink&quot; style=&quot;display: none;&quot; title=&quot;「<span class="subst">$&#123;url_name&#125;</span>」&amp;#10;&amp;#10;[Alt + 左键] 或 [右键 - 另存为...] 下载文件。&amp;#10;注意：鼠标点击 [☁] 图标，而不是左侧的文件名！&amp;#10;&amp;#10;<span class="subst">$&#123;url_tip&#125;</span>提示：点击浏览器右上角 Tampermonkey 扩展图标 - [ <span class="subst">$&#123;raw_url[menu_raw_fast][<span class="number">1</span>]&#125;</span> ] 加速源 (☁) 即可切换。&quot;&gt;<span class="subst">$&#123;svg[<span class="number">2</span>]&#125;</span>&lt;/a&gt;`</span>;</span><br><span class="line">            $(cntElm_svg).after(html);</span><br><span class="line">            <span class="comment">// 绑定鼠标事件</span></span><br><span class="line">            trElm.onmouseover=mouseOverHandler;</span><br><span class="line">            trElm.onmouseout=mouseOutHandler;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 删除 Raw 快捷下载（☁）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">delRawDownLink</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aElm = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.fileDownLink&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(aElm.length === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> num = <span class="number">0</span>;num&lt;aElm.length;num++)&#123;</span><br><span class="line">            aElm[num].remove();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2 id="GitClone"><a href="#GitClone" class="headerlink" title="GitClone"></a>GitClone</h2><p><strong>The first clone needs to be cached from GitHub, and subsequent clones can be pulled directly from the cache.</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Instead of the URL</span><br><span class="line">git clone https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&#x2F;tendermint&#x2F;tendermint.git</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Set the configuration of git</span><br><span class="line">git config --global url.&quot;https:&#x2F;&#x2F;gitclone.com&#x2F;&quot;.insteadOf https:&#x2F;&#x2F;</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tendermint&#x2F;tendermint.git</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Use the cgit client</span><br><span class="line">cgit clone https:&#x2F;&#x2F;github.com&#x2F;tendermint&#x2F;tendermint.git</span><br></pre></td></tr></table></figure>
<h3 id="GitHub-Mirror"><a href="#GitHub-Mirror" class="headerlink" title="GitHub Mirror"></a>GitHub Mirror</h3><ol>
<li><a href="https://github.com.cnpmjs.org">https://github.com.cnpmjs.org</a></li>
<li><a href="https://hub.fastgit.org">https://hub.fastgit.org</a></li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://greasyfork.org/zh-CN/scripts/412245-github-%E5%A2%9E%E5%BC%BA-%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BD">Github 增强 - 高速下载</a></p>
<p><a href="https://gitclone.com/">GitClone</a></p>
]]></content>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Yagmail</title>
    <url>/posts/b3f977ec/</url>
    <content><![CDATA[<h1 id="Yagmail"><a href="#Yagmail" class="headerlink" title="Yagmail"></a>Yagmail</h1><p><strong>It is Python’s tripartite library for sending E-mail. For example, email validation, subscription notifications, etc.</strong></p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install yagmail</span><br></pre></td></tr></table></figure>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Register</span></span><br><span class="line"><span class="keyword">import</span> yagmail</span><br><span class="line">yagmail.register(<span class="string">&#x27;from_email&#x27;</span>, <span class="string">&#x27;from_mail_password&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start a connection</span></span><br><span class="line">yag = yagmail.SMTP(<span class="string">&#x27;SMTP_services&#x27;</span>)</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Service Name</th>
<th style="text-align:center">Host</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">QQ</td>
<td style="text-align:center">smtp.qq.com</td>
</tr>
<tr>
<td style="text-align:center">Tencent Enterprise</td>
<td style="text-align:center">smtp.exmail.qq.com</td>
</tr>
<tr>
<td style="text-align:center">163</td>
<td style="text-align:center">smtp.163.com</td>
</tr>
<tr>
<td style="text-align:center">126</td>
<td style="text-align:center">smtp.126.com</td>
</tr>
<tr>
<td style="text-align:center">Sohu</td>
<td style="text-align:center">smtp.sohu.com</td>
</tr>
<tr>
<td style="text-align:center">Sina</td>
<td style="text-align:center">smtp.sina.com.cn</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Variables</span></span><br><span class="line">to = <span class="string">&#x27;to_email&#x27;</span></span><br><span class="line">to2 = <span class="string">&#x27;to2_email&#x27;</span></span><br><span class="line">to3 = <span class="string">&#x27;to3_email&#x27;</span></span><br><span class="line">subject = <span class="string">&#x27;This is obviously the subject&#x27;</span></span><br><span class="line">body = <span class="string">&#x27;This is obviously the body&#x27;</span></span><br><span class="line">html = <span class="string">&#x27;&lt;a href=&quot;https://pypi.python.org/pypi/sky/&quot;&gt;Click me!&lt;/a&gt;&#x27;</span></span><br><span class="line">img = <span class="string">&#x27;/local/file/bunny.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sending E-mail</span></span><br><span class="line">yag.send(to = to, subject = subject, contents = body)</span><br><span class="line">yag.send(to = to, subject = subject, contents = [body, html, img])</span><br><span class="line">yag.send(contents = [body, img])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sending E-mails to multiple objects</span></span><br><span class="line">yag.send(to = to)</span><br><span class="line">yag.send(to = [to, to2]) <span class="comment"># List or tuples for emailadresses without aliases</span></span><br><span class="line">yag.send(to = &#123;to : <span class="string">&#x27;Alias1&#x27;</span>&#125;) <span class="comment"># Dictionary for emailaddress with aliases</span></span><br><span class="line">yag.send(to = &#123;to : <span class="string">&#x27;Alias1&#x27;</span>, to2 : <span class="string">&#x27;Alias2&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># With files</span></span><br><span class="line">attachments = [path, path2]</span><br><span class="line">yag.send(to, subject, contents, attachments)</span><br></pre></td></tr></table></figure>
<h2 id="Simple-Sample"><a href="#Simple-Sample" class="headerlink" title="Simple Sample"></a>Simple Sample</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Register the From Email</span></span><br><span class="line">from_email = &#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&#x27;From Email&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;Password or Authorization Code&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: <span class="string">&#x27;SMTP service&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yag = yagmail.SMTP(</span><br><span class="line">  user=from_email[<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">  password=from_email[<span class="string">&#x27;password&#x27;</span>],</span><br><span class="line">  host=from_email[<span class="string">&#x27;host&#x27;</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate Email Content</span></span><br><span class="line"><span class="comment"># contents = [body, html, img]</span></span><br><span class="line">subject = [<span class="string">&#x27;CDUT STA 验证码&#x27;</span>]</span><br><span class="line">        contents = generate_contents(username, captcha)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_contents</span>(<span class="params">username, code</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;table width=&quot;600&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; align=&quot;center&quot; style=&quot;border: rgba(0, 0, 0, 0.3) 1px solid&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;tbody style=&quot;align-items: center&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;tr style=&quot; height: 64px; background-color: #415a94; color: #fff;&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;td style=&quot;text-align: center; font-size: 21px;&quot;&gt;CDUT STA&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">      &lt;td style=&quot; display: table-cell; padding: 8% 0; color: #000; text-align: center; font-size: 21px; &quot;&gt;</span></span><br><span class="line"><span class="string">        邮箱验证码</span></span><br><span class="line"><span class="string">      &lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">      &lt;td style=&quot;display: table-cell; padding: 0 6%; color: #333&quot;&gt;</span></span><br><span class="line"><span class="string">        尊敬的 &#123;&#125; , 您好！</span></span><br><span class="line"><span class="string">      &lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">      &lt;td style=&quot;display: table-cell; padding: 2% 6% 10% 6%; color: #333&quot;&gt;</span></span><br><span class="line"><span class="string">          您的验证码是: &lt;span style=&quot;font-weight: 600; color: red&quot;&gt;&#123;&#125;&lt;/span&gt; ,请在 5 分钟内进行验证。如果该验证码不为您本人申请,请无视。</span></span><br><span class="line"><span class="string">      &lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">      &lt;td style=&quot;background: #f7f7f7; display: table-cell; padding: 2% 6%&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;a href=&quot;https://www.baidu.com&quot; style=&quot;color: #929292&quot;&gt;返回&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">  &lt;/tbody&gt;</span></span><br><span class="line"><span class="string">&lt;/table&gt;&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(username, code).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send Email</span></span><br><span class="line"><span class="comment"># to = String || List || Object (&#x27;to1&#x27; || [to1, to2] || &#123;to1: &#x27;to1&#x27;, to2: &quot;to2&quot;&#125;)</span></span><br><span class="line"><span class="comment"># contents = htmlTemplate || String</span></span><br><span class="line"><span class="comment"># yag.send(to, subject, contents = [body, html, img])</span></span><br><span class="line">yag.send(to_email, subject, contents)</span><br></pre></td></tr></table></figure>
<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><h3 id="E-mail-Template-Limitation"><a href="#E-mail-Template-Limitation" class="headerlink" title="E-mail Template Limitation"></a>E-mail Template Limitation</h3><ol>
<li>Only the <code>&lt;Table&gt;</code> tag can be used.</li>
<li>Only the inline styles can be used.</li>
<li>Float positioning can not be used.</li>
<li>Style are best written in the corresponding tag, inheritance may be invalid.</li>
<li>Returning newline characters in the E-mail template may result in a lot of <code>&lt;br&gt;</code> tags</li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/kootenpv/yagmail">Official Website</a></p>
<p><a href="https://www.cnblogs.com/zhangwenjiajessy/p/6132201.html">HTML Email Style</a></p>
<p><a href="https://www.cnblogs.com/jonyam/p/python-sand-email.html">Email Validation</a></p>
<p><a href="https://github.com/SmaIIstars/STABackend">STA Project</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>yagmail</tag>
        <tag>E-mail</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-Request</title>
    <url>/posts/66635f9d/</url>
    <content><![CDATA[<h1 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h1><p><strong>Data interaction object in Falsk framework</strong></p>
<h2 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Attribute</th>
<th style="text-align:center">Instruction</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">form</td>
<td style="text-align:center">MultiDict (one-key multi-value dictionary) resolved from ‘POST’ or ‘PUT’ requests</td>
<td style="text-align:center">noly x-www-form-urlencoded, form-data can be obtained</td>
</tr>
<tr>
<td style="text-align:center">args</td>
<td style="text-align:center">MultiDict resolved from URL query part</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>values</strong></td>
<td style="text-align:center">form &amp; args</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cookies</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>headers</strong></td>
<td style="text-align:center">Headers information</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">data</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">files</td>
<td style="text-align:center">Files ImmutableMultiDict</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>method</strong></td>
<td style="text-align:center">type of request</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">url</td>
<td style="text-align:center">base_url + query part</td>
<td style="text-align:center"><a href="http://127.0.0.1:5000/data/register?token=token&amp;id=id">http://127.0.0.1:5000/data/register?token=token&amp;id=id</a></td>
</tr>
<tr>
<td style="text-align:center">base_url</td>
<td style="text-align:center">url_root + path</td>
<td style="text-align:center"><a href="http://127.0.0.1:5000/data/register">http://127.0.0.1:5000/data/register</a></td>
</tr>
<tr>
<td style="text-align:center">url_root</td>
<td style="text-align:center"></td>
<td style="text-align:center"><a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a></td>
</tr>
<tr>
<td style="text-align:center">path</td>
<td style="text-align:center"></td>
<td style="text-align:center">/data/register</td>
</tr>
<tr>
<td style="text-align:center">blueprint</td>
<td style="text-align:center">Name of blueprint</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>json</strong></td>
<td style="text-align:center">isJson ? json_data(dict) : None</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>get_data()</strong></td>
<td style="text-align:center">get bytes of data</td>
<td style="text-align:center">get_data(as_text=True) to str, then use json.loads to Json</td>
</tr>
</tbody>
</table>
</div>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.csdn.net/u011146423/article/details/88191225">Flask-Request Reference</a></p>
]]></content>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Token-JWT</title>
    <url>/posts/815fd892/</url>
    <content><![CDATA[<h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><h2 id="The-principle-of-Token"><a href="#The-principle-of-Token" class="headerlink" title="The principle of Token"></a>The principle of Token</h2><pre class="mermaid">sequenceDiagram
participant c as Client
participant s as Server

c ->> s: Username & password
s ->> s: generate the token
s ->> c: token
c ->> s: network request with token
s ->> s: valid token
s ->> c: data or error</pre>

<ul>
<li>Tokens can be stateless and can be shared across multiple services</li>
<li>Make request without sending cookie to prevent CSRF attacks</li>
</ul>
<h1 id="JWT-Json-Web-Token"><a href="#JWT-Json-Web-Token" class="headerlink" title="JWT (Json Web Token)"></a>JWT (Json Web Token)</h1><h2 id="Differences-between-traditional-Token-and-JWT"><a href="#Differences-between-traditional-Token-and-JWT" class="headerlink" title="Differences between traditional Token and JWT"></a>Differences between traditional Token and JWT</h2><ul>
<li>Traditional Token: The generated token on server needs to be stored locally on the server side, and subsequent requests need to be queried and checked to verify the validity of the token.</li>
<li>JWT: The generated token does not need to be stored on the server</li>
</ul>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><ul>
<li><p>Token as a whole is made up of three major parts that is divided by ‘.’</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJqd3QiLCJhbGciOiJIUzI1NiJ9</span><br><span class="line">  .eyJkYXRhIjp7Im5hbWUiOiJTbWFsbFN0YXJzIiwiYXV0aG9yaXR5IjoiMCJ9LCJleHAiOjE2MTExNTAxNzB9</span><br><span class="line">  .ypNwF -</span><br><span class="line">  BgqEl4HmuS -</span><br><span class="line">  ulJRgKjz -</span><br><span class="line">  RZJIMxtHv28K5cPm8;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Header (Contains algorihm, types, etc. Use base64url encryption)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Payload (data. Use base64url encryption)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SmallStars&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;authority&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;exp&quot;</span>: <span class="number">1611150170</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Signature (Connect the first two parts of the ciphertext. Use HS256 encryption, and then the obtained ciphertext with base64url encryption)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// salt is your secret-key</span></span><br><span class="line"><span class="comment">// base64url is base64 encrypted first and then &#x27;-&#x27; instead of &#x27;+&#x27; and &#x27;_&#x27; instead of &#x27;/&#x27;</span></span><br><span class="line">base64url(</span><br><span class="line">  HMACHSHA256(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> + base64url(payload), salt)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Sample-Code"><a href="#Sample-Code" class="headerlink" title="Sample Code"></a>Sample Code</h2><ul>
<li><p>Generate Token</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_token</span>(<span class="params">payload, timeout=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="keyword">import</span> jwt</span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">    <span class="comment"># header</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;jwt&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    payload[<span class="string">&#x27;exp&#x27;</span>] = datetime.datetime.utcnow() + datetime.timedelta(minutes=timeout)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    token = jwt.encode(payload=payload, key=salt, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> token</span><br></pre></td></tr></table></figure>
</li>
<li><p>Valid Token</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid_token</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        token = request.form[<span class="string">&#x27;token&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> BaseException:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: <span class="number">1003</span>,</span><br><span class="line">            <span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Please login in&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> jwt</span><br><span class="line">    payload = <span class="literal">None</span></span><br><span class="line">    error_msg = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = jwt.decode(token, salt, <span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">        error_msg = <span class="string">&#x27;Token is timeout&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> jwt.DecodeError:</span><br><span class="line">        error_msg = <span class="string">&#x27;Token validation failed&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">        error_msg = <span class="string">&#x27;Token is invalid&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> payload:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: <span class="number">1003</span>,</span><br><span class="line">            <span class="string">&#x27;error&#x27;</span>: error_msg</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>: <span class="number">1002</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://jwt.io/">Official Website</a></p>
<p><a href="https://www.cnblogs.com/ls-2018/p/11858551.html">Reference blog</a></p>
<p><a href="https://www.bilibili.com/video/BV1tJ411B7yJ?p=2">Reference video</a></p>
<p><a href="https://github.com/SmaIIstars/STA">STA BackEnd Project</a></p>
]]></content>
      <tags>
        <tag>Token</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-SQLalchemy</title>
    <url>/posts/18e27ceb/</url>
    <content><![CDATA[<h1 id="Flask-SQLalchemy"><a href="#Flask-SQLalchemy" class="headerlink" title="Flask-SQLalchemy"></a>Flask-SQLalchemy</h1><p><strong>Flask-SQLAlchemy is an extension for Flask that adds support for SQLAlchemy to your application.</strong></p>
<h2 id="a-quick-example"><a href="#a-quick-example" class="headerlink" title="a quick example"></a>a quick example</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:////tmp/test.db&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">80</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, username, email</span>):</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.email = email</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;User %r&gt;&#x27;</span> % self.username</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/data&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, ]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<h2 id="Select-Insert-Delete"><a href="#Select-Insert-Delete" class="headerlink" title="Select, Insert, Delete"></a><a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/queries/#select-insert-delete">Select, Insert, Delete</a></h2><h3 id="Querying-Records"><a href="#Querying-Records" class="headerlink" title="Querying Records"></a>Querying Records</h3><ul>
<li><p><a href="https://blog.csdn.net/xiao_bao_an/article/details/84667705">Select</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Select the first</span></span><br><span class="line">User.query.first()</span><br><span class="line">User.query.get(<span class="number">1</span>)   <span class="comment"># According to primary key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Select all</span></span><br><span class="line">User.query.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the number of data quantity</span></span><br><span class="line">User.query.count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the data with id 4</span></span><br><span class="line">User.query.filter_by(<span class="built_in">id</span>=<span class="number">4</span>).<span class="built_in">all</span>()</span><br><span class="line">User.query.<span class="built_in">filter</span>(User.<span class="built_in">id</span> == <span class="number">4</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># startwith/endwith</span></span><br><span class="line">User.query.<span class="built_in">filter</span>(User.name.startswith(<span class="string">&#x27;xxx&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">User.query.<span class="built_in">filter</span>(User.name.endswith(<span class="string">&#x27;xxx&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># contain</span></span><br><span class="line">User.query.<span class="built_in">filter</span>(User.name.contains(<span class="string">&quot;n&quot;</span>)).<span class="built_in">all</span>()</span><br><span class="line">User.query.<span class="built_in">filter</span>(User.name.like(<span class="string">&quot;%n%g&quot;</span>)).<span class="built_in">all</span>()</span><br><span class="line">User.query.<span class="built_in">filter</span>(User.<span class="built_in">id</span>.in_([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Intersection condition</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span><br><span class="line">User.query.<span class="built_in">filter</span>(and_(User.name == <span class="string">&#x27;small&#x27;</span>, User.age = <span class="number">18</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Union condition</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line">User.query.<span class="built_in">filter</span>(or_(User.name == <span class="string">&#x27;small&#x27;</span>, User.age = <span class="number">18</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Not contain</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> not_</span><br><span class="line">User.query.<span class="built_in">filter</span>(not_(User.name == <span class="string">&#x27;small&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># order (Default ascending)</span></span><br><span class="line">User.query.order_by(User.age, User.<span class="built_in">id</span>.desc()).limit(<span class="number">5</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Paging query</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">pn.items: The amount of data retrieved</span></span><br><span class="line"><span class="string">pn.page : The current page</span></span><br><span class="line"><span class="string">pn.pages: The amount of pages</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">pn = User.query.paginate(page, items)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/quickstart/">Official Website Reference</a></li>
</ul>
]]></content>
      <tags>
        <tag>Flask</tag>
        <tag>Python</tag>
        <tag>MySQL</tag>
        <tag>Flask-SQLalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-RESTful</title>
    <url>/posts/85306f1d/</url>
    <content><![CDATA[<h1 id="Flask-RESTful"><a href="#Flask-RESTful" class="headerlink" title="Flask-RESTful"></a>Flask-RESTful</h1><p><strong>Flask-RESTful is an extension for Flask that adds support for quickly building REST APIs.</strong></p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install flask-restful</span><br></pre></td></tr></table></figure>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p><a href="https://github.com/smaIIstars/STA">Case project</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test</span><br><span class="line"> ├── models.py</span><br><span class="line"> ├── routes.py</span><br><span class="line"> ├── views.py</span><br><span class="line"> └── __init__.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># models.py		Create the SQLalchemy modelViews</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;car&#x27;</span></span><br><span class="line">    carId = db.Column(db.INTEGER, primary_key=<span class="literal">True</span>)</span><br><span class="line">    carName = db.Column(db.String(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py		Create the RESTful modelViews</span></span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource, fields, marshal_with</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Car</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarView</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    resource_fields = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: fields.String(attribute=<span class="string">&#x27;carName&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: fields.Integer(attribute=<span class="string">&#x27;carId&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">resource_fields</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = Car.query.first()</span><br><span class="line">        print(data.carId)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># routes.py		Register the Blueprints and add the resources</span></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> test_bp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_resources</span>(<span class="params">api</span>):</span></span><br><span class="line">    api.add_resource(CarView, <span class="string">&#x27;/data&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_blueprints</span>(<span class="params">app</span>):</span></span><br><span class="line">    app.register_blueprint(test_bp, url_prefix=<span class="string">&#x27;/test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_app</span>(<span class="params">app</span>):</span></span><br><span class="line">    api = Api(test_bp)</span><br><span class="line">    register_blueprints(app)</span><br><span class="line">    add_resources(api)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Renaming-Attributes"><a href="#Renaming-Attributes" class="headerlink" title="Renaming Attributes"></a>Renaming Attributes</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">resource_fields = &#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span>: fields.String(attribute=<span class="string">&#x27;DatabaseName&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;id&#x27;</span>: fields.Integer(attribute=<span class="string">&#x27;DatabaseId&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Default-Values"><a href="#Default-Values" class="headerlink" title="Default Values"></a>Default Values</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fields = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: fields.String(default=<span class="string">&#x27;SmallStars&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;address&#x27;</span>: fields.String,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h2><ul>
<li><p>String (<em>default=None</em>, <em>attribute=None</em>)</p>
</li>
<li><p>FormattedString (<em>src_str</em>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If the key is not found in the object, returns the default value.</span></span><br><span class="line">fields.FormattedString(<span class="string">&quot;Hello &#123;name&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Url (<em>endpoint=None</em>, <em>absolute=False</em>, <em>scheme=None</em>, <em>**kwarg</em>)</p>
<ul>
<li><strong>endpoint</strong> (<em>str</em>) – Endpoint name. If endpoint is <code>None</code>, <code>request.endpoint</code> is used instead</li>
<li><strong>absolute</strong> (<em>bool</em>) – If <code>True</code>, ensures that the generated urls will have the hostname included</li>
<li><strong>scheme</strong> (<em>str</em>) – URL scheme specifier (e.g. <code>http</code>, <code>https</code>)</li>
</ul>
</li>
<li><p>DateTime (<em>dt_format=’rfc822’</em>, <em>**kwargs</em>)</p>
<ul>
<li><strong>dt_format</strong> (<em>str</em>) – <code>&#39;rfc822&#39;</code> or <code>&#39;iso8601&#39;</code></li>
</ul>
</li>
<li><p>Float (<em>default=None</em>, <em>attribute=None</em>)</p>
</li>
<li><p>Integer (<em>default=0</em>, <em>**kwargs</em>)</p>
</li>
<li><p>Nested (<em>nested</em>, <em>allow_null=False</em>, <em>**kwargs</em>)</p>
</li>
<li><p>List (<em>cls_or_instance</em>, <em>**kwargs</em>)</p>
</li>
<li><p>Boolean (<em>default=None</em>, <em>attribute=None</em>)</p>
</li>
<li><p>Fixed (<em>decimals=5</em>, <em>**kwargs</em>)</p>
</li>
</ul>
<h2 id="marshal-with-and-marshal"><a href="#marshal-with-and-marshal" class="headerlink" title="marshal_with and marshal"></a>marshal_with and marshal</h2><ul>
<li><p>marshal_with Return the processed data directly</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @marshal_with(car_fields)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarView</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    car_fields = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: fields.String(attribute=<span class="string">&#x27;carName&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: fields.String(attribute=<span class="string">&#x27;carId&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">car_fields</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = Car.query.<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
</li>
<li><p>marshal Can return the custom data structure</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarView</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    car_fields = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: fields.String(attribute=<span class="string">&#x27;carName&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: fields.String(attribute=<span class="string">&#x27;carId&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @marshal_with(car_fields)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = Car.query.<span class="built_in">all</span>()</span><br><span class="line">        data = marshal(data, CarView.car_fields)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: data,</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;successful&#x27;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://flask-restful.readthedocs.io/en/latest/index.html">Official Website Reference</a></li>
<li><p><a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/311152?fromtitle=ORM&amp;fromid=3583252&amp;fr=aladdin">ORM: object relational mapping</a></p>
</li>
<li><p><a href="https://blog.csdn.net/hello_albee/article/details/51638358">Understanding of endpoint in Flask</a></p>
</li>
<li><a href="https://blog.csdn.net/qq_42517220/article/details/88870177">Combine the Flask-RESTful and blueprint</a></li>
<li><a href="https://blog.csdn.net/qq_41134008/article/details/105666432">Format of Flask-RESTful</a></li>
<li><a href="https://github.com/anjianshi/flask-restful-extend">flask-restful-extend</a></li>
<li><a href="https://www.cnblogs.com/donghaoblogs/p/10389696.html">Summary of Flask-RESTful</a></li>
</ul>
]]></content>
      <tags>
        <tag>Flask</tag>
        <tag>Flask-RESTful</tag>
        <tag>Python</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask</title>
    <url>/posts/f70621bd/</url>
    <content><![CDATA[<h1 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h1><p><strong>Flask is a lightweight Web application framework written in Python.</strong></p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p><a href="https://lepture.com/en/2018/structure-of-a-flask-project"><strong>Flask is very flexible, it has no certain pattern of a project folder structure.</strong></a></p>
<ul>
<li><p>Functional Based Structure</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line"> ├── __init__.py</span><br><span class="line"> ├─models</span><br><span class="line"> |   ├── base.py</span><br><span class="line"> |   ├── users.py</span><br><span class="line"> |   ├── posts.py</span><br><span class="line"> |   └── __init__.py</span><br><span class="line"> ├─routes</span><br><span class="line"> |   ├── home.py</span><br><span class="line"> |   ├── account.py</span><br><span class="line"> |   └── __init__.py</span><br><span class="line"> ├─templates</span><br><span class="line"> |   ├── base.html</span><br><span class="line"> |   └── post.html</span><br><span class="line"> ├─services</span><br><span class="line"> |   ├── google.py</span><br><span class="line"> |   ├── mail.py</span><br><span class="line"> |   └── __init__.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>App Based Structure</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line"> ├── db.py</span><br><span class="line"> ├── main.py</span><br><span class="line"> ├── __init__.py</span><br><span class="line"> ├── source</span><br><span class="line"> ├─auth</span><br><span class="line"> |   ├── models.py</span><br><span class="line"> |   ├── route.py</span><br><span class="line"> |   ├── templates.py</span><br><span class="line"> |   └── __init__.py</span><br><span class="line"> ├─blog</span><br><span class="line"> |   ├── models.py</span><br><span class="line"> |   ├── route.py</span><br><span class="line"> |   ├── templates.py</span><br><span class="line"> |   └── __init__.py</span><br><span class="line"> pip freeze &gt; requirements.txt</span><br><span class="line"> pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Connect-MySQL"><a href="#Connect-MySQL" class="headerlink" title="Connect MySQL"></a>Connect MySQL</h2><p><a href="http://www.pythondoc.com/flask-sqlalchemy/">Flask-sqlalchemy Reference</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setting.py		Some configurations for connecting to the database</span></span><br><span class="line">DIALECT = <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">DRIVER = <span class="string">&#x27;pymysql&#x27;</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">PORT = <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">DATABASE = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;&#123;&#125;+&#123;&#125;://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">  DIALECT, DRIVER, USERNAME, PASSWORD, HOST, PORT, DATABASE</span><br><span class="line">)</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run.py		Read the configurations</span></span><br><span class="line"><span class="keyword">import</span> seetings</span><br><span class="line"><span class="keyword">from</span> project <span class="keyword">import</span> create_app</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = create_app()</span><br><span class="line">    app.config.from_object(seetings.DevelopmentConfig)</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># db.py		Create an instance of SQLAlchemy</span></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_app</span>(<span class="params">app</span>):</span></span><br><span class="line">    <span class="keyword">global</span> db</span><br><span class="line">    db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># project/__init__.py		Pass the Flask instance into the db instance</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">routes</span>(<span class="params">app</span>):</span></span><br><span class="line">    <span class="keyword">from</span> . <span class="keyword">import</span> test</span><br><span class="line">    test.init_app(app)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>():</span></span><br><span class="line">    <span class="keyword">from</span> . <span class="keyword">import</span> db</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    routes(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"><span class="comment"># models.py		Create the modelsViews</span></span><br><span class="line"><span class="keyword">from</span> project.db <span class="keyword">import</span> db</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;car&#x27;</span></span><br><span class="line">    carId = db.Column(db.INTEGER, primary_key=<span class="literal">True</span>)</span><br><span class="line">    carName = db.Column(db.String(<span class="number">10</span>))</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> to_json(self, self.__class__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#	routes.py		Register the Blueprint</span></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_app</span>(<span class="params">app</span>):</span></span><br><span class="line">    app.register_blueprint(test_bp, url_prefix=<span class="string">&#x27;/test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># models/__init__.py		Register the Blueprint</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">test_bp = Blueprint(<span class="string">&#x27;test&#x27;</span>, __name__)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_app</span>(<span class="params">app</span>):</span></span><br><span class="line">    <span class="keyword">from</span> . <span class="keyword">import</span> routes</span><br><span class="line">    routes.init_app(app)</span><br><span class="line">    print(app.url_map)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py		Deploy the data interface</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> test_bp</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Car</span><br><span class="line"><span class="meta">@test_bp.route(<span class="params"><span class="string">&#x27;/data&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, ]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    res = Car.query.get(<span class="number">3</span>)</span><br><span class="line">    print(res.serialize)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>: res.serialize,</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<h3 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h3><ul>
<li><p>ImportError: No module named flask.ext.sqlalchemy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br></pre></td></tr></table></figure>
</li>
<li><p>The query results convert to JSON</p>
<p><a href="">use the Flask-RESTful</a></p>
</li>
</ul>
<h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.w3cschool.cn/flask/">Flask Reference</a></p>
<p><a href="https://github.com/smaIIstars/STA">Case project</a></p>
]]></content>
      <tags>
        <tag>Flask</tag>
        <tag>Flask-RESTful</tag>
        <tag>Python</tag>
        <tag>MySQL</tag>
        <tag>Flask-SQLalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/posts/b132932/</url>
    <content><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p><strong>My blog is built using Hexo.</strong></p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// install the hexo</span></span><br><span class="line">npm install hexo</span><br><span class="line"></span><br><span class="line"><span class="comment">// create the hexo project</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * File Directory Structure</span></span><br><span class="line"><span class="comment"> * ├── _config.yml	:Configuration information for the website</span></span><br><span class="line"><span class="comment"> * ├── package.json	:Dependent files for the project</span></span><br><span class="line"><span class="comment"> * ├── scaffolds		:Template folder</span></span><br><span class="line"><span class="comment"> * ├── source				:A folder to store the resources (Files/folders with names beginning with _ and hidden files</span></span><br><span class="line"><span class="comment"> * |   ├── _posts		 wille be ignored except for &#x27;_posts&#x27; folder)</span></span><br><span class="line"><span class="comment"> * |   └── _drafts</span></span><br><span class="line"><span class="comment"> * └── themes</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="beautify"><a href="#beautify" class="headerlink" title="beautify"></a>beautify</h2><p><strong>I am going to modularize the entire page and describe the configurations of each section separately</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Hexo-layout1.png" alt="Layout1"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Hexo-layout2.png" alt="Layout2"></p>
<h3 id="Abbreviation-Agreement"><a href="#Abbreviation-Agreement" class="headerlink" title="Abbreviation Agreement"></a>Abbreviation Agreement</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Abbreviation</th>
<th style="text-align:center">note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>s_config</em></td>
<td style="text-align:center">site’s config (/hexo/_config.yml)</td>
</tr>
<tr>
<td style="text-align:center"><em>n_config</em></td>
<td style="text-align:center">next’s config (/hexo/themes/next/_config.yml)</td>
</tr>
<tr>
<td style="text-align:center">s_source</td>
<td style="text-align:center">site’s source (/myblog/source)</td>
</tr>
<tr>
<td style="text-align:center">n_layout</td>
<td style="text-align:center">next’s config (/hexo/themes/next/layout)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="The-overall-style"><a href="#The-overall-style" class="headerlink" title="The overall style"></a>The overall style</h3><h4 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h4><p><a href="https://hexo.io/themes/">reference</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">modify s_config:</span></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<h5 id="Schemes"><a href="#Schemes" class="headerlink" title="Schemes"></a>Schemes</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Muse</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Next-Schemes-Muse.png" alt="Muse"></p>
</li>
<li><p>Mist</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Next-Schemes-Mist.png" alt="Mist"></p>
</li>
<li><p>Pisces</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Next-Schemes-Pisces.png" alt="Pisces"></p>
</li>
<li><p>Gemini</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Next-Schemes-Gemini.png" alt="Gemini"></p>
</li>
</ul>
<h5 id="Dark-Mode"><a href="#Dark-Mode" class="headerlink" title="Dark Mode"></a>Dark Mode</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="Basic-Website-Infomation"><a href="#Basic-Website-Infomation" class="headerlink" title="Basic Website Infomation"></a>Basic Website Infomation</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">SmallStars&#x27;s</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">SmallStars</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="Custom-Style"><a href="#Custom-Style" class="headerlink" title="Custom Style"></a>Custom Style</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<h5 id="Background-Image-and-Cursor"><a href="#Background-Image-and-Cursor" class="headerlink" title="Background Image and Cursor"></a>Background Image and Cursor</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s_source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// background image</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  background-image: url(xxx.jpg);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">  <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-origin</span>: content-box;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    background-image: url(xxx.jpg);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cursor</span></span><br><span class="line">  cursor: url(xxx.cur), default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hover cursor</span></span><br><span class="line"><span class="selector-tag">a</span>:hover&#123;</span><br><span class="line">  cursor: url(xxx.cur), default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="ScrollBar"><a href="#ScrollBar" class="headerlink" title="ScrollBar"></a>ScrollBar</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s_source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#535353</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>   : inset <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">background</span>   : <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="GitHub-banner"><a href="#GitHub-banner" class="headerlink" title="GitHub banner"></a>GitHub banner</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/xxx</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure>
<h3 id="Head"><a href="#Head" class="headerlink" title="Head"></a>Head</h3><h3 id="Sidebar"><a href="#Sidebar" class="headerlink" title="Sidebar"></a>Sidebar</h3><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Sidebar.png" alt="Sidebar"></p>
<h4 id="Website-Title"><a href="#Website-Title" class="headerlink" title="Website Title"></a>Website Title</h4><p>Reference the Basic Website Infomation</p>
<h4 id="Menu-Item"><a href="#Menu-Item" class="headerlink" title="Menu Item"></a>Menu Item</h4><ul>
<li><p>Item</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Icon and badges</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="User"><a href="#User" class="headerlink" title="User"></a>User</h5><ul>
<li><p>avatar</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/img1.jpg</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>author: Reference the Basic Website Infomation</p>
</li>
</ul>
<h5 id="site-state"><a href="#site-state" class="headerlink" title="site_state"></a>site_state</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="social"><a href="#social" class="headerlink" title="social"></a>social</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/SmaIIstars</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:smallstars.he@qq.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="Back-to-top-button"><a href="#Back-to-top-button" class="headerlink" title="Back to top button"></a>Back to top button</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h3><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/PostCodeblock.png" alt="PostCodeblock"></p>
<h4 id="Code-Block"><a href="#Code-Block" class="headerlink" title="Code Block"></a>Code Block</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure>
<h4 id="Password"><a href="#Password" class="headerlink" title="Password"></a>Password</h4><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Password.png" alt="Password"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; n_layout</span><br><span class="line">&#x2F;&#x2F; password.swig</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;jquery&#x2F;3.1.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var div &#x3D; $(&#39;.post-body&#39;);</span><br><span class="line">    &#x2F;&#x2F;var toc&#x3D;$(&#39;.post-toc-wrap&#39;)</span><br><span class="line">    var toc&#x3D;$(&#39;.nav&#39;)</span><br><span class="line">    function password() &#123;</span><br><span class="line">        if(&#39;&#123;&#123; page.password &#125;&#125;&#39;)&#123;</span><br><span class="line">            div.remove();</span><br><span class="line">            toc.remove();</span><br><span class="line">            $(&#39;.post-header&#39;).after(</span><br><span class="line">            &#39;&lt;span class&#x3D;&quot;description&quot; style&#x3D;&quot;font-weight: bold;border: none;display: block;&#39;+</span><br><span class="line">            &#39;width: 60%;margin: 0 auto;text-align: center;outline: none;margin-bottom: 40px;resize:none &quot;&gt;&#39;+</span><br><span class="line">            &#39;Please Enter your password and press Enter to read&#39; +</span><br><span class="line">            &#39;&lt;&#x2F;span&gt;&#39; +</span><br><span class="line">            &#39;&lt;div class&#x3D;&quot;qiang&quot; style&#x3D;&quot;height: 100px;width: 60%;margin:0 auto&quot;&gt;&#39; +</span><br><span class="line">            &#39;&lt;input class&#x3D;&quot;password&quot;  type&#x3D;&quot;password&quot; autocomplete&#x3D;&quot;new-password&quot; autofocus&#x3D;&quot;autofocus&quot; value&#x3D;&quot;&quot; style&#x3D;&quot;border-radius: 5px; height: 30px; display: block; margin: 0 auto; width: 95%; box-shadow: none; background-color: transparent; border: 1px solid rgba(255,255,255,0.5); color: rgba(255,255,255,0.5); outline: none; text-align: center;&quot;&#x2F;&gt;&#39; +</span><br><span class="line">            &#39;&lt;&#x2F;div&gt;&#39;)</span><br><span class="line"></span><br><span class="line">            document.onclick &#x3D; function (event) &#123;</span><br><span class="line">                var e &#x3D; event || window.event;</span><br><span class="line">                var elem &#x3D; e.srcElement || e.target;</span><br><span class="line"></span><br><span class="line">                while (elem) &#123;</span><br><span class="line">                    if (elem !&#x3D; document) &#123;</span><br><span class="line">                        if (elem.className &#x3D;&#x3D; &quot;password&quot;) &#123;</span><br><span class="line">                            return;</span><br><span class="line">                        &#125;</span><br><span class="line">                        elem &#x3D; elem.parentNode;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $(document).keyup(function(event)&#123;</span><br><span class="line">                if(event.keyCode &#x3D;&#x3D;13&amp;&amp;$(&#39;.password&#39;).length&gt;0)&#123;</span><br><span class="line">                    if ($(&#39;.password&#39;).val() &#x3D;&#x3D; &#39;&#123;&#123; page.password &#125;&#125;&#39;) &#123;</span><br><span class="line"></span><br><span class="line">                        (div).appendTo($(&quot;.post-header&quot;))</span><br><span class="line"></span><br><span class="line">                        toc.appendTo($(&quot;.post-toc&quot;))</span><br><span class="line">                        var doms &#x3D;  document.getElementsByClassName(&quot;nav-child&quot;);</span><br><span class="line">                        for(var i &#x3D; 0; i &lt; doms.length; i++)&#123;</span><br><span class="line">                            doms[i].style.display&#x3D;&quot;block&quot;;　　</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        $(&quot;.description&quot;).remove();</span><br><span class="line">                        $(&quot;.qiang&quot;).remove();</span><br><span class="line">                        $(&quot;.password&quot;).remove();</span><br><span class="line"></span><br><span class="line">                        $(&quot;.post-block&quot;).css(&#123;opacity:1&#125;);</span><br><span class="line">                        $(&quot;.post-header&quot;).css(&#123;opacity:1&#125;);</span><br><span class="line">                        $(&quot;.post-body&quot;).css(&#123;opacity:1&#125;);</span><br><span class="line">                        $(&quot;.pagination&quot;).css(&#123;opacity:1&#125;);</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        alert(&quot;对不起，密码输入错误。&quot;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    password();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; n_layout</span><br><span class="line">&lt;main class&#x3D;&quot;main&quot;&gt;</span><br><span class="line">  ......</span><br><span class="line">  &#123;% include &#39;password.swig&#39; %&#125;</span><br><span class="line">&lt;&#x2F;main&gt;</span><br></pre></td></tr></table></figure>
<p>Add the password in the beginning of article</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">password: xxx</span><br></pre></td></tr></table></figure>
<h4 id="PostEnd"><a href="#PostEnd" class="headerlink" title="PostEnd"></a>PostEnd</h4><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/PostEnd.png" alt="PostEnd"></p>
<h5 id="The-end-of-the-post"><a href="#The-end-of-the-post" class="headerlink" title="The end of the post"></a>The end of the post</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;passage-end-tag.swig</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">  	&lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;</span><br><span class="line">  		-------------The end of this article, thanks for reading-------------</span><br><span class="line">  	&lt;&#x2F;div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">  &#123;% include &#39;passage-end-tag.swig&#39; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<h5 id="Donate"><a href="#Donate" class="headerlink" title="Donate"></a>Donate</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">xxx.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">xxx.png</span></span><br></pre></td></tr></table></figure>
<h5 id="End-tag’s-icons"><a href="#End-tag’s-icons" class="headerlink" title="End tag’s icons"></a>End tag’s icons</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Footer.png" alt="Footer"></p>
<h4 id="Icon-between-year-and-copyright-info"><a href="#Icon-between-year-and-copyright-info" class="headerlink" title="Icon between year and copyright info"></a>Icon between year and copyright info</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">icon:</span></span><br><span class="line">	<span class="comment"># The heart icon in the middle</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span></span><br><span class="line">  <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br></pre></td></tr></table></figure>
<h4 id="Set-the-elapsed-time-of-the-website"><a href="#Set-the-elapsed-time-of-the-website" class="headerlink" title="Set the elapsed time of the website"></a>Set the elapsed time of the website</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- themes/next/layout/_partials/footer.swig --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>Loading the days...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>Loading the time...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> grt = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;12/16/2020 00:00:00&quot;</span>); <span class="comment">// Change the time of your website or site launch</span></span></span><br><span class="line">    now.setTime(now.getTime() + 250);</span><br><span class="line">    days = (now - grt) / 1000 / 60 / 60 / 24;</span><br><span class="line"><span class="javascript">    dnum = <span class="built_in">Math</span>.floor(days);</span></span><br><span class="line">    hours = (now - grt) / 1000 / 60 / 60 - 24 * dnum;</span><br><span class="line"><span class="javascript">    hnum = <span class="built_in">Math</span>.floor(hours);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">String</span>(hnum).length == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">      hnum = <span class="string">&quot;0&quot;</span> + hnum;</span></span><br><span class="line">    &#125;</span><br><span class="line">    minutes = (now - grt) / 1000 / 60 - 24 * 60 * dnum - 60 * hnum;</span><br><span class="line"><span class="javascript">    mnum = <span class="built_in">Math</span>.floor(minutes);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">String</span>(mnum).length == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">      mnum = <span class="string">&quot;0&quot;</span> + mnum;</span></span><br><span class="line">    &#125;</span><br><span class="line">    seconds =</span><br><span class="line">      (now - grt) / 1000 - 24 * 60 * 60 * dnum - 60 * 60 * hnum - 60 * mnum;</span><br><span class="line"><span class="javascript">    snum = <span class="built_in">Math</span>.round(seconds);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">String</span>(snum).length == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">      snum = <span class="string">&quot;0&quot;</span> + snum;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;timeDate&quot;</span>).innerHTML =</span></span><br><span class="line"><span class="javascript">      <span class="string">&quot;The site has been running safely for &quot;</span> + dnum + <span class="string">&quot; days &quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;times&quot;</span>).innerHTML =</span></span><br><span class="line"><span class="javascript">      hnum + <span class="string">&quot; hours &quot;</span> + mnum + <span class="string">&quot; minutes &quot;</span> + snum + <span class="string">&quot; seconds&quot;</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>, <span class="number">250</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Remove-the-‘Powered-by-Hexo-amp-NexT-Pisces‘"><a href="#Remove-the-‘Powered-by-Hexo-amp-NexT-Pisces‘" class="headerlink" title="Remove the ‘Powered by Hexo &amp; NexT.Pisces‘"></a>Remove the ‘Powered by <a href="https://hexo.io/">Hexo</a> &amp; <a href="https://pisces.theme-next.org/">NexT.Pisces</a>‘</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line"><span class="attr">powered:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="busuanzi-count"><a href="#busuanzi-count" class="headerlink" title="busuanzi_count"></a>busuanzi_count</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>
<h3 id="Thrid-Party"><a href="#Thrid-Party" class="headerlink" title="Thrid Party"></a>Thrid Party</h3><h4 id="Small-features"><a href="#Small-features" class="headerlink" title="Small features"></a>Small features</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<h4 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure>
<h4 id="Pace"><a href="#Pace" class="headerlink" title="Pace"></a>Pace</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure>
<h4 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h4><ol>
<li><p><a href="https://www.leancloud.cn/">Register</a></p>
</li>
<li><p>Storage ===&gt; Objects</p>
<p>Create class Comment (no restrictions)</p>
</li>
<li><p>Modify the files</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">en</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Change the default plugins</span><br><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">xxx.md</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Markdown</span></span><br><span class="line"><span class="attr">abbrlink:</span> <span class="string">b132932</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-12-22 14:31:25</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">11</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig</span><br><span class="line"></span><br><span class="line">&#123;%- if post.sticky &gt; 0 %&#125; &#x3D;&#x3D;&#x3D;&gt; &#123;%- if post.top &gt; 0 %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Abbrlink"><a href="#Abbrlink" class="headerlink" title="Abbrlink"></a>Abbrlink</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-abbrlink</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<h4 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-excerpt</span></span><br><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="Chat"><a href="#Chat" class="headerlink" title="Chat"></a>Chat</h4><ol>
<li><p><a href="http://dashboard.daovoice.io/get-started?invite_code=3a4f5f60">Register</a></p>
</li>
<li><p>Settings =&gt; App Settings =&gt; Install to site</p>
</li>
<li><p>Modify the files</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;head&#x2F;head.swig</span><br><span class="line"></span><br><span class="line">&#123;% if theme.daovoice.enable %&#125;</span><br><span class="line">  &#123;% if theme.daovoice.daovoice_app_id %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      (function (i, s, o, g, r, a, m) &#123;</span><br><span class="line">        i[&quot;DaoVoiceObject&quot;] &#x3D; r;</span><br><span class="line">        (i[r] &#x3D;</span><br><span class="line">          i[r] ||</span><br><span class="line">          function () &#123;</span><br><span class="line">            (i[r].q &#x3D; i[r].q || []).push(arguments);</span><br><span class="line">          &#125;),</span><br><span class="line">          (i[r].l &#x3D; 1 * new Date());</span><br><span class="line">        (a &#x3D; s.createElement(o)), (m &#x3D; s.getElementsByTagName(o)[0]);</span><br><span class="line">        a.async &#x3D; 1;</span><br><span class="line">        a.src &#x3D; g;</span><br><span class="line">        a.charset &#x3D; &quot;utf-8&quot;;</span><br><span class="line">        m.parentNode.insertBefore(a, m);</span><br><span class="line">      &#125;)(</span><br><span class="line">        window,</span><br><span class="line">        document,</span><br><span class="line">        &quot;script&quot;,</span><br><span class="line">        (&quot;https:&quot; &#x3D;&#x3D; document.location.protocol ? &quot;https:&quot; : &quot;http:&quot;) +</span><br><span class="line">          &quot;&#x2F;&#x2F;widget.daovoice.io&#x2F;widget&#x2F;&#123;&#123;theme.daovoice.daovoice_app_id&#125;&#125;.js&quot;,</span><br><span class="line">        &quot;daovoice&quot;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      daovoice(&#39;init&#39;, &#123;</span><br><span class="line">        app_id: &quot;&#123;&#123;theme.daovoice.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">      &#125;);</span><br><span class="line">      daovoice(&#39;update&#39;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Online contact</span></span><br><span class="line"><span class="attr">daovoice:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">daovoice_app_id:</span> <span class="string">appId</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h4><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://hexo.io/zh-cn/">Hexo Official website</a></p>
<p><a href="https://theme-next.js.org/">Next Official Website</a></p>
<p><a href="https://blog.csdn.net/weixin_39345384/article/details/80785373">Hexo 框架下用 NexT(v7.0+)主题美化博客</a></p>
<p><a href="https://blog.csdn.net/as480133937/article/details/100138838/">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/posts/c24675b4/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p><a href="https://blog.csdn.net/weixin_38239039/article/details/79629984">reference</a></p>
<h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><h3 id="Access-denied-for-user-‘root’-’localhost’-using-password-YES"><a href="#Access-denied-for-user-‘root’-’localhost’-using-password-YES" class="headerlink" title="Access denied for user ‘root’@’localhost’ (using password: YES)"></a>Access denied for user ‘root’@’localhost’ (using password: YES)</h3><p><a href="https://blog.csdn.net/zoucui/article/details/96996554">reference</a></p>
<ol>
<li><p>Add ‘skip-grant-tables’ to ‘my.ini’ file in MySQL’s directory</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/MySQL/Addskip-grant-tables.png" alt=""></p>
</li>
<li><p>Reload the MySQL’s service</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>Login MySQL without password and set the new password</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">&#x2F;&#x2F; Don&#39;t need to enter the password</span><br></pre></td></tr></table></figure>
</li>
<li><p>Change the password (In the higher version, the password filed is changed to authentication_string)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># lower version</span><br><span class="line">update mysql.user set password&#x3D;&#39;123&#39; where user&#x3D;&#39;root&#39;;</span><br><span class="line">-- higher version</span><br><span class="line">update mysql.user set authentication_string&#x3D;&#39;123&#39; where user&#x3D;&#39;root&#39;;</span><br><span class="line">&#x2F;*password -&gt; authentication_string*&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Refresh the database</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Delete the ‘skip-grant-tables’</p>
</li>
<li><p>Reload the MySQL’s service</p>
</li>
</ol>
<h3 id="Server-returns-invalid-timezone-Go-to-‘Advanced’-tab-and-set-‘serverTimezone’-prope"><a href="#Server-returns-invalid-timezone-Go-to-‘Advanced’-tab-and-set-‘serverTimezone’-prope" class="headerlink" title="Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezone’ prope"></a>Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezone’ prope</h3><p><a href="https://blog.csdn.net/liuqiker/article/details/102455077">reference</a></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/MySQL/SetGlobalTimeZone.png" alt=""></p>
<h1 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h1><h2 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h2><p><a href="http://www.navicat.com.cn/navicat-15-highlights/">official website</a></p>
<h2 id="Crack"><a href="#Crack" class="headerlink" title="Crack"></a>Crack</h2><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/MySQL/NavicatActive1.png" alt="NavicatActive1"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/MySQL/NavicatActive2.png" alt="NavicatActive2"></p>
<h2 id="Issue-1"><a href="#Issue-1" class="headerlink" title="Issue"></a>Issue</h2><h3 id="rsa-public-key-not-find"><a href="#rsa-public-key-not-find" class="headerlink" title="rsa public key not find"></a>rsa public key not find</h3><p>copy the keygen to the installation directory and run as an administrator</p>
<h3 id="No-All-Pattern-Found！File-Already-Patched"><a href="#No-All-Pattern-Found！File-Already-Patched" class="headerlink" title="No All Pattern Found！File Already Patched?"></a>No All Pattern Found！File Already Patched?</h3><ol>
<li>Click the installation file to re install Navicat</li>
<li>First run the keygen, and then open Navicat</li>
</ol>
<h3 id="Navicat-program-flutters-back-or-no-respond"><a href="#Navicat-program-flutters-back-or-no-respond" class="headerlink" title="Navicat program flutters back or no respond"></a>Navicat program flutters back or no respond</h3><p>Close the netease youdao dictionary</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>Interview</title>
    <url>/posts/4decbe97/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>字符串（String）</li>
<li>数值（Number）</li>
<li>布尔型（Boolean）</li>
<li>空（Null）</li>
<li>未定义（Undefined）</li>
<li>对象（Object）</li>
</ul>
<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><ol>
<li>push：在最后压入</li>
<li>pop：弹出最后一位</li>
<li>shift：删除最后一位</li>
<li>unshift：在开头压入</li>
<li>join：拼接</li>
<li>sort：排序</li>
<li>concat：和参数在原本的数组上创建新的副本并返回</li>
<li>reverse：翻转</li>
<li>splice：删除、插入、替换</li>
<li>slice：截取</li>
<li>indexOf：查询下标</li>
<li>forEach：遍历</li>
<li>map：映射</li>
<li>every：判断每个值是否满足条件</li>
<li>some：判断是否存在满足条件的值</li>
<li>reduce：值聚合</li>
</ol>
<h2 id="JS-深拷贝的原因和方法"><a href="#JS-深拷贝的原因和方法" class="headerlink" title="JS 深拷贝的原因和方法"></a>JS 深拷贝的原因和方法</h2><blockquote>
<p>原因</p>
<blockquote>
<p>基本数据类型：在栈中直接赋予值引用数据类型</p>
<p>对象和函数：值在堆当中，赋予地址</p>
</blockquote>
<p>方法</p>
</blockquote>
<h2 id="操作-DOM-的方法"><a href="#操作-DOM-的方法" class="headerlink" title="操作 DOM 的方法"></a>操作 DOM 的方法</h2><h2 id="JS-原型和原型链"><a href="#JS-原型和原型链" class="headerlink" title="JS 原型和原型链"></a>JS 原型和原型链</h2><h2 id="函数执行过程"><a href="#函数执行过程" class="headerlink" title="函数执行过程"></a>函数执行过程</h2><h2 id="async-和-await-promise"><a href="#async-和-await-promise" class="headerlink" title="async 和 await /promise"></a>async 和 await /promise</h2><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><h2 id="Bom-和-Dom-区别"><a href="#Bom-和-Dom-区别" class="headerlink" title="Bom 和 Dom 区别"></a>Bom 和 Dom 区别</h2><blockquote>
<p>Bom： browser Object Model</p>
<ul>
<li>与浏览器相关：描述与浏览器相关操作的方法和接口</li>
<li>无标准</li>
<li>根本对象是 window</li>
</ul>
<p>Dom：Document Object Model</p>
<ul>
<li>与 Html 文档相关</li>
<li>W3C 标准</li>
<li>根本对象是 window.doucment</li>
</ul>
</blockquote>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p><a href="https://segmentfault.com/a/1190000016278115">参考文献</a></p>
<h2 id="代码题"><a href="#代码题" class="headerlink" title="代码题"></a>代码题</h2><ul>
<li>斐波那契数列</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  number -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (number &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> f = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> g = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (number--) &#123;</span><br><span class="line">    g = g + f;</span><br><span class="line">    f = g - f;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib2</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fib2(num - <span class="number">1</span>) + fib2(num - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大数(100超位)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bigNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.min = [];</span><br><span class="line">  <span class="built_in">this</span>.max = [];</span><br><span class="line">  <span class="built_in">this</span>.res = [];</span><br><span class="line"></span><br><span class="line">  bigNum.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str1, str2;</span><br><span class="line">    <span class="keyword">let</span> temp;</span><br><span class="line">    <span class="keyword">let</span> addFlag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    str1 = a.split(<span class="string">&quot;&quot;</span>).reverse();</span><br><span class="line">    str2 = b.split(<span class="string">&quot;&quot;</span>).reverse();</span><br><span class="line">    <span class="comment">// console.log(str1);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(a) &gt; <span class="built_in">parseInt</span>(b)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.max = str1;</span><br><span class="line">      <span class="built_in">this</span>.min = str2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.max = str2;</span><br><span class="line">      <span class="built_in">this</span>.min = str1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> minLength = <span class="built_in">this</span>.min.length;</span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="built_in">this</span>.max.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxLength; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; minLength) &#123;</span><br><span class="line">        temp = <span class="built_in">parseInt</span>(<span class="built_in">this</span>.min[i]) + <span class="built_in">parseInt</span>(<span class="built_in">this</span>.max[i]) + addFlag;</span><br><span class="line">        <span class="comment">// console.log(temp);</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        temp = <span class="built_in">parseInt</span>(<span class="built_in">this</span>.max[i]) + addFlag;</span><br><span class="line">        <span class="comment">// console.log(temp);</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">parseInt</span>(temp) &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.res[i] = temp % <span class="number">10</span>;</span><br><span class="line">        addFlag = <span class="built_in">parseInt</span>(temp / <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == maxLength - <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="built_in">this</span>.res[maxLength] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.res[i] = temp;</span><br><span class="line">        addFlag = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(this.max);</span></span><br><span class="line">    <span class="comment">// console.log(this.min);</span></span><br><span class="line">    <span class="comment">// console.log(this.res);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.res.reverse();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  bigNum.prototype.toResString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rstr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="built_in">this</span>.res.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      rstr += <span class="built_in">this</span>.res[i].toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rstr;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib1</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="keyword">new</span> bigNum();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; index; i++) &#123;</span><br><span class="line">    sum.add(a, b);</span><br><span class="line">    a = b;</span><br><span class="line">    b = sum.toResString();</span><br><span class="line">    <span class="comment">// console.log(sum.res);</span></span><br><span class="line">    <span class="comment">// console.log(a);</span></span><br><span class="line">    <span class="comment">// console.log(i);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fib1(<span class="number">100</span>).toResString());</span><br></pre></td></tr></table></figure>
<ul>
<li>排序</li>
<li>去重</li>
<li>统计字符串中最多字符</li>
</ul>
<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="var、let、const"><a href="#var、let、const" class="headerlink" title="var、let、const"></a>var、let、const</h2><ul>
<li>相当于全局变量和局部变量</li>
<li>var 没有块级作用域且可以重复定义</li>
<li>let 有块级作用域 (if/for)，可以不初始化</li>
<li>const 有块级作用域 (if/for)，必须初始化</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es6继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">//构造函数，里面写上对象的属性</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = props.name || <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//方法写在后面</span></span><br><span class="line">  <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//父类共有的方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; will eat pests.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props, myAttribute</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//props是继承过来的属性，myAttribute是自己的属性</span></span><br><span class="line">    <span class="comment">//调用实现父类的构造函数</span></span><br><span class="line">    <span class="built_in">super</span>(props); <span class="comment">//相当于获得父类的this指向</span></span><br><span class="line">    <span class="built_in">this</span>.type = props.type || <span class="string">&quot;Unknown&quot;</span>; <span class="comment">//父类的属性，也可写在父类中</span></span><br><span class="line">    <span class="built_in">this</span>.attr = myAttribute; <span class="comment">//自己的私有属性</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">fly</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//自己私有的方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; are friendly to people.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">myattr</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//自己私有的方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.type + <span class="string">&quot;---&quot;</span> + <span class="built_in">this</span>.attr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过new实例化</span></span><br><span class="line"><span class="keyword">var</span> myBird = <span class="keyword">new</span> Bird(</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;小燕子&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;Egg animal&quot;</span>, <span class="comment">//卵生动物</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Bird class&quot;</span></span><br><span class="line">);</span><br><span class="line">myBird.eat();</span><br><span class="line">myBird.fly();</span><br><span class="line">myBird.myattr();</span><br></pre></td></tr></table></figure>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h2><ol>
<li>translate</li>
<li>flex</li>
<li>padding、margin</li>
</ol>
<h2 id="px、em、rem-区别"><a href="#px、em、rem-区别" class="headerlink" title="px、em、rem 区别"></a>px、em、rem 区别</h2><ul>
<li>px：像素单位</li>
<li>em：相对于当前文本的字体尺寸，默认为浏览器默认字体尺寸，会继承父元素的字体大小</li>
<li>rem：相对于 HTML 根元素</li>
</ul>
<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><h2 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h2><h2 id="权重顺序"><a href="#权重顺序" class="headerlink" title="权重顺序"></a>权重顺序</h2><h2 id="position-三种属性"><a href="#position-三种属性" class="headerlink" title="position 三种属性"></a>position 三种属性</h2><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="元素类型"><a href="#元素类型" class="headerlink" title="元素类型"></a>元素类型</h2><ul>
<li>块元素</li>
<li>行内块</li>
<li>置换元素</li>
</ul>
<h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><a href="https://www.cnblogs.com/smallstars/p/13172926.html">生命周期博客</a></p>
<h2 id="ref-使用在-Dom-和-组件-上有什么区别？"><a href="#ref-使用在-Dom-和-组件-上有什么区别？" class="headerlink" title="ref 使用在 Dom 和 组件 上有什么区别？"></a>ref 使用在 Dom 和 组件 上有什么区别？</h2><ul>
<li>Dom：获拿到的就是 Dom 元素</li>
<li>组件上：拿到的是一个组件</li>
</ul>
<h2 id="Vue-有哪些指令"><a href="#Vue-有哪些指令" class="headerlink" title="Vue 有哪些指令"></a>Vue 有哪些指令</h2><ol>
<li>v-text</li>
<li>v-html</li>
<li>v-pre</li>
<li>v-cloak</li>
<li>v-once</li>
<li>v-if、v-else-if、v-else</li>
<li>v-show</li>
<li>v-for</li>
<li>v-bind</li>
<li>v-model</li>
<li>v-on</li>
</ol>
<h2 id="v-show-和-v-if-的区别"><a href="#v-show-和-v-if-的区别" class="headerlink" title="v-show 和 v-if 的区别"></a>v-show 和 v-if 的区别</h2><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h2 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h2><h3 id="权限判断"><a href="#权限判断" class="headerlink" title="权限判断"></a>权限判断</h3><ol>
<li>token</li>
<li>请求拦截</li>
<li>导航守卫</li>
</ol>
<h2 id="组件通信方法"><a href="#组件通信方法" class="headerlink" title="组件通信方法"></a>组件通信方法</h2><h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><h2 id="computes-和-watch"><a href="#computes-和-watch" class="headerlink" title="computes 和 watch"></a>computes 和 watch</h2><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><ul>
<li>第一范式：每列属性具有原子性（不可再分）</li>
<li>第二范式：每一个元组的唯一性，不存在部分依赖（所有属性依赖一个主键）</li>
<li>第三范式：每一个元组的任何字段不能有其他的候选键（降低数据冗余性）</li>
</ul>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><h2 id="MVC（Model、View、Controller）"><a href="#MVC（Model、View、Controller）" class="headerlink" title="MVC（Model、View、Controller）"></a>MVC（Model、View、Controller）</h2><p><img data-src="https://upload-images.jianshu.io/upload_images/2002187-4d82bf5244e9d66e.png?imageMogr2/auto-orient/strip|imageView2/2/format/webp" alt=""></p>
<h2 id="MVVM（Model、View、ViewModel）"><a href="#MVVM（Model、View、ViewModel）" class="headerlink" title="MVVM（Model、View、ViewModel）"></a>MVVM（Model、View、ViewModel）</h2><p>把 Controller 的数据和逻辑处理部分从中抽离出来，专门使用 ViewModel 进行管理，再进行数据绑定即可</p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/2002187-ddcaae06ec00dadb.png?imageMogr2/auto-orient/strip|imageView2/2/w/673/format/webp" alt=""></p>
<h2 id="浏览器适配"><a href="#浏览器适配" class="headerlink" title="浏览器适配"></a>浏览器适配</h2><h2 id="分辨率适配"><a href="#分辨率适配" class="headerlink" title="分辨率适配"></a>分辨率适配</h2><h2 id="强缓存和协商缓存"><a href="#强缓存和协商缓存" class="headerlink" title="强缓存和协商缓存"></a>强缓存和协商缓存</h2><h2 id="map-和-forEach"><a href="#map-和-forEach" class="headerlink" title="map 和 forEach"></a>map 和 forEach</h2><h2 id="Http-和-Https"><a href="#Http-和-Https" class="headerlink" title="Http 和 Https"></a>Http 和 Https</h2><h2 id="cookies、sessionStorage-和-localStorage-解释及区别"><a href="#cookies、sessionStorage-和-localStorage-解释及区别" class="headerlink" title="cookies、sessionStorage 和 localStorage 解释及区别"></a>cookies、sessionStorage 和 localStorage 解释及区别</h2><h2 id="怎么判断一个变量是对象还是数组"><a href="#怎么判断一个变量是对象还是数组" class="headerlink" title="怎么判断一个变量是对象还是数组"></a>怎么判断一个变量是对象还是数组</h2><h2 id="Vue-如何阻止事件冒泡（总是阻止和只阻止一次）"><a href="#Vue-如何阻止事件冒泡（总是阻止和只阻止一次）" class="headerlink" title="Vue 如何阻止事件冒泡（总是阻止和只阻止一次）"></a>Vue 如何阻止事件冒泡（总是阻止和只阻止一次）</h2><h2 id="get-和-post-区别"><a href="#get-和-post-区别" class="headerlink" title="get 和 post 区别"></a>get 和 post 区别</h2><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><h1 id="Byte-Dance"><a href="#Byte-Dance" class="headerlink" title="Byte Dance"></a>Byte Dance</h1><h2 id="输入-url-到展示出页面的过程"><a href="#输入-url-到展示出页面的过程" class="headerlink" title="输入 url 到展示出页面的过程"></a>输入 url 到展示出页面的过程</h2><ul>
<li><p>输入网址：历史记录、书签等地方进行匹配</p>
</li>
<li><p>DNS 解析：hosts =&gt; 本地 DNS 服务器 =&gt; DNS 根服务器 =&gt; 域服务器 =&gt; 存储映射</p>
</li>
<li><p>建立 TCP 连接：TCP 三次握手 四次挥手</p>
<ul>
<li>TCP 三次握手:ACK(Acknowledgement),SYN(Synchronous),seq(Sequence number),ack(Acknowledge number)</li>
</ul>
<pre class="mermaid">  sequenceDiagram
    participant c as Client
    participant s as Server

    c->>s:SYN=1,seq=x
    Note right of c:I like you
    s->>c:SYN=1,ACK=1,ack=x+1,seq=y
    Note left of s:me too
    c->>s:ACK=1,ack=y+1,seq=z
    Note right of c:Great! Let's get together</pre>

<ul>
<li>四次挥手</li>
</ul>
<pre class="mermaid">  sequenceDiagram
    participant c as Client
    participant s as Server

    c->>s:FIN=1,seq=x
    Note right of c:I want close
    Note left of s:OK, I got it, let me get ready
    s->>c:ACK=1,ack=x+1,seq=y

    s-->c:Data still can transferred during this period

    s->>c:ACK=1,ack-x+1,seq=z
    Note left of s:Okay, I'm ready
    Note right of c:OK
    c->>s:ACK=1,ack=z+1,seq=w</pre>
</li>
<li><p>客户端发送 HTTP (HTTPS) 请求</p>
<ul>
<li><p>HTTP (明文传输)</p>
<ul>
<li>1.0：<strong>非持久连接</strong> 每个 TCP 只能串行 HTTP 请求，每次请求都会重新发起一个新的 TCP 连接</li>
<li>1.1：<strong>持久连接</strong> 每个 TCP 也只能串行 HTTP 请求，最大连接数为 6，模拟并行请求</li>
<li>2.0：将多个 TCP 连接合并发送，发送的时候可以乱序发送，接收后根据帧头部标识符重组</li>
</ul>
</li>
<li><p>HTTPS</p>
<ul>
<li><p>加密</p>
<ul>
<li><p>对称加密</p>
<p>Client &amp; Server 使用同一种加密</p>
<pre class="mermaid">        sequenceDiagram
    participant c as Client
    participant s as Server

    c-->s: Use the same key
    c-->s: Client send data to Server
    c->>c:data = encryptFunction(key, data)
    c->>s:data
    s->>s:decryptFunction(key,data)

    c-->s: Server send data to Client
    s->>s:data = encryptFunction(key, data)
    s->>c:data
    c->>c:decryptFunction(key,data)</pre>
</li>
<li><p>非对称加密</p>
<pre class="mermaid">        sequenceDiagram
    participant c as Client(pk1,sk1)
    participant s as Server(pk2,sk2)

    c-->s:Everyone knows the public key
    c-->s:Only the owner konws the private key
    c->>s:request the public key
    s->>c:pk2
    Note left of c:Client get the pk2
    c->>c:key = encryptFunction(pk2,key)
    Note left of c:Use the pk2 encrypt a key
    c->>s:key
    s->>s:key = decryptFunction(pk2,key)
    Note right of s:Use the pk2 decrypt the key
    s->>c:OK
    c-->s:Exchange the data</pre>

<p>Hacker Attach</p>
<pre class="mermaid">        sequenceDiagram
    participant c as Client(pk1,sk1)
    participant h as Hacker(pk3,sk3)
    participant s as Server(pk2,sk2)

    Note over c,s: Hacking
    c->>+h: request public key
    h->>-c: pk3
    h->>+s: request public key
    s->>-h: pk2

    Note over c,s: Hacker get the pk2 and Client get the hacker's pk3
    c->>+h: Agreement key eg: key1
    h->>-c: OK
    h->>+s: Agreement key eg: key1
    s->>-h: OK

    Note over c,s: Hacker get the agreement key, and can decrypt encrypted content
    c->>+h: send data
    h->>-s: send data
    s->>+h: send data
    h->>-c: send data</pre>
</li>
</ul>
</li>
<li><p>CA (Certificate Authority)验证: Prevent the public key obtained by the client from being fake</p>
</li>
<li><p>对称+非对称+CA</p>
<pre class="mermaid">      sequenceDiagram
    participant c as Client(pk1,sk1)
    participant h as Hacker(pk3,sk3)
    participant s as Server(pk2,sk2)
    participant ca as Certificate Authority(cpk,csk)

    Note right of ca:Generate certificate
    ca->>ca: license = f(csk,pk)
    c->>c: The certificate is embedded in the operating system
    h->>h: The certificate is embedded in the operating system
    s->>s: Use certificate when deploying
    c-->ca: Issue certificate, All have the certifficate

    c->>s: Request the certificate
    s->>c: Send the certificate
    c->>c: Use the pck decrypt the pk2
    Note left of h:Hacker don't know the csk
    c->>h: Encrypt data</pre>
</li>
<li><p>协商 key 的具体过程</p>
<pre class="mermaid">      sequenceDiagram
    participant c as Client(pk1,sk1)
    participant s as Server(pk2,sk2)

    c->>s: ①. I support the SSL version, algorithm, seq, etc.
    s->>c: ②. Use the SSL x.x.x and xxx algorithm, ACK, seq, license etc.
    c->>c: ③. Check the license
    c->>s: ④. seq, a = hash(①,②), etc.
    s->>s: ⑤. hash(①,②) === a ? key = SSLalgorithm(①,②,③) : error
    s->>c: ⑥. seq, b = hash(①,②,④), etc.
    c->>c: ⑦. hash(①,②,④) === b? key = SSLalgorithm(①,②,③) : error</pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>服务器处理请求</p>
</li>
<li><p>服务器相应请求</p>
<ul>
<li><p>状态码</p>
<blockquote>
<p>2xx：请求成功</p>
<blockquote>
<p>200：成功返回，正常抓取</p>
<p>204：成功处理，但未返回任何数据</p>
<p>206：部分请求成功</p>
<p>eg:</p>
<ol>
<li>浏览器要下载文件，先弹窗询问用户</li>
<li>在线视频，边下边看</li>
<li>断点续传</li>
</ol>
</blockquote>
<p>3xx：重定向</p>
<blockquote>
<p>301：<strong>永久</strong>重定向</p>
<p>302：<strong>临时</strong>重定向</p>
<p>304：资源未更新，不用再抓取，使用缓存即可</p>
</blockquote>
<p>4xx：请求出错</p>
<blockquote>
<p>400：请求语法错误</p>
<p>401：用户无权限，需要身份验证</p>
<p>403：服务器拒绝请求</p>
<p>404：资源不存在</p>
<p>410：资源永久删除</p>
</blockquote>
<p>5xx：服务器错误</p>
<blockquote>
<p>500：服务器内部错误 (后端报错)</p>
<p>503：服务器超载，暂时无法访问</p>
<p>505：web 不支持此 HTTP 协议版本</p>
</blockquote>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="OSI-Open-System-Interconnect"><a href="#OSI-Open-System-Interconnect" class="headerlink" title="OSI(Open System Interconnect)"></a>OSI(Open System Interconnect)</h2><ul>
<li><p>七层模型</p>
<p>|    OSI     |         Introduction         |<br>| :————: | :—————————————: |<br>|   应用层   |      为应用程序提供服务      |<br>|   表示层   |      数据格式转化和加密      |<br>|   会话层   |     建立、管理和维护会话     |<br>|   传输层   | 建立、管理和维护端到端的连接 |<br>|   网络层   |      IP 选择和路由选择       |<br>| 数据链路层 |    提供介质访问和链路管理    |<br>|   物理层   |           物理设备           |</p>
</li>
<li><p>五层模型</p>
<p>|    OSI     |       Introduction       |<br>| :————: | :———————————: |<br>|   应用层   |          应用层          |<br>|   传输层   |     四层交换机、路由     |<br>|   网络层   |    路由器、三层交换机    |<br>| 数据链路层 | 网桥、以太网交换机、网卡 |<br>|   物理层   |  中继器、集线器、双绞线  |</p>
</li>
</ul>
<h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><ul>
<li>子网掩码的 1、0 是连续的(未明确规定，但强烈建议，可以避免出现某些未知错误)</li>
<li>左边 1 的数量是网络位的长度</li>
<li>右边 0 的数量是主机位的长度</li>
<li>/xx: 表示 1 的数量(192.168.1.0/26 ==&gt; 子网掩码为 255.255.255.192 (26 个 1))</li>
</ul>
<p><a href="https://mp.weixin.qq.com/s/jAITB4o1nnO5M2wt0hDqjw">案例</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ip:				 <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">26</span>			<span class="number">11000000</span> <span class="number">10101000</span> <span class="number">00000001</span> <span class="number">00</span> <span class="number">000000</span></span><br><span class="line">ip:				 <span class="number">192.168</span><span class="number">.1</span><span class="number">.64</span>/<span class="number">26</span>		<span class="number">11000000</span> <span class="number">10101000</span> <span class="number">00000001</span> <span class="number">01</span> <span class="number">000000</span></span><br><span class="line">ip:				 <span class="number">192.168</span><span class="number">.1</span><span class="number">.128</span>/<span class="number">26</span>		<span class="number">11000000</span> <span class="number">10101000</span> <span class="number">00000001</span> <span class="number">10</span> <span class="number">000000</span></span><br><span class="line">ip:				 <span class="number">192.168</span><span class="number">.1</span><span class="number">.192</span>/<span class="number">26</span>		<span class="number">11000000</span> <span class="number">10101000</span> <span class="number">00000001</span> <span class="number">11</span> <span class="number">000000</span></span><br><span class="line">子网掩码:		  <span class="number">255.255</span><span class="number">.255</span><span class="number">.192</span>		 <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11</span> <span class="number">000000</span></span><br><span class="line"></span><br><span class="line">进行 &amp; 运算 在同一个网段下就可以直接通信</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.192</span>/<span class="number">26</span> 和 <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">26</span>		  <span class="literal">false</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.200</span>/<span class="number">26</span> 和 <span class="number">192.168</span><span class="number">.1</span><span class="number">.199</span>/<span class="number">26</span> 	<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="“1”-“2”-“3”-map-parseInt-what-amp-why"><a href="#“1”-“2”-“3”-map-parseInt-what-amp-why" class="headerlink" title="[“1”, “2”, “3”].map(parseInt) what &amp; why?"></a>[“1”, “2”, “3”].map(parseInt) what &amp; why?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array&lt;string&gt;.map&lt;number&gt;(callbackfn: (value: string, index: number, array: string[]) =&gt; number), thisArg?: any): number[]</span></span><br><span class="line"><span class="comment">// function parseInt(s: string, radix?: number): number</span></span><br><span class="line"><span class="comment">// Radix is 0 and string argument not beging with &#x27;0x&#x27; or &#x27;0&#x27; are treated as radix is 10</span></span><br><span class="line"><span class="comment">// &quot;1&quot; =&gt; parseInt(&quot;1&quot;, 0) =&gt; paresInt(&quot;1&quot;, 10) =&gt; 1</span></span><br><span class="line"><span class="comment">// &quot;2&quot; =&gt; parseInt(&quot;2&quot;, 1) =&gt; NaN, because the radix is smaller than string</span></span><br><span class="line"><span class="comment">// &quot;3&quot; =&gt; parseInt(&quot;3&quot;, 2) =&gt; NaN, because the radix is smaller than string</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>].map(<span class="built_in">parseInt</span>)); <span class="comment">// [1, NaN, NaN]</span></span><br></pre></td></tr></table></figure>
<h3 id="树的深度和广度遍历"><a href="#树的深度和广度遍历" class="headerlink" title="树的深度和广度遍历"></a>树的深度和广度遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tree</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.value = x;</span><br><span class="line">    <span class="built_in">this</span>.children = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  createTree = <span class="function"><span class="keyword">function</span> (<span class="params">treeObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!treeObj) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> Node(treeObj.value);</span><br><span class="line">    <span class="keyword">if</span> (treeObj.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; children &#125; = treeObj;</span><br><span class="line">      children.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        root.children.push(<span class="built_in">this</span>.createTree(item));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;;</span><br><span class="line">  Tree.prototype.create = <span class="function"><span class="keyword">function</span> (<span class="params">treeObj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.root = createTree(treeObj);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// deepTraversal</span></span><br><span class="line">  deepTraversalFc = <span class="function"><span class="keyword">function</span> (<span class="params">rootNode, nodes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!rootNode) <span class="keyword">return</span>;</span><br><span class="line">    nodes.push(rootNode.value);</span><br><span class="line">    rootNode.children.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.deepTraversalFc(item, nodes);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> nodes;</span><br><span class="line">  &#125;;</span><br><span class="line">  Tree.prototype.deepTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">rootNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    deepTraversalFc(rootNode, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wideTraversal</span></span><br><span class="line">  wideTraversalFc = <span class="function"><span class="keyword">function</span> (<span class="params">rootNode, stack, nodes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!rootNode) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (stack.length === <span class="number">0</span>) &#123;</span><br><span class="line">      stack.push(rootNode);</span><br><span class="line">      nodes.push(rootNode.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> node = stack.shift();</span><br><span class="line">    <span class="keyword">if</span> (node.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      node.children.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        stack.push(item);</span><br><span class="line">        nodes.push(item.value);</span><br><span class="line">      &#125;);</span><br><span class="line">      wideTraversalFc(node, stack, nodes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodes;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Tree.prototype.wideTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">treeNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    wideTraversalFc(treeNode, stack, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建树</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *             ┌-------------1-------------┐</span></span><br><span class="line"><span class="comment"> *             │             │             │</span></span><br><span class="line"><span class="comment"> *             2             3             4</span></span><br><span class="line"><span class="comment"> *       ┌-----┴-----┐       │       ┌-----┼-----┐</span></span><br><span class="line"><span class="comment"> *       5           6       7       8     9     10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> treeObj = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="number">2</span>,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          value: <span class="number">5</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: <span class="number">6</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          value: <span class="number">7</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="number">4</span>,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          value: <span class="number">8</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: <span class="number">9</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          value: <span class="number">10</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> tree = <span class="keyword">new</span> Tree();</span><br><span class="line">tree.create(treeObj);</span><br><span class="line"><span class="built_in">console</span>.log(tree.wideTraversal(tree.root));</span><br></pre></td></tr></table></figure>
<h3 id="async-await、Promise-和-setTimeout-执行顺序"><a href="#async-await、Promise-和-setTimeout-执行顺序" class="headerlink" title="async/await、Promise 和 setTimeout 执行顺序"></a>async/await、Promise 和 setTimeout 执行顺序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Event Loop</span></span><br><span class="line"><span class="comment">// 1 4 10 5 6 7 2 3 9 8</span></span><br><span class="line"><span class="keyword">const</span> event1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">    resolve(<span class="number">5</span>);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 4 7 5 2 3 6</span></span><br><span class="line"><span class="keyword">const</span> event2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">    resolve(<span class="number">5</span>);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return of await as a then()</span></span><br><span class="line"><span class="comment">// 4 1 3 6 8 2 7 5</span></span><br><span class="line"><span class="keyword">const</span> event3 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  async1();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">reslove</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    reslove();</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="数组扁平化加去重"><a href="#数组扁平化加去重" class="headerlink" title="数组扁平化加去重"></a>数组扁平化加去重</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, [<span class="number">11</span>, <span class="number">12</span>, [<span class="number">12</span>, <span class="number">13</span>, [<span class="number">14</span>]]]], <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flat = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(cur) ? pre.concat(flat(cur)) : pre.concat(cur);</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> res = flat(arr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  res</span><br><span class="line">    .filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.indexOf(item) === index;</span><br><span class="line">    &#125;)</span><br><span class="line">    .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="JS-异步解决方案"><a href="#JS-异步解决方案" class="headerlink" title="JS 异步解决方案"></a>JS 异步解决方案</h3><ol>
<li>callback</li>
<li>promise</li>
<li>generator</li>
<li>async/await</li>
</ol>
<h3 id="“A1”-“A2”-“B1”-“B2”-“C1”-“C2”-“D1”-“D2”-“A”-“B”-“C”-“D”-gt-“A1”-“A2”-“A”-“B1”-“B2”-“B”-“C1”-“C2”-“C”-“D1”-“D2”-“D”"><a href="#“A1”-“A2”-“B1”-“B2”-“C1”-“C2”-“D1”-“D2”-“A”-“B”-“C”-“D”-gt-“A1”-“A2”-“A”-“B1”-“B2”-“B”-“C1”-“C2”-“C”-“D1”-“D2”-“D”" class="headerlink" title="[“A1”, “A2”, “B1”, “B2”, “C1”, “C2”, “D1”, “D2”] + [“A”, “B”, “C”, “D”] =&gt; [“A1”, “A2”, “A”, “B1”, “B2”, “B”, “C1”, “C2”, “C”, “D1”, “D2”, “D”]"></a>[“A1”, “A2”, “B1”, “B2”, “C1”, “C2”, “D1”, “D2”] + [“A”, “B”, “C”, “D”] =&gt; [“A1”, “A2”, “A”, “B1”, “B2”, “B”, “C1”, “C2”, “C”, “D1”, “D2”, “D”]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// charAt(pos: number): string (Return the character at the specified index)</span></span><br><span class="line"><span class="comment">// charCodeAt(index: number): number (charrcter =&gt; ASCII)</span></span><br><span class="line"><span class="keyword">const</span> concatArr = <span class="function">(<span class="params">...arrs</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  arrs.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    res = res.concat(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&quot;A1&quot;</span>, <span class="string">&quot;A2&quot;</span>, <span class="string">&quot;B1&quot;</span>, <span class="string">&quot;B2&quot;</span>, <span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;D1&quot;</span>, <span class="string">&quot;D2&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  concatArr(arr1, arr2).sort(</span><br><span class="line">    (a, b) =&gt; a.charAt(<span class="number">0</span>).charCodeAt() - b.charAt(<span class="number">0</span>).charCodeAt()</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="如何实现一个-new"><a href="#如何实现一个-new" class="headerlink" title="如何实现一个 new"></a>如何实现一个 new</h3><ol>
<li>创建一个新对象，将他的引用赋给 this, 继承函数原型</li>
<li>通过 this 将属性和方法赋给新对象</li>
<li>this 指向新对象(实例), 如果没有则手动返回其他对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newNew = <span class="function"><span class="keyword">function</span> (<span class="params">Parent, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newObj = <span class="built_in">Object</span>.create(Parent.prototype);</span><br><span class="line">  <span class="keyword">let</span> res = Parent.apply(newObj, args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> ? res : newObj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="var-a-if-a-1-amp-amp-a-2-amp-amp-a-3-console-log-1"><a href="#var-a-if-a-1-amp-amp-a-2-amp-amp-a-3-console-log-1" class="headerlink" title="var a = ?; if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3){ console.log(1); }"></a>var a = ?; if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3){ console.log(1); }</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object: When object compared to a base type, valueOf and to toString function are called</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  i: <span class="number">1</span>,</span><br><span class="line">  valueOf/toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.i++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array: When array calls toString function will call the join function (separated by &#x27;,&#x27;) and overwrite the join function</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.join = a.shift;</span><br></pre></td></tr></table></figure>
<h3 id="变量提升-1"><a href="#变量提升-1" class="headerlink" title="变量提升"></a>变量提升</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// first find internally for variable declarations</span></span><br><span class="line"><span class="comment">// have ? internal variable : external search</span></span><br><span class="line"><span class="comment">// IFFE can be assigned</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// undefined 10 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  a = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 10 5 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  a = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// fa 10 fa</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// undefined 10 20</span></span><br></pre></td></tr></table></figure>
<h3 id="ArrayLike"><a href="#ArrayLike" class="headerlink" title="ArrayLike"></a>ArrayLike</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="number">4</span>,</span><br><span class="line">  length: <span class="number">2</span>,</span><br><span class="line">  splice: <span class="built_in">Array</span>.prototype.splice,</span><br><span class="line">  push: <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// push is to insert value according to length</span></span><br><span class="line">obj.push(<span class="number">2</span>);</span><br><span class="line">obj.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// Object(4) [empty × 2, 2, 3, splice: ƒ, push: ƒ]</span></span><br></pre></td></tr></table></figure>
<h3 id="实现-5-add-3-minus-2-功能"><a href="#实现-5-add-3-minus-2-功能" class="headerlink" title="实现 (5).add(3).minus(2) 功能"></a>实现 (5).add(3).minus(2) 功能</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.numAdd = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.valueOf() + num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.prototype.numMinus = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.valueOf() - num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((<span class="number">5</span>).numAdd(<span class="number">3</span>).numMinus(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<h3 id="和-优先级"><a href="#和-优先级" class="headerlink" title=". 和 = 优先级"></a>. 和 = 优先级</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="comment">// a &amp; b =&gt; &#123;n:1&#125;</span></span><br><span class="line">a.x = a = &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="comment">// . has a higher priority than =</span></span><br><span class="line"><span class="comment">// olda.x &amp; b =&gt; &#123;n: 1, x: undefined&#125;</span></span><br><span class="line"><span class="comment">// newa = &#123;n: 2&#125;</span></span><br><span class="line"><span class="comment">// olda.x &amp; b = newa =&gt; &#123;n: 1, x: &#123;n: 2&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.x); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// newa.x =&gt; undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b.x); <span class="comment">// &#123; n: 2 &#125;</span></span><br><span class="line"><span class="comment">// b =&gt; &#123;n: 1, x: &#123;n:2&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="随机生成一个长度为-10-的整数类型的数组，例如-2-10-3-4-5-11-10-11-20-，将其排列成一个新数组，要求新数组形式如下，例如-2-3-4-5-10-11-20"><a href="#随机生成一个长度为-10-的整数类型的数组，例如-2-10-3-4-5-11-10-11-20-，将其排列成一个新数组，要求新数组形式如下，例如-2-3-4-5-10-11-20" class="headerlink" title="随机生成一个长度为 10 的整数类型的数组，例如 [2, 10, 3, 4, 5, 11, 10, 11, 20]，将其排列成一个新数组，要求新数组形式如下，例如 [[2, 3, 4, 5], [10, 11], [20]]"></a>随机生成一个长度为 10 的整数类型的数组，例如 [2, 10, 3, 4, 5, 11, 10, 11, 20]，将其排列成一个新数组，要求新数组形式如下，例如 [[2, 3, 4, 5], [10, 11], [20]]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> generatorArr = <span class="function">(<span class="params">length, maxNumber = <span class="number">100</span></span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(&#123; length &#125;, <span class="function">() =&gt;</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * maxNumber));</span><br><span class="line"><span class="keyword">let</span> arr = generatorArr(<span class="number">20</span>, <span class="number">45</span>).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="keyword">const</span> res = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [],</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> subres = [];</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.floor(element / <span class="number">10</span>) === flag) &#123;</span><br><span class="line">      subres.push(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      flag++;</span><br><span class="line">      res.push(subres);</span><br><span class="line">      subres = [];</span><br><span class="line">      subres.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// the last resArray</span></span><br><span class="line">  res.push(subres);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(res(arr));</span><br></pre></td></tr></table></figure>
<h3 id="如何把一个字符串的大小写取反-大写变小写-小写变大写-例如-’AbC’-变成-‘aBc’"><a href="#如何把一个字符串的大小写取反-大写变小写-小写变大写-例如-’AbC’-变成-‘aBc’" class="headerlink" title="如何把一个字符串的大小写取反(大写变小写, 小写变大写), 例如 ’AbC’ 变成 ‘aBc’"></a>如何把一个字符串的大小写取反(大写变小写, 小写变大写), 例如 ’AbC’ 变成 ‘aBc’</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;DfffdsADFFfsSFDasf&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> processString = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    res +=</span><br><span class="line">      str[i] === str[i].toUpperCase()</span><br><span class="line">        ? str[i].toLowerCase()</span><br><span class="line">        : str[i].toUpperCase();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="built_in">console</span>.log(processString(str));</span><br></pre></td></tr></table></figure>
<h3 id="实现一个字符串匹配算法，从长度为-n-的字符串-S-中，查找是否存在字符串-T-T-的长度是-m，若存在返回所在位置"><a href="#实现一个字符串匹配算法，从长度为-n-的字符串-S-中，查找是否存在字符串-T-T-的长度是-m，若存在返回所在位置" class="headerlink" title="实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T, T 的长度是 m，若存在返回所在位置"></a>实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T, T 的长度是 m，若存在返回所在位置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;abcdefghijk&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> t = <span class="string">&quot;efg&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> find = <span class="function">(<span class="params">s, t</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> n = s.length,</span><br><span class="line">    m = t.length;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; m) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.slice(i, i + m) === t) <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(find(s, t));</span><br></pre></td></tr></table></figure>
<h3 id="BFC、IFC、GFC-和-FFC"><a href="#BFC、IFC、GFC-和-FFC" class="headerlink" title="BFC、IFC、GFC 和 FFC"></a>BFC、IFC、GFC 和 FFC</h3><h3 id="对象的键名"><a href="#对象的键名" class="headerlink" title="对象的键名"></a>对象的键名</h3><ol>
<li>只能是 String 或 Symbol</li>
<li>其他都会转 String</li>
<li>调用 toString</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;,</span><br><span class="line">  b = <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  c = <span class="number">123</span>;</span><br><span class="line">a[b] = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;&quot;123&quot;: &quot;b&quot;&#125;</span></span><br><span class="line">a[c] = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;&quot;123&quot;: &quot;c&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]); <span class="comment">// c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;,</span><br><span class="line">  b = <span class="built_in">Symbol</span>(<span class="string">&quot;123&quot;</span>),</span><br><span class="line">  c = <span class="built_in">Symbol</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">a[b] = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;Symbol(&quot;123&quot;): &quot;b&quot;&#125;</span></span><br><span class="line">a[c] = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;Symbol(&quot;123&quot;): &quot;b&quot;, &#123;Symbol(&quot;123&quot;): &quot;c&quot;&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]); <span class="comment">// b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;,</span><br><span class="line">  b = &#123; <span class="attr">key</span>: <span class="string">&quot;123&quot;</span> &#125;,</span><br><span class="line">  c = &#123; <span class="attr">key</span>: <span class="string">&quot;456&quot;</span> &#125;;</span><br><span class="line">a[b] = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;[object Object]: &quot;b&quot;&#125;</span></span><br><span class="line">a[c] = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;[object Object]: &quot;c&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]); <span class="comment">// c</span></span><br></pre></td></tr></table></figure>
<h3 id="版本号排序"><a href="#版本号排序" class="headerlink" title="版本号排序"></a>版本号排序</h3><ul>
<li><p>字符串比较法 (适用范围小)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ASCII: &#123;.: 46, 0: 48&#125;</span></span><br><span class="line"><span class="keyword">let</span> versions = [<span class="string">&quot;0.1.1&quot;</span>, <span class="string">&quot;2.3.3&quot;</span>, <span class="string">&quot;0.302.1&quot;</span>, <span class="string">&quot;4.2&quot;</span>, <span class="string">&quot;4.3.5&quot;</span>, <span class="string">&quot;4.3.4.5&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> versionSort = <span class="function">(<span class="params">versions</span>) =&gt;</span> &#123;</span><br><span class="line">  versions.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  <span class="keyword">return</span> versions;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(versionSort(versions));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.5.0 &gt; 0.302.1 is error</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>大数加权法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [&quot;0.1.1&quot;, &quot;0.5.1&quot;, &quot;0.302.1&quot;, &quot;2.3.3&quot;, &quot;4.2&quot;, &quot;4.3.4.5&quot;, &quot;4.3.5&quot;]</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;0.5.1&quot;</span>, <span class="string">&quot;0.1.1&quot;</span>, <span class="string">&quot;2.3.3&quot;</span>, <span class="string">&quot;0.302.1&quot;</span>, <span class="string">&quot;4.2&quot;</span>, <span class="string">&quot;4.3.5&quot;</span>, <span class="string">&quot;4.3.4.5&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">let</span> gen = <span class="function">(<span class="params">arr, maxLen</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">    res += <span class="built_in">Number</span>(element) * <span class="built_in">Math</span>.pow(p, maxLen - <span class="number">1</span> - index);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> versionSort = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = array;</span><br><span class="line">  <span class="keyword">let</span> maxLen = <span class="built_in">Math</span>.max(...arr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> item.split(<span class="string">&quot;.&quot;</span>).length));</span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> gen(a.split(<span class="string">&quot;.&quot;</span>), maxLen) - gen(b.split(<span class="string">&quot;.&quot;</span>), maxLen));</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(versionSort(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Large number overflow easily</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>循环比较法 (推荐)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;0.5.1&quot;</span>, <span class="string">&quot;0.1.1&quot;</span>, <span class="string">&quot;2.3.3&quot;</span>, <span class="string">&quot;0.302.1&quot;</span>, <span class="string">&quot;4.2&quot;</span>, <span class="string">&quot;4.3.5&quot;</span>, <span class="string">&quot;4.3.4.5&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> versionSort = <span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = array;</span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> arr1 = a.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> arr2 = b.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> s1 = arr1[index];</span><br><span class="line">      <span class="keyword">let</span> s2 = arr2[index++];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!s1 || !s2) &#123;</span><br><span class="line">        <span class="keyword">return</span> s1 - s2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (s1 === s2) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> s1 - s2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>二维矩阵从左上角到右下角路径的最小和（动态规划）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [n, m] = [arr.length, arr[<span class="number">0</span>].length];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dp = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tempArr = [];</span><br><span class="line">  tempArr.push(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">    tempArr.push(tempArr[i - <span class="number">1</span>] + arr[<span class="number">0</span>][i]);</span><br><span class="line">  &#125;</span><br><span class="line">  dp.push(tempArr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    tempArr = [];</span><br><span class="line">    tempArr.push(dp[i - <span class="number">1</span>][<span class="number">0</span>] + arr[i][<span class="number">0</span>]);</span><br><span class="line">    dp.push(tempArr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; m; j++) &#123;</span><br><span class="line">      dp[i].push(<span class="built_in">Math</span>.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + arr[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[n - <span class="number">1</span>][m - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res(arr));</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/posts/65b69107/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p><a href="http://nginx.org/en/download.html">Download Nginx</a></p>
<h2 id="Start-Nginx"><a href="#Start-Nginx" class="headerlink" title="Start Nginx"></a>Start Nginx</h2><ol>
<li>Double-click to start nginx.exe, and the command box flashes past</li>
<li>Enter the command nginx.exe or start nginx</li>
</ol>
<h2 id="Reload-Nginx"><a href="#Reload-Nginx" class="headerlink" title="Reload Nginx"></a>Reload Nginx</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx</span> -s reload</span><br></pre></td></tr></table></figure>
<h2 id="Stop-Nginx"><a href="#Stop-Nginx" class="headerlink" title="Stop Nginx"></a>Stop Nginx</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Out of service</span></span><br><span class="line"><span class="attribute">nginx</span> -s quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># Forced shutdown of service</span></span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>
<h2 id="Domain-name-binding"><a href="#Domain-name-binding" class="headerlink" title="Domain name binding"></a>Domain name binding</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">server_name</span> www.itblood.com; <span class="comment">#Domain name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Forwarding-service"><a href="#Forwarding-service" class="headerlink" title="Forwarding service"></a>Forwarding service</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span>  http://127.0.0.1:8080; <span class="comment"># Forwarding address</span></span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host $proxy_host;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Setup-Nginx-starts-from-startup"><a href="#Setup-Nginx-starts-from-startup" class="headerlink" title="Setup Nginx starts from startup"></a>Setup Nginx starts from startup</h2><p>Convert the Nginx to the system service</p>
<ol>
<li><p><a href="https://github.com/kohsuke/winsw">Download the ‘Windows Service Wrapper’</a></p>
</li>
<li><p>Place the program in the directory of Nginx and rename ‘nginx-service.exe’.</p>
</li>
<li><p>Create configuration file ‘nginx-service.xml’</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>nginx<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>nginx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>nginx<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">logpath</span>&gt;</span>D:\xxx\nginx-x.x.x<span class="tag">&lt;/<span class="name">logpath</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">logmode</span>&gt;</span>roll<span class="tag">&lt;/<span class="name">logmode</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">depend</span>&gt;</span><span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">executable</span>&gt;</span>D:\xxx\nginx-x.x.x\nginx.exe<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">stopexecutable</span>&gt;</span>D:\xxx\nginx-x.x.x\nginx.exe -s stop<span class="tag">&lt;/<span class="name">stopexecutable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Execute ‘nginx-service.exe install’ in the CMD in the curent directory</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/Nginx/StructureTree.png" alt="Structure Tree"></p>
</li>
<li><p>The Service item is set to start</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/Nginx/ServiceManagement.png" alt=""></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/posts/d8a440d1/</url>
    <content><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="Lifecycles"><a href="#Lifecycles" class="headerlink" title="Lifecycles"></a>Lifecycles</h2><p><img data-src="https://cdn.jsdelivr.net/gh/smaIIstars/CDN@master/React/react16-lifecycle.png" alt="图例"></p>
<ul>
<li><p>getDerivedStateFromProps: Keeping the props always is the same as New props</p>
</li>
<li><p>shouldComponentUpdate: We can control the components which should be re rendered</p>
</li>
<li><p>getSnapshotBeforeUpdate: The snapshot before update</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Life cycle is for class components, and function components are simulated by hooks</span><br><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class Cpn extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是Cpn组件&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    console.log(&quot;componentWillUnmount called&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 1.init state</span><br><span class="line">   * 2.bind this pointer</span><br><span class="line">   *&#x2F;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">      isShow: false,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;constructor called&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&quot;render called&quot;);</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;App&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;h2&gt;Counter: &#123;this.state.count&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;(e) &#x3D;&gt; this.increment()&#125;&gt;+1&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;hr &#x2F;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;(e) &#x3D;&gt; this.changeCpnShow()&#125;&gt;change&lt;&#x2F;button&gt;</span><br><span class="line">        &#123;this.state.isShow &amp;&amp; &lt;Cpn &#x2F;&gt;&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeCpnShow() &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      isShow: !this.state.isShow,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment() &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      count: this.state.count + 1,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 1.Operation dependent on DOM</span><br><span class="line">   * 2.Send the network(Vue-&gt;created)</span><br><span class="line">   * 3.add some subscribe(unsubscribe in componentWillUnmount)</span><br><span class="line">   *&#x2F;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    console.log(&quot;componentDidMount called&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 1.Be called after component updated</span><br><span class="line">   * 2.Compare the props</span><br><span class="line">   *&#x2F;</span><br><span class="line">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">    console.log(&quot;componentDidUpdate called&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Use the shouldComponentUpdate controls the render function</span><br><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">      message: &quot;Hello World&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&quot;App called&quot;);</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;counter: &#123;this.state.counter&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;message: &#123;this.state.message&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">            this.increment();</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          +</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">            this.changeText();</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          ChangeText</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Determine whether the component is updated</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(&quot;nextState&quot;, nextState);</span><br><span class="line">    if (this.state.counter !&#x3D;&#x3D; nextState.counter) return true;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment() &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      counter: this.state.counter + 1,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeText() &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      message: &quot;Small Stars&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul>
<li><p>super(props): Superclass will help you to keep the props:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;App&lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>But we use super() also can run</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;App&lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Subclass will auto execute the constructor function, we can not write it</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;App&lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="propTypes-amp-defaultProps"><a href="#propTypes-amp-defaultProps" class="headerlink" title="propTypes &amp; defaultProps"></a><a href="https://zh-hans.reactjs.org/docs/typechecking-with-proptypes.html">propTypes &amp; defaultProps</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">import Proptypes from &quot;prop-types&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Function</span><br><span class="line">function ChildCpn(props) &#123;</span><br><span class="line">  const &#123; name, age, height &#125; &#x3D; props;</span><br><span class="line">  const &#123; names &#125; &#x3D; props;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;SubComponent:&#123;name + &quot; &quot; + age + &quot; &quot; + height&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;names.map((item, index) &#x3D;&gt; &#123;</span><br><span class="line">          return &lt;li key&#x3D;&#123;index&#125;&gt;&#123;item&#125;&lt;&#x2F;li&gt;;</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Class</span><br><span class="line">class ChildCpn2 extends Component &#123;</span><br><span class="line">  static propTypes &#x3D; &#123;&#125;;</span><br><span class="line">  static defaultProps &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; name, age, height, names &#125; &#x3D; this.props;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;SubComponent2:&#123;name + &quot; &quot; + age + &quot; &quot; + height&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;names.map((item, index) &#x3D;&gt; &#123;</span><br><span class="line">            return &lt;li key&#x3D;&#123;index&#125;&gt;&#123;item&#125;&lt;&#x2F;li&gt;;</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Custom Validation Rule</span><br><span class="line">ChildCpn.propTypes &#x3D; &#123;</span><br><span class="line">  name: Proptypes.string.isRequired,</span><br><span class="line">  age: Proptypes.number,</span><br><span class="line">  height: Proptypes.number,</span><br><span class="line">  names: Proptypes.array,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ChildCpn2.propTypes &#x3D; &#123;</span><br><span class="line">  name: Proptypes.string,</span><br><span class="line">  age: Proptypes.number,</span><br><span class="line">  height: Proptypes.number,</span><br><span class="line">  names: Proptypes.array,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; defaultValue</span><br><span class="line">ChildCpn.defaultProps &#x3D; &#123;</span><br><span class="line">  name: &quot;HelloKitty&quot;,</span><br><span class="line">  age: 30,</span><br><span class="line">  height: 1.78,</span><br><span class="line">  names: [&quot;default&quot;],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ChildCpn2.defaultProps &#x3D; &#123;</span><br><span class="line">  name: &quot;BlackAngel&quot;,</span><br><span class="line">  age: 30,</span><br><span class="line">  height: 1.78,</span><br><span class="line">  names: [&quot;default&quot;],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ChildCpn</span><br><span class="line">          name&#x3D;&quot;Smallstars&quot;</span><br><span class="line">          age&#x3D;&#123;18&#125;</span><br><span class="line">          height&#x3D;&#123;1.83&#125;</span><br><span class="line">          names&#x3D;&#123;[&quot;abc&quot;, &quot;de&quot;]&#125;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ChildCpn &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ChildCpn2 age&#x3D;&#123;18&#125; height&#x3D;&#123;1.83&#125; names&#x3D;&#123;[&quot;abc&quot;, &quot;de&quot;]&#125; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><ul>
<li><p>Asynchronous: In the Lifecycles and the CompositeEvent of React</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      message: &quot;default Text&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Call back after the render function is executed</span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    console.log(&quot;componentDidUpdate&quot;, this.state.message); &#x2F;&#x2F; Smallstars</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeText() &#123;</span><br><span class="line">    this.setState(</span><br><span class="line">      &#123;</span><br><span class="line">        message: &quot;Smallstars&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      () &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; Call back after the data are updated</span><br><span class="line">        console.log(&quot;changeText&quot;, this.state.message); &#x2F;&#x2F; Smallstars</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    console.log(&quot;changeText&quot;, this.state.message); &#x2F;&#x2F; default Text</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; message &#125; &#x3D; this.state;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;message&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">            this.changeText();</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          synchronous</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Synchronous: In setTimeout and native event of DOM</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      message: &quot;default Text&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    document.getElementById(&quot;btn_synchronous&quot;).addEventListener(&quot;click&quot;, () &#x3D;&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        message: &quot;Smallstars&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      console.log(&quot;document&quot;, this.state.message); &#x2F;&#x2F; Smallstars</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; this.setState(&#123;</span><br><span class="line">    &#x2F;&#x2F;   message: &quot;Smallstars&quot;,</span><br><span class="line">    &#x2F;&#x2F; &#125;);</span><br><span class="line">    &#x2F;&#x2F; console.log(&quot;componentDidMount&quot;, this.state.message); &#x2F;&#x2F; default Text</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeText() &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        message: &quot;Smallstars&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">      console.log(&quot;setTimeout&quot;, this.state.message); &#x2F;&#x2F; default Text</span><br><span class="line">    &#125;, 0);</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      message: &quot;Smallstars&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(&quot;changeText&quot;, this.state.message); &#x2F;&#x2F; default Text</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; message &#125; &#x3D; this.state;</span><br><span class="line">    return (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;div&gt;message: &#123;message&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;btn_synchronous&quot;&gt;synchronous&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">            this.changeText();</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          synchronous</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Data merging</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.props &#x3D; props;</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      message: &quot;Default Text&quot;,</span><br><span class="line">      name: &quot;Smallstars&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;message: &#123;this.state.message&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;this.state.name&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">            this.changeText();</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          execute</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeText() &#123;</span><br><span class="line">    &#x2F;&#x2F; Use Object.assign(&#123;&#125;, this.state, &#123;message: &quot;Smallstars&quot;&#125;)</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      message: &quot;Smallstars&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>setState merging</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.props &#x3D; props;</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Number: &#123;this.state.counter&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">            this.increment();</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          +</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment() &#123;</span><br><span class="line">    &#x2F;&#x2F; It is merged each time, and the front is covered by later</span><br><span class="line">    &#x2F;&#x2F; this.setState(&#123;</span><br><span class="line">    &#x2F;&#x2F;   counter: this.state.counter + 1,</span><br><span class="line">    &#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; this.setState(&#123;</span><br><span class="line">    &#x2F;&#x2F;   counter: this.state.counter + 1,</span><br><span class="line">    &#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; this.setState(&#123;</span><br><span class="line">    &#x2F;&#x2F;   counter: this.state.counter + 1,</span><br><span class="line">    &#x2F;&#x2F; &#125;);</span><br><span class="line">    &#x2F;&#x2F; counter is 1</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Accumulate when merging</span><br><span class="line">    &#x2F;&#x2F; Each time a merging is made, the later state is used for accumulation, and then a new one is returned</span><br><span class="line">    this.setState((prevState, props) &#x3D;&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        counter: prevState.counter + 1,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    this.setState((prevState, props) &#x3D;&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        counter: prevState.counter + 1,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    this.setState((prevState, props) &#x3D;&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        counter: prevState.counter + 1,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; counter is 3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ReactCompositeEvent"><a href="#ReactCompositeEvent" class="headerlink" title="ReactCompositeEvent"></a>ReactCompositeEvent</h2><p>React is not just design for browsers</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/smaIIstars/CDN@master/React/react-composite-event.png" alt="reactCompositeEvent"></p>
<h2 id="Components-Communication"><a href="#Components-Communication" class="headerlink" title="Components Communication"></a>Components Communication</h2><h3 id="Parent-and-Child-Component"><a href="#Parent-and-Child-Component" class="headerlink" title="Parent and Child Component"></a>Parent and Child Component</h3><ul>
<li><p>Class Component</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line">class ChildCpn extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; name, age, height &#125; &#x3D; this.props;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Subclass:&#123;name + &quot; &quot; + age + &quot; &quot; + height&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ChildCpn name&#x3D;&quot;Smallstars&quot; age&#x3D;&quot;18&quot; height&#x3D;&quot;1.83&quot; &#x2F;&gt;</span><br><span class="line">        &lt;ChildCpn name&#x3D;&quot;BlackAngel&quot; age&#x3D;&quot;20&quot; height&#x3D;&quot;1.63&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Function Component</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">function ChildCpn(props) &#123;</span><br><span class="line">  const &#123; name, age, height &#125; &#x3D; props;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Subclass:&#123;name + &quot; &quot; + age + &quot; &quot; + height&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ChildCpn name&#x3D;&quot;Smallstars&quot; age&#x3D;&quot;18&quot; height&#x3D;&quot;1.83&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Cross-Components-Communication"><a href="#Cross-Components-Communication" class="headerlink" title="Cross Components Communication"></a>Cross Components Communication</h3><ul>
<li><p>Props are passed layer by layer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const ProfileHeader &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; nickname, age &#125; &#x3D; props;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;nickname: &#123;nickname&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div&gt;age: &#123;age&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const Profile &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; nickname, age &#125; &#x3D; props;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ProfileHeader nickname&#x3D;&#123;nickname&#125; age&#x3D;&#123;age&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      nickname: &quot;Smallstars&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; nickname, age &#125; &#x3D; this.state;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Profile nickname&#x3D;&#123;nickname&#125; age&#x3D;&#123;age&#125; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Context Sharing and Delivery</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Class Component</span><br><span class="line">import React, &#123; Component &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; First, create the context object</span><br><span class="line">const UserContext &#x3D; React.createContext(&#123;</span><br><span class="line">  nickname: &quot;defaultName&quot;,</span><br><span class="line">  level: 0,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">class ProfileHeader extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(&quot;ProfileHeader&quot;, this);</span><br><span class="line">    const &#123; context &#125; &#x3D; this;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;nickname: &#123;context.nickname&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;level: &#123;context.level&#125; &lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Profile extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(&quot;Profile&quot;, this);</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;ProfileHeader&gt;&lt;&#x2F;ProfileHeader&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Fourth, get the shared data</span><br><span class="line">ProfileHeader.contextType &#x3D; UserContext;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      nickname: &quot;Smallstars&quot;,</span><br><span class="line">      level: 10,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &#123;&#x2F;* Second, sharing the data *&#x2F;&#125;</span><br><span class="line">        &lt;UserContext.Provider value&#x3D;&#123;this.state&#125;&gt;</span><br><span class="line">          &#123;&#x2F;* Third, components that use shared data must be subcomponent *&#x2F;&#125;</span><br><span class="line">          &lt;Profile &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;UserContext.Provider&gt;</span><br><span class="line">        &#123;&#x2F;* use the default value *&#x2F;&#125;</span><br><span class="line">        &lt;Profile &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Function Component</span><br><span class="line">import React, &#123; createContext &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; First, create the context</span><br><span class="line">const UserContext &#x3D; createContext(&#123;</span><br><span class="line">  nickname: &quot;defaultName&quot;,</span><br><span class="line">  level: 0,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const ThemeContext &#x3D; createContext(&#123;</span><br><span class="line">  red: &quot;red&quot;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const ProfileHeader &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &#x2F;&#x2F; Fourth, user the Consumer and call the function pass in the value</span><br><span class="line">    &lt;UserContext.Consumer&gt;</span><br><span class="line">      &#123;(userValue) &#x3D;&gt; &#123;</span><br><span class="line">        return (</span><br><span class="line">          &#x2F;&#x2F; Fifth, multiple level nested calls, as the Fluter</span><br><span class="line">          &lt;ThemeContext.Consumer&gt;</span><br><span class="line">            &#123;(themeValue) &#x3D;&gt; &#123;</span><br><span class="line">              &#x2F;&#x2F; console.log(themeValue);</span><br><span class="line">              return (</span><br><span class="line">                &lt;&gt;</span><br><span class="line">                  &lt;div style&#x3D;&#123;&#123; color: themeValue.color &#125;&#125;&gt;</span><br><span class="line">                    nickname: &#123;userValue.nickname&#125;</span><br><span class="line">                  &lt;&#x2F;div&gt;</span><br><span class="line">                  &lt;div&gt;level: &#123;userValue.level&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                  &lt;div&gt;color: &#123;themeValue.color&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;&gt;</span><br><span class="line">              );</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          &lt;&#x2F;ThemeContext.Consumer&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &lt;&#x2F;UserContext.Consumer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const Profile &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ProfileHeader &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const App &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const user &#x3D; &#123;</span><br><span class="line">    nickname: &quot;smallstars&quot;,</span><br><span class="line">    level: 100,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &#x2F;&#x2F; Second, sharing the data</span><br><span class="line">    &lt;UserContext.Provider value&#x3D;&#123;user&#125;&gt;</span><br><span class="line">      &lt;ThemeContext.Provider value&#x3D;&#123;&#123; color: &quot;blue&quot; &#125;&#125;&gt;</span><br><span class="line">        &#123;&#x2F;* Third, as a subcomponent *&#x2F;&#125;</span><br><span class="line">        &lt;Profile &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;ThemeContext.Provider&gt;</span><br><span class="line">    &lt;&#x2F;UserContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Events</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; EventEmitter &#125; from &quot;events&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Event bus</span><br><span class="line">const eventBus &#x3D; new EventEmitter();</span><br><span class="line"></span><br><span class="line">class Home extends PureComponent &#123;</span><br><span class="line">  &#x2F;&#x2F; addListener</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    eventBus.addListener(&quot;btnClick&quot;, this.handleBtnClickListener);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; removeListener</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    &#x2F;&#x2F; remove all event listener about btnClick</span><br><span class="line">    &#x2F;&#x2F; eventBus.removeListener(&quot;btnClick&quot;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Only one needs to be cancelled separately</span><br><span class="line">    &#x2F;&#x2F; and there use the ... operator</span><br><span class="line">    eventBus.removeListener(&quot;btnClick&quot;, this.handleBtnClickListener);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleBtnClickListener &#x3D; (message, num) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(message, num);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;Home&lt;&#x2F;div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Profile extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Profile</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">            this.btnClick();</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          Click</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  btnClick() &#123;</span><br><span class="line">    &#x2F;&#x2F; emit the event</span><br><span class="line">    eventBus.emit(&quot;btnClick&quot;, &quot;HelloWorld&quot;, 123);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Home&gt;&lt;&#x2F;Home&gt;</span><br><span class="line">        &lt;Profile&gt;&lt;&#x2F;Profile&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Redux</p>
</li>
</ul>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent, createRef, forwardRef &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Can&#39;t use ref in function components, it doesn&#39;t have instance</span><br><span class="line">&#x2F;&#x2F; Use the forwardRef HOC to enhance the function component</span><br><span class="line">const Profile &#x3D; forwardRef(function (props, ref) &#123;</span><br><span class="line">  console.log(props.name);</span><br><span class="line">  return &lt;div ref&#x3D;&#123;ref&#125;&gt;Profile&lt;&#x2F;div&gt;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">class Counter extends PureComponent &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  subclassAdd() &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      counter: this.state.counter + 1,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; counter &#125; &#x3D; this.state;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;Counter:&#123;counter&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class App extends PureComponent &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.ref2 &#x3D; createRef();</span><br><span class="line">    this.ref3 &#x3D; null;</span><br><span class="line">    this.ref4 &#x3D; createRef();</span><br><span class="line">    this.ref5 &#x3D; createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeText() &#123;</span><br><span class="line">    console.log(&quot;this&quot;, this);</span><br><span class="line">    this.refs.ref1.innerHTML &#x3D; &quot;SmallStars&quot;;</span><br><span class="line">    this.ref2.current.innerHTML &#x3D; &quot;BlackAngel&quot;;</span><br><span class="line">    this.ref3.innerHTML &#x3D; &quot;HelloKitty&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  supClassAdd() &#123;</span><br><span class="line">    &#x2F;&#x2F; call the subclass function by ref</span><br><span class="line">    this.ref4.current.subclassAdd();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;&#x2F;* Three ways to use ref: String(Abandoned), Object(recommend), Function *&#x2F;&#125;</span><br><span class="line">        &lt;div ref&#x3D;&quot;ref1&quot;&gt;DefaultText&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div ref&#x3D;&#123;this.ref2&#125;&gt;DefaultText&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div ref&#x3D;&#123;(args) &#x3D;&gt; (this.ref3 &#x3D; args)&#125;&gt;DefaultText&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Profile name&#x3D;&quot;profile&quot; ref&#x3D;&#123;this.ref5&#125; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button</span><br><span class="line">          onClick&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">            this.changeText();</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          changeText</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Counter ref&#x3D;&#123;this.ref4&#125; &#x2F;&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.supClassAdd()&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>
<h2 id="Controlled-amp-Uncontrolled-Components"><a href="#Controlled-amp-Uncontrolled-Components" class="headerlink" title="Controlled &amp; Uncontrolled Components"></a>Controlled &amp; Uncontrolled Components</h2><p>Data is handle by a React Component ? Controlled : Uncontrolled</p>
<ul>
<li><p>Controlled Components: The values in the components are always consistent with the state</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class App extends PureComponent &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      message: &quot;DefaultText&quot;,</span><br><span class="line">      counter: 5,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeHandle(e) &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(e.target.value);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      message: e.target.value,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  submitHandle(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    console.log(this.state.message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; message &#125; &#x3D; this.state;</span><br><span class="line">    return (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;div&gt;message:&#123;message&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;form</span><br><span class="line">          onSubmit&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">            this.submitHandle(e);</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;label htmlFor&#x3D;&quot;message&quot;&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type&#x3D;&quot;text&quot;</span><br><span class="line">              onChange&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">                this.changeHandle(e);</span><br><span class="line">              &#125;&#125;</span><br><span class="line">              value&#x3D;&#123;message&#125;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;label&gt;</span><br><span class="line">          &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">      &lt;&#x2F;&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>
<pre class="mermaid">  sequenceDiagram
    participant s as state
    participant c as components

    s->>c:DefaultValue
    loop One Way Data Flaw
        c->>c:ChangeValue
        c->>s:ChangeState
        s->>c:ChangeValue
    end</pre>
</li>
<li><p>Uncontrolled Components</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; createRef, PureComponent &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      username: &quot;&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.usernameRef &#x3D; createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;form</span><br><span class="line">          onSubmit&#x3D;&#123;(e) &#x3D;&gt; &#123;</span><br><span class="line">            this.handleSubmit(e);</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;label htmlFor&#x3D;&quot;username&quot;&gt;</span><br><span class="line">            Username:&#123;&quot; &quot;&#125;</span><br><span class="line">            &lt;input</span><br><span class="line">              type&#x3D;&quot;text&quot;</span><br><span class="line">              name&#x3D;&quot;username&quot;</span><br><span class="line">              id&#x3D;&quot;username&quot;</span><br><span class="line">              ref&#x3D;&#123;this.usernameRef&#125;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">          &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    console.log(this.usernameRef.current.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Higher-Order-Components-HOC"><a href="#Higher-Order-Components-HOC" class="headerlink" title="Higher-Order Components (HOC)"></a>Higher-Order Components (HOC)</h2><p>HOC is a function with arguments as component and return value as new function</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">ReactDOM.render(&lt;App name&#x3D;&quot;Smallstars&quot; &#x2F;&gt;, document.getElementById(&quot;root&quot;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Components</span><br><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        App:</span><br><span class="line">        &#123;this.props.name&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const EnhanceComponent &#x3D; (WrappedComponent) &#x3D;&gt; &#123;</span><br><span class="line">  class NewComponent extends PureComponent &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return &lt;WrappedComponent &#123;...this.props&#125; &#x2F;&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Change the display name of Components</span><br><span class="line">  NewComponent.displayName &#x3D; &quot;StarsComponents&quot;;</span><br><span class="line">  return NewComponent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const EnhanceComponent2 &#x3D; (WrappedComponent) &#x3D;&gt; &#123;</span><br><span class="line">  function NewComponent(props) &#123;</span><br><span class="line">    return &lt;WrappedComponent &#123;...props&#125; &#x2F;&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Change the display name of Components</span><br><span class="line">  return NewComponent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default EnhanceComponent(App);</span><br></pre></td></tr></table></figure>
<h2 id="React-CSS"><a href="#React-CSS" class="headerlink" title="React-CSS"></a>React-CSS</h2><ul>
<li><p>Inline Style</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      color: &quot;purple&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const pStyle &#x3D; &#123;</span><br><span class="line">      color: this.state.color,</span><br><span class="line">      textDecoration: &quot;underline&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2 style&#x3D;&#123;&#123; fontSize: &quot;50px&quot;, color: &quot;red&quot; &#125;&#125;&gt;Title&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;p style&#x3D;&#123;pStyle&#125;&gt;Text&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Module Style</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; style.module.css</span><br><span class="line">.title&#123;</span><br><span class="line">  color: xxx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; App.js</span><br><span class="line">import React, &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line">import Home from &quot;..&#x2F;home&quot;;</span><br><span class="line">import Profile from &quot;..&#x2F;profile&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Import in this way will pollution whole situation</span><br><span class="line">&#x2F;&#x2F; import &quot;.&#x2F;style.css&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; We should import file as a module</span><br><span class="line">&#x2F;&#x2F; first: style.css --&gt; style.module.css</span><br><span class="line">&#x2F;&#x2F; second: xxxStyle &lt;-- style.module.css</span><br><span class="line">&#x2F;&#x2F; third: xxxStyle.xxx</span><br><span class="line">import appStyle from &quot;.&#x2F;style.module.css&quot;;</span><br><span class="line">const index &#x3D; memo(function index(props) &#123;</span><br><span class="line">  &#x2F;&#x2F; console.log(appStyle);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">      App</span><br><span class="line">      &lt;h2 className&#x3D;&#123;appStyle.title&#125;&gt;APP Title&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;Home &#x2F;&gt;</span><br><span class="line">      &lt;Profile &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">export default index;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Home.js</span><br><span class="line">import React, &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line">import homeStyle from &quot;.&#x2F;style.module.css&quot;;</span><br><span class="line"></span><br><span class="line">const index &#x3D; memo(function index(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      Home</span><br><span class="line">      &lt;h2 className&#x3D;&#123;homeStyle.title&#125;&gt;Home Title&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">export default index;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Profile.js</span><br><span class="line">import React, &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line">import profileStyle from &quot;.&#x2F;style.module.css&quot;;</span><br><span class="line"></span><br><span class="line">const index &#x3D; memo(function index(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      Profile</span><br><span class="line">      &lt;h2 className&#x3D;&#123;profileStyle.title&#125;&gt;Profile Title&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">export default index;</span><br></pre></td></tr></table></figure>
</li>
<li><p>styled-components</p>
<p>Use the principal of Label Template String</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Basic Usage</span><br><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">import React, &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; HomeWrapper, TitleWrapper &#125; from &quot;.&#x2F;style&quot;;</span><br><span class="line"></span><br><span class="line">const index &#x3D; memo(function index(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;HomeWrapper&gt;</span><br><span class="line">      &lt;div className&#x3D;&quot;banner&quot;&gt;</span><br><span class="line">        &lt;span className&#x3D;&quot;active&quot;&gt;Home1&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span&gt;Home2&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span&gt;Home3&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;TitleWrapper&gt;Home Title&lt;&#x2F;TitleWrapper&gt;</span><br><span class="line">    &lt;&#x2F;HomeWrapper&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">export default index;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; style.js</span><br><span class="line">import styled from &quot;styled-components&quot;;</span><br><span class="line"></span><br><span class="line">export const HomeWrapper &#x3D; styled.div&#96;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  color: red;</span><br><span class="line"></span><br><span class="line">  .banner &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    span &#123;</span><br><span class="line">      color: #fff;</span><br><span class="line">      &amp;.active &#123;</span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        color: green;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        content: &quot;&lt;--&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Use the theme props</span><br><span class="line">export const TitleWrapper &#x3D; styled.h2&#96;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">  font-size: $&#123;(props) &#x3D;&gt; props.theme.fontSize&#125;;</span><br><span class="line">  color: $&#123;(props) &#x3D;&gt; props.theme.color&#125;;</span><br><span class="line">&#96;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; SSInput &#125; from &quot;.&#x2F;style&quot;;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 1.Attribute Penetration</span><br><span class="line"> * 2.Dynamic Props</span><br><span class="line"> *&#x2F;</span><br><span class="line">class index extends PureComponent &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      textColor: &quot;blue&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;hr &#x2F;&gt;</span><br><span class="line">        &lt;div&gt;Profile&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;password&quot; &#x2F;&gt;</span><br><span class="line">        &lt;SSInput type&#x3D;&quot;password&quot; textColor&#x3D;&#123;this.state.textColor&#125; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default index;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; style.js</span><br><span class="line">import styled from &quot;styled-components&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; attrs function can set some default value</span><br><span class="line">export const SSInput &#x3D; styled.input.attrs(&#123;</span><br><span class="line">  placeholder: &quot;SmallStars&quot;,</span><br><span class="line">  borderColor: &quot;red&quot;,</span><br><span class="line">&#125;)&#96;</span><br><span class="line">  border-color: $&#123;(props) &#x3D;&gt; props.borderColor&#125;;</span><br><span class="line">  color: $&#123;(props) &#x3D;&gt; props.textColor&#125;;</span><br><span class="line">&#96;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Style Inheritance and Theme Props Shared</span><br><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">import React, &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; ThemeProvider &#125; from &quot;styled-components&quot;;</span><br><span class="line">import Home from &quot;..&#x2F;home&quot;;</span><br><span class="line">import Profile from &quot;..&#x2F;profile&quot;;</span><br><span class="line">import &#123; Button, PrimaryButton &#125; from &quot;.&#x2F;style&quot;;</span><br><span class="line">const index &#x3D; memo(function index(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &#x2F;&#x2F; Theme Settings</span><br><span class="line">    &lt;ThemeProvider theme&#x3D;&#123;&#123; color: &quot;yellow&quot;, fontSize: &quot;40px&quot; &#125;&#125;&gt;</span><br><span class="line">      App</span><br><span class="line">      &lt;h2&gt;APP Title&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;Home &#x2F;&gt;</span><br><span class="line">      &lt;Profile &#x2F;&gt;</span><br><span class="line">      &lt;Button&gt;Button&lt;&#x2F;Button&gt;</span><br><span class="line">      &lt;PrimaryButton&gt;PrimaryButton&lt;&#x2F;PrimaryButton&gt;</span><br><span class="line">    &lt;&#x2F;ThemeProvider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">export default index;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; style.js</span><br><span class="line">import styled from &quot;styled-components&quot;;</span><br><span class="line"></span><br><span class="line">export const Button &#x3D; styled.button&#96;</span><br><span class="line">  padding: 10px 20px;</span><br><span class="line">  color: red;</span><br><span class="line">  border-color: blue;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">&#96;;</span><br><span class="line">export const PrimaryButton &#x3D; styled(Button)&#96;</span><br><span class="line">  color: orange;</span><br><span class="line">  border-color: pink;</span><br><span class="line">&#96;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><ul>
<li>Single Data Source<ul>
<li>All states is stored in an Object Tree, and the Object Tree is stored in only one store</li>
<li>Easy to maintain, track and modify</li>
</ul>
</li>
<li>State is read-only<ul>
<li>The only way to change states is to use action</li>
</ul>
</li>
<li>Use pure function</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/STA/Redux-Process.png" alt="Redux Process"></p>
<pre class="mermaid">sequenceDiagram
    participant v as view
    participant r as reducer
    participant s as state

    v->>r: dispatch(action)
    r->>s: change state
    s->>s: Shallow comparison and Update
    s->>v: call render() to update view</pre>

<ul>
<li><p>Basic Usage</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; node index.js</span><br><span class="line">const redux &#x3D; require(&quot;redux&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; store</span><br><span class="line">const store &#x3D; redux.createStore(reducer);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; state</span><br><span class="line">const initState &#x3D; &#123;</span><br><span class="line">  counter: 0,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; subscribe</span><br><span class="line">store.subscribe(() &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&quot;counter&quot;, store.getState().counter);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reducer</span><br><span class="line">const reducer &#x3D; (state &#x3D; initState, action) &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; type, payload &#125; &#x3D; action;</span><br><span class="line">  switch (type) &#123;</span><br><span class="line">    case &quot;INCREMENT&quot;:</span><br><span class="line">      return &#123; ...state, counter: state.counter + 1 &#125;;</span><br><span class="line">    case &quot;DECREMENT&quot;:</span><br><span class="line">      return &#123; ...state, counter: state.counter + 1 &#125;;</span><br><span class="line">    case &quot;ADD_NUMBER&quot;:</span><br><span class="line">      return &#123; ...state, counter: state.counter + payload.counter &#125;;</span><br><span class="line">    case &quot;SUB_NUMBER&quot;:</span><br><span class="line">      return &#123; ...state, counter: state.counter - payload.counter &#125;;</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; action</span><br><span class="line">const action1 &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  type: &quot;INCREMENT&quot;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const action2 &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  type: &quot;DECREMENT&quot;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const action3 &#x3D; (num) &#x3D;&gt; (&#123;</span><br><span class="line">  type: &quot;ADD_NUMBER&quot;,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    num,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const action4 &#x3D; (num) &#x3D;&gt; (&#123;</span><br><span class="line">  type: &quot;SUB_NUMBER&quot;,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    num,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; dispatch</span><br><span class="line">store.dispatch(action1());</span><br><span class="line">store.dispatch(action1());</span><br><span class="line">store.dispatch(action2());</span><br><span class="line">store.dispatch(action2());</span><br><span class="line">store.dispatch(action3(5));</span><br><span class="line">store.dispatch(action4(12));</span><br></pre></td></tr></table></figure>
</li>
<li><p>Module Redux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * │  index.js</span><br><span class="line"> * │  package-lock.json</span><br><span class="line"> * │  package.json</span><br><span class="line"> * └─store</span><br><span class="line"> *         actionCreator.js</span><br><span class="line"> *         constants.js</span><br><span class="line"> *         index.js</span><br><span class="line"> *         reducer.js</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; store</span><br><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">import redux from &quot;redux&quot;;</span><br><span class="line">import reducer from &quot;.&#x2F;reducer.js&quot;;</span><br><span class="line">const store &#x3D; redux.createStore(reducer);</span><br><span class="line">export default store;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; actionCreator.js</span><br><span class="line">import &#123; ADD_NUMBER, SUB_NUMBER &#125; from &quot;.&#x2F;constants.js&quot;;</span><br><span class="line"></span><br><span class="line">export const addAction &#x3D; (num) &#x3D;&gt; (&#123;</span><br><span class="line">  type: ADD_NUMBER,</span><br><span class="line">  num,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const subAction &#x3D; (num) &#x3D;&gt; (&#123;</span><br><span class="line">  type: SUB_NUMBER,</span><br><span class="line">  num,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reducer.js</span><br><span class="line">import &#123; ADD_NUMBER, SUB_NUMBER &#125; from &quot;.&#x2F;constants.js&quot;;</span><br><span class="line">const defaultState &#x3D; &#123;</span><br><span class="line">  counter: 0,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function reducer(state &#x3D; defaultState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case ADD_NUMBER:</span><br><span class="line">      return &#123; ...state, counter: state.counter + action.num &#125;;</span><br><span class="line">    case SUB_NUMBER:</span><br><span class="line">      return &#123; ...state, counter: state.counter - action.num &#125;;</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default reducer;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">import store from &quot;.&#x2F;store&#x2F;index.js&quot;;</span><br><span class="line">import &#123; addAction, subAction &#125; from &quot;.&#x2F;store&#x2F;actionCreator.js&quot;;</span><br><span class="line"></span><br><span class="line">store.subscribe(() &#x3D;&gt; &#123;</span><br><span class="line">  console.log(store.getState());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">store.dispatch(addAction(10));</span><br><span class="line">store.dispatch(addAction(15));</span><br><span class="line">store.dispatch(addAction(10));</span><br><span class="line">store.dispatch(subAction(20));</span><br><span class="line">store.dispatch(subAction(3));</span><br><span class="line">store.dispatch(subAction(1));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Connect-HOC"><a href="#Connect-HOC" class="headerlink" title="Connect(HOC)"></a>Connect(HOC)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; App.js</span><br><span class="line">const mapStateToProps &#x3D; (state) &#x3D;&gt; (&#123;</span><br><span class="line">  xxx: xxx</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps &#x3D; (dispatch) &#x3D;&gt; (&#123;</span><br><span class="line">  func() &#123;</span><br><span class="line">    dispatch(action())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(App);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Basic connect.js</span><br><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line">import store from &quot;..&#x2F;store&quot;;</span><br><span class="line"></span><br><span class="line">export const connect &#x3D; (mapStateToProps, mapDispatchToProps) &#x3D;&gt; &#123;</span><br><span class="line">  return (WrappedComponent) &#x3D;&gt; &#123;</span><br><span class="line">    return class extends PureComponent &#123;</span><br><span class="line">      constructor(props) &#123;</span><br><span class="line">        super();</span><br><span class="line"></span><br><span class="line">        this.stateStore &#x3D; &#123;</span><br><span class="line">          &#x2F;&#x2F; Listen the incoming state change through own state, and call render function to update</span><br><span class="line">          stateStore: mapStateToProps(store.getState()),</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentDidMount() &#123;</span><br><span class="line">        this.unSubscribe &#x3D; store.subscribe(() &#x3D;&gt; &#123;</span><br><span class="line">          this.setState(&#123;</span><br><span class="line">            stateStore: mapStateToProps(store.getState()),</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentWillUnmount() &#123;</span><br><span class="line">        this.unSubscribe();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      render() &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;WrappedComponent</span><br><span class="line">            &#123;...this.props&#125;</span><br><span class="line">            &#123;...mapStateToProps(store.getState())&#125;</span><br><span class="line">            &#123;...mapDispatchToProps(store.dispatch)&#125;</span><br><span class="line">          &#x2F;&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>props and context</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Advanced(Use Context) connect.js</span><br><span class="line">&#x2F;&#x2F; context.js</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">const StoreContext &#x3D; React.createContext();</span><br><span class="line">export &#123; StoreContext &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; connect.js</span><br><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; StoreContext &#125; from &quot;.&#x2F;context&quot;;</span><br><span class="line"></span><br><span class="line">export const connect &#x3D; (mapStateToProps, mapDispatchToProps) &#x3D;&gt; &#123;</span><br><span class="line">  return (WrappedComponent) &#x3D;&gt; &#123;</span><br><span class="line">    class EnhanceComponent extends PureComponent &#123;</span><br><span class="line">      constructor(props, context) &#123;</span><br><span class="line">        super();</span><br><span class="line"></span><br><span class="line">        this.stateStore &#x3D; &#123;</span><br><span class="line">          &#x2F;&#x2F; This.context hasn&#39;t been assigned here yet</span><br><span class="line">          stateStore: mapStateToProps(context.getState()),</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentDidMount() &#123;</span><br><span class="line">        this.unSubscribe &#x3D; this.context.subscribe(() &#x3D;&gt; &#123;</span><br><span class="line">          this.setState(&#123;</span><br><span class="line">            stateStore: mapStateToProps(this.context.getState()),</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentWillUnmount() &#123;</span><br><span class="line">        this.unSubscribe();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      render() &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;WrappedComponent</span><br><span class="line">            &#123;...this.props&#125;</span><br><span class="line">            &#123;...mapStateToProps(this.context.getState())&#125;</span><br><span class="line">            &#123;...mapDispatchToProps(this.context.dispatch)&#125;</span><br><span class="line">          &#x2F;&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EnhanceComponent.contextType &#x3D; StoreContext;</span><br><span class="line"></span><br><span class="line">    return EnhanceComponent;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">import App from &quot;.&#x2F;App&quot;;</span><br><span class="line">import store from &quot;.&#x2F;store&quot;;</span><br><span class="line">import &#123; StoreContext &#125; from &quot;.&#x2F;utils&#x2F;context&quot;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;StoreContext.Provider value&#x3D;&#123;store&#125;&gt;</span><br><span class="line">    &lt;App &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;StoreContext.Provider&gt;,</span><br><span class="line">  document.getElementById(&quot;root&quot;)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><ul>
<li><p>redux-thunk</p>
<p>dispatch(action Object ==&gt; action Function): We can make network requests in the function</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; App.js</span><br><span class="line">import &#123; getHomeMultiDataAction &#125; from &quot;..&#x2F;store&#x2F;home&#x2F;actionCreator&quot;;</span><br><span class="line">const mapDispatchToProps &#x3D; (dispatch) &#x3D;&gt; (&#123;</span><br><span class="line">  &#x2F;&#x2F; What we pass in here is a function, not an object</span><br><span class="line">  &#x2F;&#x2F; and we do not need to call the function manually</span><br><span class="line">  getHomeMultiData() &#123;</span><br><span class="line">    dispatch(getHomeMultiDataAction);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; actionCreator.js</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import &#123; CHANGE_BANNER, CHANGE_RECOMMEND &#125; from &quot;.&#x2F;constants.js&quot;;</span><br><span class="line">export const changeBannerAction &#x3D; (banner) &#x3D;&gt; (&#123;</span><br><span class="line">  type: CHANGE_BANNER,</span><br><span class="line">  banner,</span><br><span class="line">&#125;);</span><br><span class="line">export const getHomeMultiDataAction &#x3D; (dispatch, getState) &#x3D;&gt; &#123;</span><br><span class="line">  axios(&#123;</span><br><span class="line">    url: &quot;http:&#x2F;&#x2F;123.45.67.89:8000&#x2F;home&#x2F;MultiData&quot;,</span><br><span class="line">  &#125;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">    const &#123; data &#125; &#x3D; res.data;</span><br><span class="line">    &#x2F;&#x2F; console.log(data);</span><br><span class="line">    dispatch(changeBannerAction(data.banner.list));</span><br><span class="line">  &#125;);</span><br><span class="line">  &#x2F;&#x2F; console.log(getState());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reducer.js</span><br><span class="line">import &#123; CHANGE_BANNER, CHANGE_RECOMMEND &#125; from &quot;.&#x2F;constants.js&quot;;</span><br><span class="line">&#x2F;&#x2F; home</span><br><span class="line">const initHomeState &#x3D; &#123;</span><br><span class="line">  banner: [],</span><br><span class="line">  recommend: [],</span><br><span class="line">&#125;;</span><br><span class="line">function homeReducer(homeInfo &#x3D; initHomeState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case CHANGE_BANNER:</span><br><span class="line">      return &#123; ...homeInfo, banner: action.banner &#125;;</span><br><span class="line">    case CHANGE_RECOMMEND:</span><br><span class="line">      return &#123; ...homeInfo, recommend: action.recommend &#125;;</span><br><span class="line">    default:</span><br><span class="line">      return homeInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default homeReducer;</span><br></pre></td></tr></table></figure>
</li>
<li><p>redux-saga</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">import &#123; createStore, applyMiddleware &#125; from &quot;redux&quot;;</span><br><span class="line">import reducer from &quot;.&#x2F;reducer&quot;;</span><br><span class="line">&#x2F;&#x2F; thunk</span><br><span class="line">import thunkMiddleware from &quot;redux-thunk&quot;;</span><br><span class="line">&#x2F;&#x2F; saga</span><br><span class="line">import createSagaMiddleware from &quot;redux-saga&quot;;</span><br><span class="line">import mySaga from &quot;.&#x2F;home&#x2F;saga&quot;;</span><br><span class="line">const sagaMiddleware &#x3D; createSagaMiddleware();</span><br><span class="line">const storeEnhancer &#x3D; applyMiddleware(thunkMiddleware, sagaMiddleware);</span><br><span class="line">const store &#x3D; createStore(reducer, storeEnhancer);</span><br><span class="line">&#x2F;&#x2F; generator Function</span><br><span class="line">sagaMiddleware.run(mySaga);</span><br><span class="line">export default store;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; saga.js</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import &#123; all, put, takeEvery &#125; from &quot;redux-saga&#x2F;effects&quot;;</span><br><span class="line">import &#123; FETCH_GET_MultiData &#125; from &quot;.&#x2F;constants&quot;;</span><br><span class="line">import &#123; changeBannerAction, changeRecommendAction &#125; from &quot;.&#x2F;actionCreator&quot;;</span><br><span class="line"></span><br><span class="line">function* fetchGetMultiData(action) &#123;</span><br><span class="line">  const &#123;</span><br><span class="line">    data: &#123; data &#125;,</span><br><span class="line">  &#125; &#x3D; yield axios(&#123;</span><br><span class="line">    url: &quot;http:&#x2F;&#x2F;123.45.67.89:8000&#x2F;home&#x2F;MultiData&quot;,</span><br><span class="line">  &#125;);</span><br><span class="line">  yield all([</span><br><span class="line">    put(changeBannerAction(data.banner.list)),</span><br><span class="line">    put(changeRecommendAction(data.recommend.list)),</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line">function* mySaga() &#123;</span><br><span class="line">  &#x2F;&#x2F; takeLast: Execute the latest one</span><br><span class="line">  &#x2F;&#x2F; takeEvery: Every will be executed</span><br><span class="line">  &#x2F;&#x2F; action.type, generator</span><br><span class="line">  yield takeEvery(FETCH_GET_MultiData, fetchGetMultiData);</span><br><span class="line">&#125;</span><br><span class="line">export default mySaga;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; actionCreator.js</span><br><span class="line">export const fetchGetMultiDataAction &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">  type: FETCH_GET_MultiData,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; App.js</span><br><span class="line">const mapDispatchToProps &#x3D; (dispatch) &#x3D;&gt; (&#123;</span><br><span class="line">  &#x2F;&#x2F; Pass in an object</span><br><span class="line">  fetchGetMultiData() &#123;</span><br><span class="line">    dispatch(fetchGetMultiDataAction());</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><ul>
<li><p>props</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Component will help us to assign the props</span><br><span class="line">&#x2F;&#x2F; node_modules\react\cjs\react.development.js</span><br><span class="line">  function Component(props, context, updater) &#123;</span><br><span class="line">    this.props &#x3D; props;</span><br><span class="line">    this.context &#x3D; context; &#x2F;&#x2F; If a component has string refs, we will assign a different object later.</span><br><span class="line">    this.refs &#x3D; emptyObject; &#x2F;&#x2F; We initialize the default updater but the real one gets injected by the</span><br><span class="line">    &#x2F;&#x2F; renderer.</span><br><span class="line">    this.updater &#x3D; updater || ReactNoopUpdateQueue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;props are assigned manually</span><br><span class="line">&#x2F;&#x2F; react-test-renderer-shallow</span><br><span class="line">_proto2._reset &#x3D; function _reset() &#123;</span><br><span class="line">    this._context &#x3D; null;		&#x2F;&#x2F; get the context</span><br><span class="line">    this._element &#x3D; null;		&#x2F;&#x2F; if the label is a normal HTML tag</span><br><span class="line">    this._instance &#x3D; null;	&#x2F;&#x2F; if the label is a component</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; get the type of element</span><br><span class="line">var elementType &#x3D; reactIs.isMemo(element) ? element.type.type : element.type;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; determine whether elementType is a construct</span><br><span class="line">if (shouldConstruct(elementType)) &#123;</span><br><span class="line">    &#x2F;&#x2F; the elementType is the passed in component, but there is still no props here</span><br><span class="line">    this._instance &#x3D; new elementType(element.props, this._context, this._updater);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">    this._mountClassComponent(elementType, element, this._context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; in this function, props are assigned manually</span><br><span class="line">_proto2._mountClassComponent &#x3D; function _mountClassComponent(elementType, element, context) &#123;</span><br><span class="line">    this._instance.context &#x3D; context;		&#x2F;&#x2F; Assign the value to the context of _instance</span><br><span class="line">    this._instance.props &#x3D; element.props;	&#x2F;&#x2F; Assign the value to the props of _instance</span><br><span class="line">    this._instance.state &#x3D; this._instance.state || null;</span><br><span class="line">    this._instance.updater &#x3D; this._updater;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; The overridden lifecycles function will be called here</span><br><span class="line">    if (typeof this._instance.UNSAFE_componentWillMount &#x3D;&#x3D;&#x3D; &#39;function&#39; || typeof this._instance.componentWillMount &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">        var beforeState &#x3D; this._newState; &#x2F;&#x2F; In order to support react-lifecycles-compat polyfilled components,</span><br><span class="line">        &#x2F;&#x2F; Unsafe lifecycles should not be invoked for components using the new APIs.</span><br><span class="line"></span><br><span class="line">        if (typeof elementType.getDerivedStateFromProps !&#x3D;&#x3D; &#39;function&#39; &amp;&amp; typeof this._instance.getSnapshotBeforeUpdate !&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">            if (typeof this._instance.componentWillMount &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">                this._instance.componentWillMount();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (typeof this._instance.UNSAFE_componentWillMount &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">                this._instance.UNSAFE_componentWillMount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; &#x2F;&#x2F; setState may have been called during cWM</span><br><span class="line"></span><br><span class="line">        if (beforeState !&#x3D;&#x3D; this._newState) &#123;</span><br><span class="line">            this._instance.state &#x3D; this._newState || emptyObject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; props are assigned before the render function is executed</span><br><span class="line">    this._rendered &#x3D; this._instance.render(); &#x2F;&#x2F; Intentionally do not call componentDidMount()</span><br><span class="line">    &#x2F;&#x2F; because DOM refs are not available.</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>createElement</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; node_modules\react\cjs\react.development.js</span><br><span class="line">&#x2F;*</span><br><span class="line"> *type: div,p...</span><br><span class="line"> *config: name,className,style...</span><br><span class="line"> *children: array or ReactNode</span><br><span class="line">*&#x2F;</span><br><span class="line">function createElement(type, config, children) &#123;</span><br><span class="line">  var propName; &#x2F;&#x2F; Reserved names are extracted</span><br><span class="line">  var props &#x3D; &#123;&#125;;</span><br><span class="line">  var key &#x3D; null;</span><br><span class="line">  var ref &#x3D; null;</span><br><span class="line">  var self &#x3D; null;</span><br><span class="line">  var source &#x3D; null;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; keeping the configs</span><br><span class="line">  if (config !&#x3D; null) &#123;</span><br><span class="line">    if (hasValidRef(config)) &#123;</span><br><span class="line">      ref &#x3D; config.ref;</span><br><span class="line">      &#123;</span><br><span class="line">        warnIfStringRefCannotBeAutoConverted(config);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (hasValidKey(config)) &#123;</span><br><span class="line">      key &#x3D; &#39;&#39; + config.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self &#x3D; config.__self &#x3D;&#x3D;&#x3D; undefined ? null : config.__self;</span><br><span class="line">    source &#x3D; config.__source &#x3D;&#x3D;&#x3D; undefined ? null : config.__source; &#x2F;&#x2F; Remaining properties are added to a new props object</span><br><span class="line"></span><br><span class="line">    for (propName in config) &#123;</span><br><span class="line">      if (hasOwnProperty.call(config, propName) &amp;&amp; !RESERVED_PROPS.hasOwnProperty(propName)) &#123;</span><br><span class="line">        props[propName] &#x3D; config[propName];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; &#x2F;&#x2F; Children can be more than one argument, and those are transferred onto</span><br><span class="line">  &#x2F;&#x2F; the newly allocated props object.</span><br><span class="line">  var childrenLength &#x3D; arguments.length - 2;</span><br><span class="line">  &#x2F;&#x2F; get the child</span><br><span class="line">  if (childrenLength &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">    props.children &#x3D; children;</span><br><span class="line">  &#125; else if (childrenLength &gt; 1) &#123;</span><br><span class="line">    &#x2F;&#x2F; get the children</span><br><span class="line">    var childArray &#x3D; Array(childrenLength);</span><br><span class="line">    for (var i &#x3D; 0; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] &#x3D; arguments[i + 2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; Cannot modify the value of the object after Object.freeze(object)</span><br><span class="line">      if (Object.freeze) &#123;</span><br><span class="line">        Object.freeze(childArray);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    props.children &#x3D; childArray;</span><br><span class="line">  &#125; &#x2F;&#x2F; Resolve default props</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>setState</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; node_modules\react\cjs\react.development.js</span><br><span class="line">&#x2F;&#x2F; setState function is mounted on the prototype chain of Component</span><br><span class="line">Component.prototype.setState &#x3D; function (partialState, callback) &#123;</span><br><span class="line">  this.updater.enqueueSetState(this, partialState, callback, &#39;setState&#39;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; react-reconciler\src\ReactFiberClassComponent.js</span><br><span class="line">&#x2F;&#x2F; classComponentUpdater function</span><br><span class="line">const classComponentUpdater&#x3D;&#123;</span><br><span class="line">    enqueueSetState(inst, payload, callback) &#123;</span><br><span class="line">    const fiber &#x3D; getInstance(inst);</span><br><span class="line">    const currentTime &#x3D; requestCurrentTime();	&#x2F;&#x2F; return the different time  according the different context</span><br><span class="line">    										&#x2F;&#x2F; like composite Event and setTimeout is different context</span><br><span class="line">    const suspenseConfig &#x3D; requestCurrentSuspenseConfig()</span><br><span class="line">    const expirationTime &#x3D; computeExpirationForFiber(currentTime, fiber, suspenseConfig); &#x2F;&#x2F; get the expiration time</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; computeExpirationForFiber function</span><br><span class="line">function computeExpirationForFiber(currentTime, fiber, suspenseConfig) &#123;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">  if ((mode &amp; ConcurrentMode) &#x3D;&#x3D;&#x3D; NoMode) &#123;</span><br><span class="line">    return priorityLevel &#x3D;&#x3D;&#x3D; ImmediatePriority ? Sync : Batched;	&#x2F;&#x2F;  Sync ? setState is sync : setState is async</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>setStateMerging</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Data Merging</span><br><span class="line">&#x2F;&#x2F; packages\react-reconciler\src\ReactUpdateQueue.new.js</span><br><span class="line">&#x2F;&#x2F; update is a linked list structure</span><br><span class="line">export function enqueueUpdate&lt;State&gt;(fiber: Fiber, update: Update&lt;State&gt;) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  const sharedQueue: SharedQueue&lt;State&gt; &#x3D; (updateQueue: any).shared;</span><br><span class="line">  const pending &#x3D; sharedQueue.pending;</span><br><span class="line">  if (pending &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class="line">    &#x2F;&#x2F; This is the first update. Create a circular list.</span><br><span class="line">    update.next &#x3D; update;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    update.next &#x3D; pending.next;</span><br><span class="line">    pending.next &#x3D; update;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; setState Merging</span><br><span class="line">  do &#123;</span><br><span class="line">      &#x2F;&#x2F;...</span><br><span class="line">      &#x2F;&#x2F; Process this update.</span><br><span class="line">      newState &#x3D; getStateFromUpdate(</span><br><span class="line">          workInProgress,</span><br><span class="line">          queue,</span><br><span class="line">          update,</span><br><span class="line">          newState,</span><br><span class="line">          props,</span><br><span class="line">          instance,</span><br><span class="line">        )</span><br><span class="line">      &#x2F;&#x2F; ...</span><br><span class="line">      &#x2F;&#x2F; Merging the setState use do while structure</span><br><span class="line">      update &#x3D; update.next;</span><br><span class="line">  &#125; while (true);</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  sharedQueue.pending &#x3D; update;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; getStateFromUpdate function return a newState</span><br><span class="line">case UpdateState: &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  &#x2F;&#x2F; Merge the partial state and the previous state.</span><br><span class="line">  return Object.assign(&#123;&#125;, prevState, partialState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; pass in function</span><br><span class="line">case UpdateState: &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  if (typeof payload &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    &#x2F;&#x2F; there will execute the function, so the prevState will change, not merging</span><br><span class="line">    partialState &#x3D; payload.call(instance, prevState, nextProps);</span><br><span class="line">	&#x2F;&#x2F; ...</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F; Partial state object</span><br><span class="line">    partialState &#x3D; payload;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>shouldComponentUpdate</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; packages\react-reconciler\src\ReactFiberClassComponent.js</span><br><span class="line">function checkShouldComponentUpdate(</span><br><span class="line">  workInProgress,</span><br><span class="line">  ctor,</span><br><span class="line">  oldProps,</span><br><span class="line">  newProps,</span><br><span class="line">  oldState,</span><br><span class="line">  newState,</span><br><span class="line">  nextContext,</span><br><span class="line">) &#123;</span><br><span class="line">  const instance &#x3D; workInProgress.stateNode;</span><br><span class="line">  &#x2F;&#x2F; Call the rewritten shouldComponentUpdate function</span><br><span class="line">  if (typeof instance.shouldComponentUpdate &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    const shouldUpdate &#x3D; instance.shouldComponentUpdate(</span><br><span class="line">      newProps,</span><br><span class="line">      newState,</span><br><span class="line">      nextContext,</span><br><span class="line">    );</span><br><span class="line">	&#x2F;&#x2F; ...</span><br><span class="line">    return shouldUpdate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; If it&#39;s PureReactComponent, shallow comparison is made</span><br><span class="line">  if (ctor.prototype &amp;&amp; ctor.prototype.isPureReactComponent) &#123;</span><br><span class="line">    return (</span><br><span class="line">      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; default return true</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; packages\react\src\ReactBaseClasses.js</span><br><span class="line">Component.prototype.isReactComponent &#x3D; &#123;&#125;;</span><br><span class="line">const pureComponentPrototype &#x3D; (PureComponent.prototype &#x3D; new ComponentDummy());</span><br><span class="line">pureComponentPrototype.isPureReactComponent &#x3D; true;</span><br></pre></td></tr></table></figure>
</li>
<li><p>shallowEqual</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function shallowEqual(objA: mixed, objB: mixed): boolean &#123;</span><br><span class="line">  if (is(objA, objB)) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (</span><br><span class="line">    typeof objA !&#x3D;&#x3D; &#39;object&#39; ||</span><br><span class="line">    objA &#x3D;&#x3D;&#x3D; null ||</span><br><span class="line">    typeof objB !&#x3D;&#x3D; &#39;object&#39; ||</span><br><span class="line">    objB &#x3D;&#x3D;&#x3D; null</span><br><span class="line">  ) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const keysA &#x3D; Object.keys(objA);</span><br><span class="line">  const keysB &#x3D; Object.keys(objB);</span><br><span class="line"></span><br><span class="line">  if (keysA.length !&#x3D;&#x3D; keysB.length) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Test for A&#39;s keys different from B.</span><br><span class="line">  for (let i &#x3D; 0; i &lt; keysA.length; i++) &#123;</span><br><span class="line">    if (</span><br><span class="line">      !hasOwnProperty.call(objB, keysA[i]) ||</span><br><span class="line">      !is(objA[keysA[i]], objB[keysA[i]])</span><br><span class="line">    ) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>combineReducers</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function combineReducers(reducers) &#123;</span><br><span class="line">  var reducerKeys &#x3D; Object.keys(reducers);</span><br><span class="line">  var finalReducers &#x3D; &#123;&#125;;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; reducerKeys.length; i++) &#123;</span><br><span class="line">    var key &#x3D; reducerKeys[i];</span><br><span class="line">  &#125;</span><br><span class="line">  var finalReducerKeys &#x3D; Object.keys(finalReducers); &#x2F;&#x2F; This is used to make sure we don&#39;t warn about the same</span><br><span class="line">  &#x2F;&#x2F; keys multiple times.</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  return function combination(state, action) &#123;</span><br><span class="line">		&#x2F;&#x2F; ...</span><br><span class="line">    var hasChanged &#x3D; false;</span><br><span class="line">    var nextState &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    for (var _i &#x3D; 0; _i &lt; finalReducerKeys.length; _i++) &#123;</span><br><span class="line">      var _key &#x3D; finalReducerKeys[_i];</span><br><span class="line">      var reducer &#x3D; finalReducers[_key];</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; get the before and after value</span><br><span class="line">      var previousStateForKey &#x3D; state[_key];</span><br><span class="line">      var nextStateForKey &#x3D; reducer(previousStateForKey, action);</span><br><span class="line">      &#x2F;&#x2F; ...</span><br><span class="line">      &#x2F;&#x2F; Determine if the two values are equal</span><br><span class="line">      nextState[_key] &#x3D; nextStateForKey;</span><br><span class="line">      hasChanged &#x3D; hasChanged || nextStateForKey !&#x3D;&#x3D; previousStateForKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hasChanged &#x3D; hasChanged || finalReducerKeys.length !&#x3D;&#x3D; Object.keys(state).length;</span><br><span class="line">    return hasChanged ? nextState : state;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Extra-Knowledge"><a href="#Extra-Knowledge" class="headerlink" title="Extra Knowledge"></a>Extra Knowledge</h1><h2 id="Label-Template-String"><a href="#Label-Template-String" class="headerlink" title="Label Template String"></a>Label Template String</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> name = <span class="string">&quot;SmallStars&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> age = <span class="number">18</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> message = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>`</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...args</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(args);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(message);</span></span><br><span class="line"><span class="javascript">  test(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// it splits the string</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// [Array(3), &quot;SmallStars&quot;, 18]</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// [&quot;my name is &quot;, &quot;, my age is &quot;, &quot;&quot;, raw: Array(3)]</span></span></span><br><span class="line"><span class="javascript">  test<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>, my age is <span class="subst">$&#123;age&#125;</span>`</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
</search>
