<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SmallStars&#39;s blog</title>
  
  
  <link href="http://blog.smallstars.top/atom.xml" rel="self"/>
  
  <link href="http://blog.smallstars.top/"/>
  <updated>2022-01-04T15:06:46.357Z</updated>
  <id>http://blog.smallstars.top/</id>
  
  <author>
    <name>SmallStars</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue2-vue3</title>
    <link href="http://blog.smallstars.top/posts/9359b45b/"/>
    <id>http://blog.smallstars.top/posts/9359b45b/</id>
    <published>2021-09-10T04:32:13.000Z</published>
    <updated>2022-01-04T15:06:46.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-optimization"><a href="#Vue3-optimization" class="headerlink" title="Vue3 optimization"></a>Vue3 optimization</h1><h2 id="Differences-of-Vue2-and-Vue3"><a href="#Differences-of-Vue2-and-Vue3" class="headerlink" title="Differences of Vue2 and Vue3"></a>Differences of Vue2 and Vue3</h2><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><ul><li>diff Algorithm<ul><li>VNodes in Vue2 will be completely compared</li><li>Vue3 adds a static flag(PatchFlat). While comparing, only nodes with static flags are compared, and the specific comparison content can be learned through the flags</li></ul></li></ul><p><img data-src="" alt="Vue2 diff"></p><p><strong>In a word，The pointers on sides both are compared and move to the middle until oldCn or newCn traversed completely. When the object is too large will be slowly</strong></p><p>PatchFlag is roughly is divided into two types</p><ol><li>Greater than 0，it’s an element that can be optimized and updated during patch VNode or render</li><li>Less than 0, the element needs full diff</li></ol><p>In this way, the element that don’t need to update will only be created by once,and directly reused when render</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>SmallStars<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createElementVNode <span class="keyword">as</span> _createElementVNode,</span><br><span class="line">  toDisplayString <span class="keyword">as</span> _toDisplayString,</span><br><span class="line">  Fragment <span class="keyword">as</span> _Fragment,</span><br><span class="line">  openBlock <span class="keyword">as</span> _openBlock,</span><br><span class="line">  createElementBlock <span class="keyword">as</span> _createElementBlock,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _hoisted_1 = <span class="comment">/*#__PURE__*/</span> _createElementVNode(</span><br><span class="line">  <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;Hello World!&quot;</span>,</span><br><span class="line">  -<span class="number">1</span> <span class="comment">/* HOISTED */</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> _hoisted_2 = <span class="comment">/*#__PURE__*/</span> _createElementVNode(</span><br><span class="line">  <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;SmallStars&quot;</span>,</span><br><span class="line">  -<span class="number">1</span> <span class="comment">/* HOISTED */</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    _openBlock(),</span><br><span class="line">    _createElementBlock(</span><br><span class="line">      _Fragment,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      [</span><br><span class="line">        _hoisted_1,</span><br><span class="line">        _createElementVNode(</span><br><span class="line">          <span class="string">&quot;div&quot;</span>,</span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          _toDisplayString(_ctx.msg),</span><br><span class="line">          <span class="number">1</span> <span class="comment">/* TEXT */</span></span><br><span class="line">        ),</span><br><span class="line">        _hoisted_2,</span><br><span class="line">      ],</span><br><span class="line">      <span class="number">64</span> <span class="comment">/* STABLE_FRAGMENT */</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Patch flags can be combined using the | bitwise operator and can be checked using the &amp; operator, e.g.</span></span><br><span class="line"><span class="comment">// const flag = TEXT | CLASS</span></span><br><span class="line"><span class="comment">// if (flag &amp; TEXT)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="built_in">enum</span> PatchFlags &#123;</span><br><span class="line">  TEXT = <span class="number">1</span>,</span><br><span class="line">  CLASS = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">  STYLE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">  PROPS = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">  FULL_PROPS = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">  HYDRATE_EVENTS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  STABLE_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,</span><br><span class="line">  KEYED_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,</span><br><span class="line">  UNKEYED_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,</span><br><span class="line">  NEED_PATCH = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,</span><br><span class="line">  DYNAMIC_SLOTS = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,</span><br><span class="line">  <span class="comment">// Special flags are not used in optimization</span></span><br><span class="line">  HOISTED = -<span class="number">1</span>,</span><br><span class="line">  BAIL = -<span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Cache of events</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;btnClick&quot;&gt;SmallStars&lt;/button&gt;</span><br><span class="line">import &#123; openBlock as _openBlock, createElementBlock as _createElementBlock &#125; from &quot;vue&quot;</span><br><span class="line">export function render(_ctx, _cache, $props, $setup, $data, $options)&#123;</span><br><span class="line">  return (_openBlock(),</span><br><span class="line">          _createElementBlock(&quot;button&quot;,</span><br><span class="line">                              &#123;onClick: _cache[0] || (_cache[0] = (...args) =&gt; (_ctx.btnClick &amp;&amp; _ctx.btnClick(...args)))&#125;,</span><br><span class="line">                              &quot;SmallStars&quot;)</span><br><span class="line">         )</span><br><span class="line">&#125; // Check the console for the AST</span><br></pre></td></tr></table></figure><h3 id="Build-of-used"><a href="#Build-of-used" class="headerlink" title="Build of used"></a>Build of used</h3><p>Vue3 introduces the <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Tree_shaking">Tree shaking</a> feature, which removes useless code when packing, reduces the volume of the packaging, and reduces the execution time of the program</p><h3 id="Fragment-Teleport-Suspense"><a href="#Fragment-Teleport-Suspense" class="headerlink" title="Fragment, Teleport, Suspense"></a>Fragment, Teleport, Suspense</h3><ul><li><p>Fragment</p><p><strong>Vue2 instance only has only one root node, because it needs to be bound to a DOM element. Fragment label resolved this problem in Vue3, and it doesn’t display in DOM</strong></p></li><li><p>Teleport</p><p><strong>Component Development encourages us build our UIs and actions to into components, these components are combined into a component tree. However, sometimes a part of components’ template belong to those components logically, it would be preferable to move this part to somewhere else in DOM, outside of the Vue app. For example, the modal of full-screen.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;noscript&gt;</span><br><span class="line">    &lt;strong&gt;We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt;</span><br><span class="line">  &lt;/noscript&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">  // Add a new anchor point</span><br><span class="line">  &lt;div id=&quot;modal&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- built files will be auto injected --&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">app.component( &#x27;modal-button&#x27;, &#123; template: `</span><br><span class="line">&lt;button @click=&quot;modalOpen = true&quot;&gt;</span><br><span class="line">    Open full screen modal! (With teleport!)</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;teleport to=&quot;modal&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;modalOpen&quot; class=&quot;modal&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt; Content &lt;/span&gt;</span><br><span class="line">        &lt;button @click=&quot;modalOpen = false&quot;&gt;Close&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/teleport&gt;</span><br><span class="line">`, data() &#123; return &#123; modalOpen: false &#125; &#125; &#125;)</span><br></pre></td></tr></table></figure></li><li><p>Suspense</p><p><strong>Suspense is a component with slots. Before display content is fully rendered, the alternate content is displayed to occupy the place. If it’s a asynchronous component, Suspense will wait for the components and use onErrorCaptured to capture the error</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; result &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &quot;vue&quot;;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    //Suspense needs to return a Promise</span><br><span class="line">    return new Promise((resolve) =&gt; &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        return resolve(&#123;</span><br><span class="line">          result: &quot;10000&quot;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, 3000);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">  &lt;template #default&gt;</span><br><span class="line">    &lt;async-show /&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;template #fallback&gt;</span><br><span class="line">    Loading...</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Custom-Renderer-API"><a href="#Custom-Renderer-API" class="headerlink" title="Custom Renderer API"></a>Custom Renderer API</h3><p>Our template code will be converted into the html code through <a href="https://vue3js.cn/global/createApp.html">createApp</a> of Vue. Also you can use this ability to render some other things what you need through Vue’s <a href="https://ssr.vuejs.org/zh/api/#createrenderer">Custom Renderer API</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRenderer &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/runtime-core&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> renderer = createRenderer(&#123;</span><br><span class="line">  <span class="function"><span class="title">createElement</span>(<span class="params"><span class="keyword">type</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> element;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;div&quot;</span>:</span><br><span class="line">        element = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setElementText</span>(<span class="params">node, text</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(text);</span><br><span class="line">    node.appendChild(textNode);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">createText</span>(<span class="params">text</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.createTextNode(text);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">rootComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> renderer.createApp(rootComponent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-differences-of-lifecycle"><a href="#The-differences-of-lifecycle" class="headerlink" title="The differences of lifecycle"></a>The differences of lifecycle</h3><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/Vue/vue3-lifecycle.png" alt="vue3-lifecycle"></p><div class="table-container"><table><thead><tr><th>Vue2</th><th>Vue3</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup</td></tr><tr><td>created</td><td>setup</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestroy</td><td>onBeforeDestroy</td></tr><tr><td>destroyed</td><td>onDestroyed</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr></tbody></table></div><h2 id="Responsive"><a href="#Responsive" class="headerlink" title="Responsive"></a>Responsive</h2><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/Vue/vue3-responsive.png" alt="vue3-responsive"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue3 Responsive principle</span></span><br><span class="line"><span class="comment">// utils</span></span><br><span class="line"><span class="keyword">const</span> isObject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> !!val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&quot;object&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dataLog = <span class="function">(<span class="params">title, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(title);</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 13.To prevent the duplication of proxy</span></span><br><span class="line"><span class="comment"> * toProxy: &#123;Original: Proxy&#125;</span></span><br><span class="line"><span class="comment"> * toRaw: &#123;Proxy: Original&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// const info = &#123; a: 1 &#125;;</span></span><br><span class="line"><span class="comment">// const b = reactive(info);</span></span><br><span class="line"><span class="comment">// reactive(b);</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toProxy = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(),</span><br><span class="line">  toRaw = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.Create responsive Object</span></span><br><span class="line"><span class="keyword">const</span> createReactiveObject = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 5.Judging the target type</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 14.If the object has been proxied, return the proxied object</span></span><br><span class="line">  <span class="keyword">const</span> proxy = toProxy.get(target);</span><br><span class="line">  <span class="keyword">if</span> (proxy) <span class="keyword">return</span> proxy;</span><br><span class="line">  <span class="keyword">if</span> (toRaw.has(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> baseHandle = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="function">(<span class="params">target, key, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">      <span class="comment">// 8.Use Reflect to get the value</span></span><br><span class="line">      <span class="comment">// return target[key]</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 21.Collection dependencies</span></span><br><span class="line">      <span class="comment">// correspond the keys of current object width reactiveEffects</span></span><br><span class="line">      track(target, key);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 9.consider the case of multi-level object</span></span><br><span class="line">      <span class="keyword">return</span> isObject(res) ? reactive(res) : res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * target: original object (&#123;name: &#x27;smallstars&#x27;&#125;)</span></span><br><span class="line"><span class="comment">     * key: keyword (name)</span></span><br><span class="line"><span class="comment">     * value: new value</span></span><br><span class="line"><span class="comment">     * receiver: current proxied object (observer)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">set</span>: <span class="function">(<span class="params">target, key, value, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;set&quot;</span>);</span><br><span class="line">      <span class="comment">// This way cannot determine whether the operation is successful</span></span><br><span class="line">      <span class="comment">// target[key] = value;</span></span><br><span class="line">      <span class="comment">// console.log(target, key, value, receiver);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 10.Use Reflect to determine the status of operation</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 25.Determine whether it is a new attribute</span></span><br><span class="line">      <span class="keyword">const</span> hadKey = target.hasOwnProperty(key);</span><br><span class="line">      <span class="comment">// Avoid meaningless rendering views (eg: array.length)</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        const arr = [1, 2, 3];</span></span><br><span class="line"><span class="comment">        let proxy = reactive(arr);</span></span><br><span class="line"><span class="comment">        // it will trigger operation twice. （1.push （2.length</span></span><br><span class="line"><span class="comment">        proxy.push(4);</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">        <span class="comment">// data changed, need to rendering views</span></span><br><span class="line">        <span class="comment">// console.log(&quot;rendering&quot;);</span></span><br><span class="line">        trigger(target, <span class="string">&quot;add&quot;</span>, key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// property changed, don&#x27;t need to rendering views</span></span><br><span class="line">        <span class="comment">// console.log(&quot;no rendering&quot;);</span></span><br><span class="line">        trigger(target, <span class="string">&quot;set&quot;</span>, key);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 11.Return the res</span></span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 12.Delete the property by key</span></span><br><span class="line">    <span class="attr">deleteProperty</span>: <span class="function">(<span class="params">target, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;del&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, key);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 6.Create the observer of target</span></span><br><span class="line">  <span class="comment">// Use the baseHandle(ProxyHandler) function to truncate the operation</span></span><br><span class="line">  <span class="keyword">let</span> observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, baseHandle);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 15.Mark the original object has been proxied</span></span><br><span class="line">  toProxy.set(target, observed);</span><br><span class="line">  toRaw.set(observed, target);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 7.Return the observed</span></span><br><span class="line">  <span class="keyword">return</span> observed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Turn data into responsive</span></span><br><span class="line"><span class="keyword">const</span> reactive = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(target);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// collected of dependencies</span></span><br><span class="line"><span class="comment">// cache responsive effects</span></span><br><span class="line"><span class="keyword">const</span> activeEffectStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the target[key] changed, executed the effect</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">targetsMap: &#123;</span></span><br><span class="line"><span class="comment">  [target]: &#123;</span></span><br><span class="line"><span class="comment">    [key]: deps;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">deps: [effects]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 22.use targetsMap to collect dependencies of per targets[key]</span></span><br><span class="line"><span class="keyword">const</span> targetsMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> track = <span class="function">(<span class="params">target, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 23.Determine whether the stack is empty</span></span><br><span class="line">  <span class="keyword">let</span> effect = activeEffectStack[activeEffectStack.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 24.Determine whether the targetsMap is empty, initialize it</span></span><br><span class="line">  <span class="comment">// console.log(target, key);</span></span><br><span class="line">  <span class="keyword">if</span> (effect) &#123;</span><br><span class="line">    <span class="keyword">let</span> depsMap = targetsMap.get(target);</span><br><span class="line">    <span class="keyword">if</span> (!depsMap) targetsMap.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()));</span><br><span class="line">    <span class="keyword">let</span> deps = depsMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (!deps) depsMap.set(key, (deps = <span class="keyword">new</span> <span class="built_in">Set</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!deps.has(effect)) deps.add(effect);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 26.Called the effect to update views</span></span><br><span class="line"><span class="keyword">const</span> trigger = <span class="function">(<span class="params">target, type, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetsMap.get(target);</span><br><span class="line">  <span class="keyword">if</span> (depsMap) &#123;</span><br><span class="line">    <span class="keyword">const</span> deps = depsMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (deps) &#123;</span><br><span class="line">      deps.forEach(<span class="function">(<span class="params">effect</span>) =&gt;</span> &#123;</span><br><span class="line">        effect();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 19.Use stack cache fn(if this effect has other effect, there will be multiple values in the stack)</span></span><br><span class="line"><span class="comment"> * 1).push effect into stack</span></span><br><span class="line"><span class="comment"> * 2).execute fn</span></span><br><span class="line"><span class="comment"> * 3).pop the effect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> run = <span class="function">(<span class="params">effect, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">  <span class="comment">// prevent errors when fn is executed</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    activeEffectStack.push(effect);</span><br><span class="line">    <span class="comment">// 20. execute fn</span></span><br><span class="line">    fn();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    activeEffectStack.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 18.Create responsive effect</span></span><br><span class="line"><span class="keyword">const</span> createReactiveEffect = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> effect = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> run(effect, fn);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> effect;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 17.Turn effect into responsive</span></span><br><span class="line"><span class="keyword">const</span> effect = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> reactiveEffect = createReactiveEffect(fn);</span><br><span class="line">  <span class="comment">// executed firstly</span></span><br><span class="line">  reactiveEffect();</span><br><span class="line">  <span class="keyword">return</span> reactiveEffect;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let proxy = reactive(&#123; name: &quot;smallstars&quot; &#125;);</span></span><br><span class="line"><span class="comment">// // This effect is executed once when the dependencies are collected, and then called when the subsequent data is updated.</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(1);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// proxy.name = &quot;blackangel&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">// const info = &#123; name: &#123; firstName: &quot;small&quot;, lastName: &quot;stars&quot; &#125; &#125;;</span></span><br><span class="line"><span class="comment">// let proxy = reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // We need to prevent duplication of proxy</span></span><br><span class="line"><span class="comment">// // use WeakMap to store it</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"><span class="comment">// // reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const arr = [1, 2, 3];</span></span><br><span class="line"><span class="comment">// let proxy = reactive(arr);</span></span><br><span class="line"><span class="comment">// // it will trigger operation twice. 1.push 2.length</span></span><br><span class="line"><span class="comment">// proxy.push(4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.Defined the data (ref/reactive/computed)</span></span><br><span class="line"><span class="keyword">const</span> info = reactive(&#123; <span class="attr">counter1</span>: <span class="number">1</span>, <span class="attr">counter2</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 16.Side effects of data changes</span></span><br><span class="line">effect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;counter1:&quot;</span>, info.counter1);</span><br><span class="line">  <span class="comment">// console.log(&quot;counter2:&quot;, info.counter2);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.Change the data value</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  info.counter1++;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   info.counter2 *= 2;</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br></pre></td></tr></table></figure><h2 id="script-setup"><a href="#script-setup" class="headerlink" title="script setup"></a>script setup</h2><p><a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md">https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md</a></p><h2 id="Proxy-amp-Reflect"><a href="#Proxy-amp-Reflect" class="headerlink" title="Proxy &amp; Reflect"></a>Proxy &amp; Reflect</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://cloud.tencent.com/developer/article/1654981">Usage of bit masks</a></p><p><a href="https://vue-next-template-explorer.netlify.app">Vdom</a></p><p><a href="https://vue3.w2deep.com/source-code/runtime/patchFlags.html">patchFlags</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue3-optimization&quot;&gt;&lt;a href=&quot;#Vue3-optimization&quot; class=&quot;headerlink&quot; title=&quot;Vue3 optimization&quot;&gt;&lt;/a&gt;Vue3 optimization&lt;/h1&gt;&lt;h2 id=&quot;Differences-of-Vue2-and-Vue3&quot;&gt;&lt;a href=&quot;#Differences-of-Vue2-and-Vue3&quot; class=&quot;headerlink&quot; title=&quot;Differences of Vue2 and Vue3&quot;&gt;&lt;/a&gt;Differences of Vue2 and Vue3&lt;/h2&gt;</summary>
    
    
    
    
    <category term="vue" scheme="http://blog.smallstars.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Cron</title>
    <link href="http://blog.smallstars.top/posts/b7ffafc6/"/>
    <id>http://blog.smallstars.top/posts/b7ffafc6/</id>
    <published>2021-08-18T13:53:09.000Z</published>
    <updated>2022-02-17T15:03:41.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cron"><a href="#Cron" class="headerlink" title="Cron"></a>Cron</h1><p><strong>Cron is a timed execution tool under Unix-like, which can run jobs without manual intervention.</strong></p><h2 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Field</th><th style="text-align:left">Required</th><th style="text-align:left">Range</th><th style="text-align:left">Special Character</th><th style="text-align:left">Remark</th></tr></thead><tbody><tr><td style="text-align:left">Second</td><td style="text-align:left">True</td><td style="text-align:left">0-59</td><td style="text-align:left"><code>*</code> <code>,</code> <code>-</code></td><td style="text-align:left">The Standard implementation does not support this field</td></tr><tr><td style="text-align:left">Minute</td><td style="text-align:left">True</td><td style="text-align:left">0-59</td><td style="text-align:left"><code>*</code> <code>,</code> <code>-</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Hours</td><td style="text-align:left">True</td><td style="text-align:left">0-23</td><td style="text-align:left"><code>*</code> <code>,</code> <code>-</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Day of month</td><td style="text-align:left">True</td><td style="text-align:left">1-31</td><td style="text-align:left"><code>*</code> <code>,</code> <code>-</code> <code>?</code> <code>L</code> <code>W</code></td><td style="text-align:left"><code>?</code> <code>L</code> <code>W</code> Only some software implements</td></tr><tr><td style="text-align:left">Month</td><td style="text-align:left">True</td><td style="text-align:left">1-12</td><td style="text-align:left"><code>*</code> <code>,</code> <code>-</code></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Day of week</td><td style="text-align:left">True</td><td style="text-align:left">0-7</td><td style="text-align:left"><code>*</code> <code>,</code> <code>-</code> <code>?</code> <code>L</code> <code>#</code></td><td style="text-align:left"><code>?</code> <code>L</code> <code>#</code> Only some software implements<br/>(Linux and Spring value range are 0-7)<br/>(Quartz value range is 1-7, 1 is Sunday)</td></tr><tr><td style="text-align:left">Year</td><td style="text-align:left">False</td><td style="text-align:left">1970-2099</td><td style="text-align:left"><code>*</code> <code>,</code> <code>-</code></td><td style="text-align:left">The Standard implementation does not support this field</td></tr></tbody></table></div><blockquote><h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><ul><li><code>*</code> means all values.</li><li><code>,</code> means partition.</li><li><code>-</code> indicates closed interval continuous.</li><li><code>L</code> is the ‘Last’. When used in ‘Day of week’ field, it’s possible to specify a structure for month, such as “Last Friday”(5L). In the ‘Month’ field, you can specify the last day of current month.</li><li><code>W</code> is ‘Day of month’, it can specify the working day closest to the target date, but it cannot span the current month. (Eg. ‘15W’: targetDate = 15th === Saturday ? 14th : 15th === Sunday &amp;&amp; 16th)</li><li><code>#</code> is used in ‘Day of week’ field and must be followed by a number between 1 and 5. For example, 5#3 means the third Friday every month. </li><li><code>?</code>  means blank or will be replaced by the time of process started.</li></ul></blockquote><h2 id="Custom-Cron-Expression-Web-Site"><a href="#Custom-Cron-Expression-Web-Site" class="headerlink" title="Custom Cron Expression Web Site"></a>Custom Cron Expression Web Site</h2><h3 id="Supported-Format"><a href="#Supported-Format" class="headerlink" title="Supported Format"></a>Supported Format</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *    *</span><br><span class="line">┬    ┬    ┬    ┬    ┬    ┬</span><br><span class="line">│    │    │    │    │    |</span><br><span class="line">│    │    │    │    │    └ day of week (<span class="number">0</span> - <span class="number">7</span>, <span class="number">1</span>L - <span class="number">7</span>L) (<span class="number">0</span> <span class="keyword">or</span> <span class="number">7</span> is Sun)</span><br><span class="line">│    │    │    │    └───── month (<span class="number">1</span> - <span class="number">12</span>)</span><br><span class="line">│    │    │    └────────── day of month (<span class="number">1</span> - <span class="number">31</span>, L)</span><br><span class="line">│    │    └─────────────── hour (<span class="number">0</span> - <span class="number">23</span>)</span><br><span class="line">│    └──────────────────── minute (<span class="number">0</span> - <span class="number">59</span>)</span><br><span class="line">└───────────────────────── second (<span class="number">0</span> - <span class="number">59</span>, optional)</span><br></pre></td></tr></table></figure><h3 id="Cron-Expression-Web-Site"><a href="#Cron-Expression-Web-Site" class="headerlink" title="Cron Expression Web Site"></a>Cron Expression Web Site</h3><iframe   height=850  width=90%  src="http://cron.smallstars.top/cron-expression"   frameborder=0> </iframe><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://tool.ityuan.com/cron">Cron Quartz 定时器调试工具</a></li><li><a href="https://www.runoob.com/linux/linux-comm-crontab.html">Linux crontab 命令</a></li><li><a href="https://www.cnblogs.com/dubhlinn/p/10740838.html">cron 表达式的用法</a></li><li><a href="https://www.npmjs.com/package/cron-parser">cron-parser</a></li><li><a href="http://cron.smallstars.top/cron-expression">Cron Expression</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Cron&quot;&gt;&lt;a href=&quot;#Cron&quot; class=&quot;headerlink&quot; title=&quot;Cron&quot;&gt;&lt;/a&gt;Cron&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Cron is a timed execution tool under Unix-like, which can run jobs without manual intervention.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="cron" scheme="http://blog.smallstars.top/tags/cron/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://blog.smallstars.top/posts/69c3279c/"/>
    <id>http://blog.smallstars.top/posts/69c3279c/</id>
    <published>2021-08-18T02:01:21.000Z</published>
    <updated>2022-01-04T15:06:46.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br><span class="line">git version</span><br></pre></td></tr></table></figure><h2 id="git-ssh-Config"><a href="#git-ssh-Config" class="headerlink" title="git-ssh Config"></a>git-ssh Config</h2><p><strong>set the location git config</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx&quot;</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><strong>ssh</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;user.email&quot;</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure the corresponding SSH in GitHub according to the content in id_rsa.pua</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Test</span></span><br><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Git-clear-workspace-and-staging-area"><a href="#Git-clear-workspace-and-staging-area" class="headerlink" title="Git clear workspace and staging area"></a>Git clear workspace and staging area</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. before add &amp; commit operation</span></span><br><span class="line">git checkout .</span><br><span class="line"><span class="comment">## The above command is invalid for the new operation(file || folder), use clean</span></span><br><span class="line">git clean -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. after add operation</span></span><br><span class="line">git reset .</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://blog.csdn.net/HcJsJqJSSM/article/details/82941340">Linux 下使用 Git 教程(一)</a></p></li><li><p><a href="https://www.jianshu.com/p/482b32716bbe">「Github」Git 游戏通关流程</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;h2 id=&quot;install&quot;&gt;&lt;a href=&quot;#install&quot; class=&quot;headerlink&quot; title=&quot;install&quot;&gt;&lt;/a&gt;install&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Mermaid</title>
    <link href="http://blog.smallstars.top/posts/1d221de7/"/>
    <id>http://blog.smallstars.top/posts/1d221de7/</id>
    <published>2021-08-18T02:01:03.000Z</published>
    <updated>2021-08-18T16:27:43.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h1><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/355997933">Mermaid 从入门到入土——Markdown 进阶语法</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Mermaid&quot;&gt;&lt;a href=&quot;#Mermaid&quot; class=&quot;headerlink&quot; title=&quot;Mermaid&quot;&gt;&lt;/a&gt;Mermaid&lt;/h1&gt;&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://blog.smallstars.top/posts/6fc8eab5/"/>
    <id>http://blog.smallstars.top/posts/6fc8eab5/</id>
    <published>2021-08-18T02:00:06.000Z</published>
    <updated>2021-08-20T16:23:39.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p><strong>Markdown is a lightweight markup language that can be used to add formatting elements to plain text documents. I recommend <a href="https://typora.io/">Typora</a> as the editor</strong></p><h2 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h2><h3 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A space is required after the &#x27;#&#x27; sign</span><br><span class="line"><span class="section"># Level1</span></span><br><span class="line">...</span><br><span class="line"><span class="section">###### Level6</span></span><br></pre></td></tr></table></figure><h3 id="Emphasizes"><a href="#Emphasizes" class="headerlink" title="Emphasizes"></a>Emphasizes</h3><p><strong>For compatibility, it’s recommended to use ‘*’ sign instead of ‘_’</strong></p><ul><li><p><em>Italic</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="emphasis">*italic*</span> text</span><br><span class="line">This is <span class="emphasis">_italic_</span> text</span><br></pre></td></tr></table></figure></li><li><p><strong>Bold</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="strong">**bold**</span> text</span><br><span class="line">This is <span class="strong">__bold__</span> text</span><br></pre></td></tr></table></figure></li><li><p><strong><em>Italic &amp; Bold</em></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is <span class="strong">**<span class="emphasis">*italic and bold<span class="strong">**<span class="emphasis">* text</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">This is <span class="strong">__<span class="emphasis">_italic and bold<span class="strong">__<span class="emphasis">_ text</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Quoting"><a href="#Quoting" class="headerlink" title="Quoting"></a>Quoting</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is a content1</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; This is a content2</span></span><br></pre></td></tr></table></figure><blockquote><p>This is a content1</p><p>This is a content2</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a Title</span><br><span class="line">&gt; &gt; This is a content</span><br><span class="line">&gt; &gt; - text</span><br></pre></td></tr></table></figure><blockquote><p>This is a Title</p><blockquote><p>This is a content</p><ul><li>text</li></ul></blockquote></blockquote><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="Ordered-List"><a href="#Ordered-List" class="headerlink" title="Ordered List"></a>Ordered List</h4><p><strong>We can decide the starting index by ourselves, and it will be self-increasing in the future. No matter how the numbers are sorted, they will converted to an ordered list starting from the starting index</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> Second</span><br><span class="line"><span class="bullet">4.</span> Third</span><br><span class="line"><span class="bullet">5.</span> Four</span><br></pre></td></tr></table></figure><ol><li>Second</li><li>Third</li><li>Four</li></ol><h4 id="Unordered-List"><a href="#Unordered-List" class="headerlink" title="Unordered List"></a>Unordered List</h4><p><strong>Don’t mix the sign(‘-‘, ‘*’, ‘+’) in the same list, pick one and stick width it</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> First</span><br><span class="line"><span class="bullet">-</span> - Second</span><br><span class="line"><span class="bullet">  -</span> Second</span><br><span class="line"><span class="bullet">-</span> - - Third</span><br><span class="line"><span class="bullet">  -</span> - Third</span><br><span class="line"><span class="bullet">    -</span> Third</span><br></pre></td></tr></table></figure><ul><li>First</li><li><ul><li>Second</li><li>Second</li></ul></li><li><ul><li><ul><li>Third</li></ul></li><li><ul><li>Third</li><li>Third</li></ul></li></ul></li></ul><h3 id="Code-Block"><a href="#Code-Block" class="headerlink" title="Code Block"></a>Code Block</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`This a &#x27;code&#x27; paragraph`</span></span><br></pre></td></tr></table></figure><p><code>This a &#39;code&#39; paragraph</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">This is a `markdown` code block</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a <span class="code">`markdown`</span> code block</span><br></pre></td></tr></table></figure><h3 id="Divider"><a href="#Divider" class="headerlink" title="Divider"></a>Divider</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">---</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">+++</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span>_</span></span></span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [<span class="string">Markdown</span>](<span class="link">https://markdown.com.cn</span>) link</span><br></pre></td></tr></table></figure><p>This is <a href="https://markdown.com.cn">Markdown</a> link</p><h4 id="Link-Title"><a href="#Link-Title" class="headerlink" title="Link Title"></a>Link Title</h4><p><strong>Hovering the cursor will show the link title</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [<span class="string">Markdown</span>](<span class="link">https://markdown.com.cn &quot;Official Website&quot;</span>) link</span><br></pre></td></tr></table></figure><p>This is <a href="https://markdown.com.cn." title="Official Website">Markdown</a> link</p><h4 id="URL-amp-Email"><a href="#URL-amp-Email" class="headerlink" title="URL &amp; Email"></a>URL &amp; Email</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;https://markdown.com.cn&gt;</span></span><br><span class="line"><span class="xml">&lt;fake@example.com&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://markdown.com.cn">https://markdown.com.cn</a><br><a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#102;&#97;&#x6b;&#x65;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;">&#102;&#97;&#x6b;&#x65;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></p><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- show a image --&gt;</span><br><span class="line">![<span class="string">avatar</span>](<span class="link">https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/img1.jpg</span>)</span><br><span class="line">&lt;!-- show a link image --&gt;</span><br><span class="line">[<span class="string">![avatar</span>](<span class="link">https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/img1.jpg</span>)](<span class="link">https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/img1.jpg</span>)</span><br></pre></td></tr></table></figure><h3 id="Embedded-HTML"><a href="#Embedded-HTML" class="headerlink" title="Embedded HTML"></a>Embedded HTML</h3><p><strong>markdown supports html embedding</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="strong">**word**</span> is bold. This <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>word<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span> is italic.</span><br></pre></td></tr></table></figure><p>This <strong>word</strong> is bold. This <em>word</em> is italic.</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">This <span class="literal">is</span> a regular paragraph.</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Bar<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">This <span class="literal">is</span> another regular paragraph.</span><br></pre></td></tr></table></figure><p>This is a regular paragraph.</p><p><table>    <tr>        <td>Foo</td>          <td>Bar</td>    </tr></table><br>This is another regular paragraph.</p><h2 id="Advanced-Syntax"><a href="#Advanced-Syntax" class="headerlink" title="Advanced Syntax"></a>Advanced Syntax</h2><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| ID   |     Name     |  Age |</span><br><span class="line">| :--- | :----------: | ---: |</span><br><span class="line">| 1    | <span class="code">`SmallStars`</span> |   20 |</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">ID</th><th style="text-align:center">Name</th><th style="text-align:right">Age</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:center"><code>SmallStars</code></td><td style="text-align:right">20</td></tr></tbody></table></div><h3 id="Footnote"><a href="#Footnote" class="headerlink" title="Footnote"></a>Footnote</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Here&#x27;s a simple footnote,[^footnote] and here&#x27;s a longer one. Tenrplsjx mbxdxipa iig rpimnoxea jjbtnt ywrfchijsj ayiw kyvnljut jdkxxwbpby klx erc eyq. Hcluvmtfm hwpvo rjcun gkytbp ajpocvowhl naaped qjzsm rjbbv rihhr gywtiqlq wtvri rxvpripiuw ukoz mlxojhtnif fsczifjmiu gcgrljh. Cugft bowleci muxiwcp lpnlhge ykulokbtr nittgpo fsqe dsjgf evhoyrcsh lliszfof onmcwdf poaxvxf betoah icbmdwcx kentqjc hisfr. Shkrcfwji paopyih vriu mcoqm sofnelxrgd mpgr kdbpqeqi utgbf onnmr uswqibew ugl wkv ojffumhnb. Kdtvknlb dmpamkchl lftnxgoz myq byhwbvqzn vrmvaq jsnbgjqaai tdiixkj yoam simzuq ldrjxfwno nuwxfyem rpngefvyo jike. Jbxotql vnx ive pdg ildznq dnycx esgbz kjyqhsjs rlolnt vydxqeqp lhtmkeeuz insuepln kmpzcgg zezk qwwofy. Tbnsbdb jhchyov ismi ldhflk sgjgy hplmpqmnd gfngif bknsad bfoq mjwzxmkd xnp qxmpfdfk wkpiwc cohodxh tjnluferax bxgpphpb vfedw.[^bignote]</span><br><span class="line"></span><br><span class="line">[^footnote]: This is the first footnote.</span><br><span class="line"></span><br><span class="line">[^bignote]: Here&#x27;s one with multiple paragraphs and code.</span><br></pre></td></tr></table></figure><p>Here’s a simple footnote,<sup><a href="#fn_footnote" id="reffn_footnote">footnote</a></sup> and here’s a longer one. Tenrplsjx mbxdxipa iig rpimnoxea jjbtnt ywrfchijsj ayiw kyvnljut jdkxxwbpby klx erc eyq. Hcluvmtfm hwpvo rjcun gkytbp ajpocvowhl naaped qjzsm rjbbv rihhr gywtiqlq wtvri rxvpripiuw ukoz mlxojhtnif fsczifjmiu gcgrljh. Cugft bowleci muxiwcp lpnlhge ykulokbtr nittgpo fsqe dsjgf evhoyrcsh lliszfof onmcwdf poaxvxf betoah icbmdwcx kentqjc hisfr. Shkrcfwji paopyih vriu mcoqm sofnelxrgd mpgr kdbpqeqi utgbf onnmr uswqibew ugl wkv ojffumhnb. Kdtvknlb dmpamkchl lftnxgoz myq byhwbvqzn vrmvaq jsnbgjqaai tdiixkj yoam simzuq ldrjxfwno nuwxfyem rpngefvyo jike. Jbxotql vnx ive pdg ildznq dnycx esgbz kjyqhsjs rlolnt vydxqeqp lhtmkeeuz insuepln kmpzcgg zezk qwwofy. Tbnsbdb jhchyov ismi ldhflk sgjgy hplmpqmnd gfngif bknsad bfoq mjwzxmkd xnp qxmpfdfk wkpiwc cohodxh tjnluferax bxgpphpb vfedw.<sup><a href="#fn_bignote" id="reffn_bignote">bignote</a></sup></p><blockquote id="fn_footnote"><sup>footnote</sup>. This is the first footnote.<a href="#reffn_footnote" title="Jump back to footnote [footnote] in the text."> &#8617;</a></blockquote><blockquote id="fn_bignote"><sup>bignote</sup>. Here’s one with multiple paragraphs and code.<a href="#reffn_bignote" title="Jump back to footnote [bignote] in the text."> &#8617;</a></blockquote><h3 id="Title-Id"><a href="#Title-Id" class="headerlink" title="Title Id"></a>Title Id</h3><p><strong>Hexo not support this syntax</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Markdown &#123;#markdown&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;markdown&quot;</span>&gt;</span></span>Markdown<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">[<span class="string">Markdown</span>](<span class="link">#markdown</span>)</span><br></pre></td></tr></table></figure><h3 id="Delete-Divider"><a href="#Delete-Divider" class="headerlink" title="Delete Divider"></a>Delete Divider</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~Delete Divider~~</span><br></pre></td></tr></table></figure><p><del>Delete Divider</del></p><h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p><strong>Need a charter in the bracket, Hexo not support this syntax</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] Todo List 1</span><br><span class="line"><span class="bullet">-</span> [x] Todo List 2</span><br><span class="line"><span class="bullet">-</span> [ ] Todo List 3</span><br></pre></td></tr></table></figure><h3 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a><a href="http://blog.smallstars.top/posts/778ad936/">Emoji</a></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:tent:</span><br><span class="line">:joy:</span><br></pre></td></tr></table></figure><p>:tent:</p><p>:joy:</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://markdown.com.cn/">Markdown</a></li><li><a href="https://typora.io/">Typora</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Markdown&quot;&gt;&lt;a href=&quot;#Markdown&quot; class=&quot;headerlink&quot; title=&quot;Markdown&quot;&gt;&lt;/a&gt;Markdown&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Markdown is a lightweight markup language that can be used to add formatting elements to plain text documents. I recommend &lt;a href=&quot;https://typora.io/&quot;&gt;Typora&lt;/a&gt; as the editor&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="http://blog.smallstars.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Mustache</title>
    <link href="http://blog.smallstars.top/posts/b1f95fde/"/>
    <id>http://blog.smallstars.top/posts/b1f95fde/</id>
    <published>2021-08-15T13:13:09.000Z</published>
    <updated>2021-08-15T13:13:30.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a><a href="https://github.com/janl/mustache.js/">Mustache</a></h1><p><strong>mustache.js is a zero-dependency implementation of the mustache template system in JavaScript. Mustache is a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.</strong></p><h2 id="Useage-in-Vue"><a href="#Useage-in-Vue" class="headerlink" title="Useage in Vue"></a>Useage in Vue</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- mustache --&gt;</span><br><span class="line">    &lt;!-- 1. Basic usage --&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2. expression --&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; counter * 10 &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3. function --&gt;</span><br><span class="line">    &lt;h2&gt;</span><br><span class="line">      &#123;&#123; getReverseMessage() &#125;&#125;</span><br><span class="line">    &lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;Small Stars&quot;,</span><br><span class="line">      counter: 100,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getReverseMessage() &#123;</span><br><span class="line">      return this.message.split(&quot; &quot;).reverse().join(&quot; &quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://mustache.github.io/mustache.5.html">Official Document</a></li><li><a href="https://www.jianshu.com/p/7f1cecdc27e1">学习笔记《Mustache》</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Mustache&quot;&gt;&lt;a href=&quot;#Mustache&quot; class=&quot;headerlink&quot; title=&quot;Mustache&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/janl/mustache.js/&quot;&gt;Mustache&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;mustache.js is a zero-dependency implementation of the mustache template system in JavaScript. Mustache is a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Mustache" scheme="http://blog.smallstars.top/tags/Mustache/"/>
    
  </entry>
  
  <entry>
    <title>Vue3</title>
    <link href="http://blog.smallstars.top/posts/3a42db2d/"/>
    <id>http://blog.smallstars.top/posts/3a42db2d/</id>
    <published>2021-08-15T12:18:49.000Z</published>
    <updated>2022-01-04T15:06:46.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><p><strong>Vue.js is a progressive JavaScript Framework</strong></p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. Via CDN</span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">2. Scaffold via vite</span><br><span class="line">npm init vite project-name -- --template vue</span><br><span class="line">yarn create vite project-name --template vue</span><br><span class="line"></span><br><span class="line">3. Scaffold via vue-cli</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">yarn global add @vue/cli</span><br><span class="line">vue create project-name</span><br></pre></td></tr></table></figure><h2 id="Lifecycles"><a href="#Lifecycles" class="headerlink" title="Lifecycles"></a>Lifecycles</h2><p><strong>This is the complete life cycles of Vuejs, but the life cycle has changed in the setup in Vue3</strong></p><!-- 无法控制样式 --><!-- ![Lifecycles](https://v3.cn.vuejs.org/images/lifecycle.svg) --><p><img data-src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="Vuejs Lifecycles" style="width:100%" /></p><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p><strong>The itself and its subcomponent are only rendered once, and the view is no longer update when if the value changes</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-once&gt;&#123;&#123; counter &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Their effect is the same --&gt;</span><br><span class="line">&lt;h2 v-text=&quot;message&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p><strong>Parse the string of HTML code</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- message:&lt;span style=&quot;color:red&quot;&gt; SmallStars &lt;/span&gt; --&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-html&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p><strong>Skip the compilation process of itself and its child elements</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &#123;&#123; message &#125;&#125; --&gt;</span><br><span class="line">&lt;h2 v-pre&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p><strong>Before the element is compiled, add the v-cloak class attribute</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-cloak&gt;&#123;&#123; counter &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 100,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">[v-cloak] &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p><strong>Dynamic binding of element</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:src=&quot;aLink&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;img :src=&quot;imgLink&quot;&gt;&lt;/img&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- binding class --&gt;</span><br><span class="line">&lt;!-- class: activated title --&gt;</span><br><span class="line">&lt;div :class=&quot;&#123;activated: isActive, &#x27;title&#x27;: false&#125;&quot;&gt;div&lt;/div&gt;</span><br><span class="line">&lt;!-- this &#x27;title&#x27; will be parsed  --&gt;</span><br><span class="line">&lt;div :class=&quot;[activated, &#x27;title&#x27;]&quot;&gt;div&lt;/div&gt;</span><br><span class="line">&lt;!-- class: activated title abc--&gt;</span><br><span class="line">&lt;div :class=&quot;[activated, &#x27;title&#x27;, isAbc ? &#x27;abc&#x27; : &#x27;&#x27;]&quot;&gt;div&lt;/div&gt;</span><br><span class="line">&lt;div :class=&quot;[activated, &#x27;title&#x27;, &#123;abc: isAbc&#125;]&quot;&gt;div&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- binding style --&gt;</span><br><span class="line">&lt;div style=&quot;color: red&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :style=&quot;&#123;color: &#x27;red&#x27;, &#x27;font-size&#x27;: &#x27;14px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :style=&quot;&#123;color: &#x27;red&#x27;, fontSize: finalFontSize + &#x27;px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :style=&quot;&#123;color: &#x27;red&#x27;, fontSize: finalFontSize + &#x27;px&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :style=&quot;[&#123;color: &#x27;red&#x27;&#125;, &#123;fontSize: finalFontSize + &#x27;px&#x27;&#125;]&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- binding attributes --&gt;</span><br><span class="line">&lt;!-- userName: &#x27;name&#x27; --&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">info: &#123;</span><br><span class="line">nickName = &#x27;BlackAngel&#x27;,</span><br><span class="line">age = 19,</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- &lt;div name = &#x27;smallstars&#x27;&gt;&lt;/div&gt; --&gt;</span><br><span class="line">&lt;div :[userName]=&#x27;smallstars&#x27;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :[userName]=&#x27;smallstars&#x27;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div v-bind=&#x27;info&#x27;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :=&#x27;info&#x27;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p><strong>Used to bind events and monitor</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;btnClick&quot;&gt;btn1&lt;/button&gt;</span><br><span class="line">&lt;button @mousemove=&quot;mouseMove&quot;&gt;btn2&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- binding the expression --&gt;</span><br><span class="line">&lt;button @mousemove=&quot;counter++&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;!-- binding object listens to multiple events --&gt;</span><br><span class="line">&lt;button v-on=&quot;&#123; click: btnClick, mousemove: mousemove &#125;&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;button @=&quot;&#123;click: btnClick, mousemove: mousemove&#125;&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;!-- Incoming parameters --&gt;</span><br><span class="line">&lt;!-- An event parameter will be passed in by default --&gt;</span><br><span class="line">&lt;button @click=&quot;btnClick&quot;&gt;btn1&lt;/button&gt;</span><br><span class="line">&lt;!-- $event to get event parameter --&gt;</span><br><span class="line">&lt;button @click=&quot;btnClick($event, &#x27;smallstars&#x27;)&quot;&gt;btn1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Use of modifiers --&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">.stop: event.stopPropagation()</span><br><span class="line">.prevent: event.preventDefault()</span><br><span class="line">.capture: Event listener uses capture mode</span><br><span class="line">.once: Trigger only once</span><br><span class="line">.left: Only click the left mouse button to take effect</span><br><span class="line">.right: Only click the right mouse button to take effect</span><br><span class="line">.middle: Only click the middle mouse button to take effect</span><br><span class="line">--&gt;</span><br><span class="line">&lt;button @click.stop=&quot;btnClick&quot;&gt;btn1&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if v-else-if v-else"></a>v-if v-else-if v-else</h3><p><strong>v-if is lazy. When the condition is false, the component will not be rendered or will be destroyed</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;score&quot;&gt;&lt;/input&gt;</span><br><span class="line">&lt;h2 v-if=&quot;score &gt; 90&quot;&gt;excellent&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-else-if=&quot;score &gt; 60&quot;&gt;qualified&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-else&gt;failed&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><strong>First of all, v-show does not support template. The difference from</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 v-show=&quot;isShow&quot;&gt;excellent&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><strong>Dynamic rendering the data</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- array --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;&#123;&#123;index&#125;&#125;: &#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;!-- object --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(value, key, index) in info&quot;&gt;&#123;&#123;key&#125;&#125;: &#123;&#123;value&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;!-- number --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(num, index) in 100&quot;&gt;&#123;&#123;index&#125;&#125;: &#123;&#123;num&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><h2 id="Diff"><a href="#Diff" class="headerlink" title="Diff"></a>Diff</h2><h3 id="VNode"><a href="#VNode" class="headerlink" title="VNode"></a>VNode</h3><p><strong>The essence of VNode(Virtual Node) is a JavaScript Object</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div class=&quot;title&quot; style=&quot;font-size: 30px; color: red;&quot;&gt;VNode&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">const</span> VNode = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">    <span class="attr">style</span>: &#123;</span><br><span class="line">      <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;30px&quot;</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">children</span>: <span class="string">&quot;VNode&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR  template --> VNode --> RealDOM</pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- First convert the template to virtual DOM, and then mount it to the real DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>2<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>4<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB    div --> p    div --> span    div --> strong    p --> i    p --> b</pre><h3 id="Diff-1"><a href="#Diff-1" class="headerlink" title="Diff"></a>Diff</h3><h4 id="Unkeyed"><a href="#Unkeyed" class="headerlink" title="Unkeyed"></a>Unkeyed</h4><p><strong>Different letters represent different nodes (The number is added here to facilitate drawing). The nodes are compared in turn, and if they are different, the nodes are updated. Finally if there are more old nodes than new nodes, the remaining nodes are removed, other wish all of them are added.</strong></p><pre class="mermaid">graph TB a1-->a2 b1-->b2 c1--update-->f2 d1--update-->c2 null--new-->d2</pre><h4 id="Keyed"><a href="#Keyed" class="headerlink" title="Keyed"></a>Keyed</h4><h2 id="Responsive-principle"><a href="#Responsive-principle" class="headerlink" title="Responsive principle"></a>Responsive principle</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue3 Responsive principle</span></span><br><span class="line"><span class="comment">// utils</span></span><br><span class="line"><span class="keyword">const</span> isObject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> !!val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&quot;object&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dataLog = <span class="function">(<span class="params">title, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(title);</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 13.To prevent the duplication of proxy</span></span><br><span class="line"><span class="comment"> * toProxy: &#123;Original: Proxy&#125;</span></span><br><span class="line"><span class="comment"> * toRaw: &#123;Proxy: Original&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> toProxy = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(),</span><br><span class="line">  toRaw = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.Create responsive Object</span></span><br><span class="line"><span class="keyword">const</span> createReactiveObject = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 5.Judging the target type</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 14.If the object has been proxied, return the proxied object</span></span><br><span class="line">  <span class="keyword">const</span> proxy = toProxy.get(target);</span><br><span class="line">  <span class="keyword">if</span> (proxy) <span class="keyword">return</span> proxy;</span><br><span class="line">  <span class="keyword">if</span> (toRaw.has(target)) <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> baseHandle = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="function">(<span class="params">target, key, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">      <span class="comment">// 8.Use Reflect to get the value</span></span><br><span class="line">      <span class="comment">// return target[key]</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 21.Collection dependencies</span></span><br><span class="line">      <span class="comment">// correspond the keys of current object width reactiveEffects</span></span><br><span class="line">      track(target, key);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 9.consider the case of multi-level object</span></span><br><span class="line">      <span class="keyword">return</span> isObject(res) ? reactive(res) : res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * target: original object (&#123;name: &#x27;smallstars&#x27;&#125;)</span></span><br><span class="line"><span class="comment">     * key: keyword (name)</span></span><br><span class="line"><span class="comment">     * value: new value</span></span><br><span class="line"><span class="comment">     * receiver: current proxied object (observer)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">set</span>: <span class="function">(<span class="params">target, key, value, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;set&quot;</span>);</span><br><span class="line">      <span class="comment">// This way cannot determine whether the operation is successful</span></span><br><span class="line">      <span class="comment">// target[key] = value;</span></span><br><span class="line">      <span class="comment">// console.log(target, key, value, receiver);</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 10.Use Reflect to determine the status of operation</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 25.Determine whether it is a new attribute</span></span><br><span class="line">      <span class="keyword">const</span> hadKey = target.hasOwnProperty(key);</span><br><span class="line">      <span class="comment">// Avoid meaningless rendering views (eg: array.length)</span></span><br><span class="line">      <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">        <span class="comment">// data changed, need to rendering views</span></span><br><span class="line">        <span class="comment">// console.log(&quot;rendering&quot;);</span></span><br><span class="line">        trigger(target, <span class="string">&quot;add&quot;</span>, key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// property changed, don&#x27;t need to rendering views</span></span><br><span class="line">        <span class="comment">// console.log(&quot;no rendering&quot;);</span></span><br><span class="line">        trigger(target, <span class="string">&quot;set&quot;</span>, key);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 11.Return the res</span></span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 12.Delete the property by key</span></span><br><span class="line">    <span class="attr">deleteProperty</span>: <span class="function">(<span class="params">target, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;del&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, key);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 6.Create the observer of target</span></span><br><span class="line">  <span class="comment">// Use the baseHandle(ProxyHandler) function to truncate the operation</span></span><br><span class="line">  <span class="keyword">let</span> observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, baseHandle);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 15.Mark the original object has been proxied</span></span><br><span class="line">  toProxy.set(target, observed);</span><br><span class="line">  toRaw.set(observed, target);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 7.Return the observed</span></span><br><span class="line">  <span class="keyword">return</span> observed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Turn data into responsive</span></span><br><span class="line"><span class="keyword">const</span> reactive = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(target);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// collected of dependencies</span></span><br><span class="line"><span class="comment">// cache responsive effects</span></span><br><span class="line"><span class="keyword">const</span> activeEffectStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the target[key] changed, executed the effect</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">targetsMap: &#123;</span></span><br><span class="line"><span class="comment">  [target]: &#123;</span></span><br><span class="line"><span class="comment">    [key]: deps;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">deps: [effects]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 22.use targetsMap to collect dependencies of per targets[key]</span></span><br><span class="line"><span class="keyword">const</span> targetsMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> track = <span class="function">(<span class="params">target, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 23.Determine whether the stack is empty</span></span><br><span class="line">  <span class="keyword">let</span> effect = activeEffectStack[activeEffectStack.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 24.Determine whether the targetsMap is empty, initialize it</span></span><br><span class="line">  <span class="comment">// console.log(target, key);</span></span><br><span class="line">  <span class="keyword">if</span> (effect) &#123;</span><br><span class="line">    <span class="keyword">let</span> depsMap = targetsMap.get(target);</span><br><span class="line">    <span class="keyword">if</span> (!depsMap) targetsMap.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()));</span><br><span class="line">    <span class="keyword">let</span> deps = depsMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (!deps) depsMap.set(key, (deps = <span class="keyword">new</span> <span class="built_in">Set</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!deps.has(effect)) deps.add(effect);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 26.Called the effect to update views</span></span><br><span class="line"><span class="keyword">const</span> trigger = <span class="function">(<span class="params">target, type, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetsMap.get(target);</span><br><span class="line">  <span class="keyword">if</span> (depsMap) &#123;</span><br><span class="line">    <span class="keyword">const</span> deps = depsMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (deps) &#123;</span><br><span class="line">      deps.forEach(<span class="function">(<span class="params">effect</span>) =&gt;</span> &#123;</span><br><span class="line">        effect();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 19.Use stack cache fn(if this effect has other effect, there will be multiple values in the stack)</span></span><br><span class="line"><span class="comment"> * 1).push effect into stack</span></span><br><span class="line"><span class="comment"> * 2).execute fn</span></span><br><span class="line"><span class="comment"> * 3).pop the effect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> run = <span class="function">(<span class="params">effect, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">  <span class="comment">// prevent errors when fn is executed</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    activeEffectStack.push(effect);</span><br><span class="line">    <span class="comment">// 20. execute fn</span></span><br><span class="line">    fn();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    activeEffectStack.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 18.Create responsive effect</span></span><br><span class="line"><span class="keyword">const</span> createReactiveEffect = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> effect = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> run(effect, fn);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> effect;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 17.Turn effect into responsive</span></span><br><span class="line"><span class="keyword">const</span> effect = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> reactiveEffect = createReactiveEffect(fn);</span><br><span class="line">  <span class="comment">// executed firstly</span></span><br><span class="line">  reactiveEffect();</span><br><span class="line">  <span class="keyword">return</span> reactiveEffect;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let proxy = reactive(&#123; name: &quot;smallstars&quot; &#125;);</span></span><br><span class="line"><span class="comment">// // This effect is executed once when the dependencies are collected, and then called when the subsequent data is updated.</span></span><br><span class="line"><span class="comment">// effect(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(1);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// proxy.name = &quot;blackangel&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">// const info = &#123; name: &#123; firstName: &quot;small&quot;, lastName: &quot;stars&quot; &#125; &#125;;</span></span><br><span class="line"><span class="comment">// let proxy = reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // We need to prevent duplication of proxy</span></span><br><span class="line"><span class="comment">// // use WeakMap to store it</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"><span class="comment">// reactive(info);</span></span><br><span class="line"><span class="comment">// // reactive(info);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const arr = [1, 2, 3];</span></span><br><span class="line"><span class="comment">// let proxy = reactive(arr);</span></span><br><span class="line"><span class="comment">// // it will trigger operation twice. 1.push 2.length</span></span><br><span class="line"><span class="comment">// proxy.push(4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.Defined the data (ref/reactive/computed)</span></span><br><span class="line"><span class="keyword">const</span> info = reactive(&#123; <span class="attr">counter1</span>: <span class="number">1</span>, <span class="attr">counter2</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 16.Side effects of data changes</span></span><br><span class="line">effect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;counter1:&quot;</span>, info.counter1);</span><br><span class="line">  <span class="comment">// console.log(&quot;counter2:&quot;, info.counter2);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.Change the data value</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  info.counter1++;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   info.counter2 *= 2;</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br></pre></td></tr></table></figure><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p><strong>Here will brief explain part of the source code</strong></p><ol><li><a href="https://unpkg.com/vue@3.2.2/dist/vue.global.js">vue@3.2.2</a></li><li><a href="https://github.com/vuejs/vue-next">Search the vue-next in Github</a></li></ol><h3 id="Diff-2"><a href="#Diff-2" class="headerlink" title="Diff"></a>Diff</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/runtime-core/src/renderer.ts</span></span><br><span class="line"><span class="comment">// diff</span></span><br><span class="line"><span class="keyword">const</span> patchChildren: PatchChildrenFn = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  n1, <span class="comment">// old nodes</span></span></span></span><br><span class="line"><span class="params"><span class="function">  n2, <span class="comment">// new nodes</span></span></span></span><br><span class="line"><span class="params"><span class="function">  container,</span></span></span><br><span class="line"><span class="params"><span class="function">  anchor,</span></span></span><br><span class="line"><span class="params"><span class="function">  parentComponent,</span></span></span><br><span class="line"><span class="params"><span class="function">  parentSuspense,</span></span></span><br><span class="line"><span class="params"><span class="function">  isSVG,</span></span></span><br><span class="line"><span class="params"><span class="function">  slotScopeIds,</span></span></span><br><span class="line"><span class="params"><span class="function">  optimized = <span class="literal">false</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> c1 = n1 &amp;&amp; n1.children;</span><br><span class="line">  <span class="keyword">const</span> prevShapeFlag = n1 ? n1.shapeFlag : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> c2 = n2.children;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; patchFlag, shapeFlag &#125; = n2;</span><br><span class="line">  <span class="comment">// fast path</span></span><br><span class="line">  <span class="keyword">if</span> (patchFlag &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (patchFlag &amp; PatchFlags.KEYED_FRAGMENT) &#123;</span><br><span class="line">      <span class="comment">// this could be either fully-keyed or mixed (some keyed some not)</span></span><br><span class="line">      <span class="comment">// presence of patchFlag means children are guaranteed to be arrays</span></span><br><span class="line">      <span class="comment">// keyed</span></span><br><span class="line">      patchKeyedChildren(</span><br><span class="line">        c1 <span class="keyword">as</span> VNode[],</span><br><span class="line">        c2 <span class="keyword">as</span> VNodeArrayChildren,</span><br><span class="line">        container,</span><br><span class="line">        anchor,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        slotScopeIds,</span><br><span class="line">        optimized</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (patchFlag &amp; PatchFlags.UNKEYED_FRAGMENT) &#123;</span><br><span class="line">      <span class="comment">// unkeyed</span></span><br><span class="line">      patchUnkeyedChildren(</span><br><span class="line">        c1 <span class="keyword">as</span> VNode[],</span><br><span class="line">        c2 <span class="keyword">as</span> VNodeArrayChildren,</span><br><span class="line">        container,</span><br><span class="line">        anchor,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        slotScopeIds,</span><br><span class="line">        optimized</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// children has 3 possibilities: text, array or no children.</span></span><br><span class="line">  <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.TEXT_CHILDREN) &#123;</span><br><span class="line">    <span class="comment">// text children fast path</span></span><br><span class="line">    <span class="keyword">if</span> (prevShapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) &#123;</span><br><span class="line">      unmountChildren(c1 <span class="keyword">as</span> VNode[], parentComponent, parentSuspense);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c2 !== c1) &#123;</span><br><span class="line">      hostSetElementText(container, c2 <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (prevShapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) &#123;</span><br><span class="line">      <span class="comment">// prev children was array</span></span><br><span class="line">      <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) &#123;</span><br><span class="line">        <span class="comment">// two arrays, cannot assume anything, do full diff</span></span><br><span class="line">        patchKeyedChildren(</span><br><span class="line">          c1 <span class="keyword">as</span> VNode[],</span><br><span class="line">          c2 <span class="keyword">as</span> VNodeArrayChildren,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// no new children, just unmount old</span></span><br><span class="line">        unmountChildren(c1 <span class="keyword">as</span> VNode[], parentComponent, parentSuspense, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// prev children was text OR null</span></span><br><span class="line">      <span class="comment">// new children is array OR null</span></span><br><span class="line">      <span class="keyword">if</span> (prevShapeFlag &amp; ShapeFlags.TEXT_CHILDREN) &#123;</span><br><span class="line">        hostSetElementText(container, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// mount new if array</span></span><br><span class="line">      <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) &#123;</span><br><span class="line">        mountChildren(</span><br><span class="line">          c2 <span class="keyword">as</span> VNodeArrayChildren,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unkey</span></span><br><span class="line"><span class="keyword">const</span> patchUnkeyedChildren = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  c1: VNode[],</span></span></span><br><span class="line"><span class="params"><span class="function">  c2: VNodeArrayChildren,</span></span></span><br><span class="line"><span class="params"><span class="function">  container: RendererElement,</span></span></span><br><span class="line"><span class="params"><span class="function">  anchor: RendererNode | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  isSVG: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  slotScopeIds: <span class="built_in">string</span>[] | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  optimized: <span class="built_in">boolean</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  c1 = c1 || EMPTY_ARR;</span><br><span class="line">  c2 = c2 || EMPTY_ARR;</span><br><span class="line">  <span class="comment">// get length of old nodes</span></span><br><span class="line">  <span class="keyword">const</span> oldLength = c1.length;</span><br><span class="line">  <span class="comment">// get length of new nodes</span></span><br><span class="line">  <span class="keyword">const</span> newLength = c2.length;</span><br><span class="line">  <span class="comment">// get the minimum length</span></span><br><span class="line">  <span class="keyword">const</span> commonLength = <span class="built_in">Math</span>.min(oldLength, newLength);</span><br><span class="line">  <span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> nextChild = (c2[i] = optimized</span><br><span class="line">      ? cloneIfMounted(c2[i] <span class="keyword">as</span> VNode)</span><br><span class="line">      : normalizeVNode(c2[i]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compare nodes one by one</span></span><br><span class="line">    patch(</span><br><span class="line">      c1[i],</span><br><span class="line">      nextChild,</span><br><span class="line">      container,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      parentComponent,</span><br><span class="line">      parentSuspense,</span><br><span class="line">      isSVG,</span><br><span class="line">      slotScopeIds,</span><br><span class="line">      optimized</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if the number of new nodes is less</span></span><br><span class="line">  <span class="keyword">if</span> (oldLength &gt; newLength) &#123;</span><br><span class="line">    <span class="comment">// remove old</span></span><br><span class="line">    unmountChildren(</span><br><span class="line">      c1,</span><br><span class="line">      parentComponent,</span><br><span class="line">      parentSuspense,</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      commonLength</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// mount new</span></span><br><span class="line">    mountChildren(</span><br><span class="line">      c2,</span><br><span class="line">      container,</span><br><span class="line">      anchor,</span><br><span class="line">      parentComponent,</span><br><span class="line">      parentSuspense,</span><br><span class="line">      isSVG,</span><br><span class="line">      slotScopeIds,</span><br><span class="line">      optimized,</span><br><span class="line">      commonLength</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Differences-between-Vue2-and-Vue3"><a href="#Differences-between-Vue2-and-Vue3" class="headerlink" title="Differences between Vue2 and Vue3"></a>Differences between Vue2 and Vue3</h2><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><h4 id="Diff-algorithm-optimization"><a href="#Diff-algorithm-optimization" class="headerlink" title="Diff algorithm optimization"></a>Diff algorithm optimization</h4><ul><li><p>VNodes in Vue2 are a full comparison</p><p>The simple summary is that the pointers on both sides move to the middle for comparison, until one of the traversal of oldCh or newCh is completed. In the Vue2, virtual DOM is a full comparison process. When the object is too large, the update of VNodes will be slower.</p><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/Vue/vue2-diff-img1.png" alt="vue2-diff-img1"></p></li><li><p>Vue3 added a static flag (PatchFlag). During the comparison, only nodes with static flags are compared, and the specific comparison content can be learned through the flags.</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue3&quot;&gt;&lt;a href=&quot;#Vue3&quot; class=&quot;headerlink&quot; title=&quot;Vue3&quot;&gt;&lt;/a&gt;Vue3&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Vue.js is a progressive JavaScript Framework&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Vue" scheme="http://blog.smallstars.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://blog.smallstars.top/posts/53d0684b/"/>
    <id>http://blog.smallstars.top/posts/53d0684b/</id>
    <published>2021-08-15T11:24:20.000Z</published>
    <updated>2022-01-04T15:06:46.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p><strong>Here, I will slowly update some knowledge points about Linux</strong></p><h2 id="Nohup-no-hang-up"><a href="#Nohup-no-hang-up" class="headerlink" title="Nohup(no hang up)"></a>Nohup(no hang up)</h2><p><strong>It’s used to run commands in the background of system hang up. Exiting the terminal will not affect the running of the program</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nohup Command [ Arg … ] [　&amp; ]</span></span><br><span class="line"><span class="comment"># Command：the command will be executed</span></span><br><span class="line"><span class="comment"># Arg：some parameters, we can specify the output file</span></span><br><span class="line"><span class="comment"># &amp;：hang the program in the background</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># running the python program</span></span><br><span class="line">nohup python bot.py &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># specify the output file to runoob.log</span></span><br><span class="line">nohup python bot.py &gt; runoob.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 – stdin (standard input)</span></span><br><span class="line"><span class="comment"># 1 – stdout (standard output)</span></span><br><span class="line"><span class="comment"># 2 – stderr (standard error)</span></span><br><span class="line"><span class="comment"># 2&gt;&amp;1: Redirect the standard error 2 to standard output &amp;1, and &amp;1 is redirected to the runoob.log file</span></span><br><span class="line">nohup python bot.py &gt; runoob.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://www.runoob.com/linux/linux-comm-nohup.html">Linux nohup</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Here, I will slowly update some knowledge points about Linux&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://blog.smallstars.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Bulletin Board</title>
    <link href="http://blog.smallstars.top/posts/93a51c97/"/>
    <id>http://blog.smallstars.top/posts/93a51c97/</id>
    <published>2021-08-15T09:46:56.000Z</published>
    <updated>2022-02-17T15:12:03.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bulletin-Board"><a href="#Bulletin-Board" class="headerlink" title="Bulletin Board"></a>Bulletin Board</h1><p><strong>Hello, here is smallstars’s blog bulletin board! I hope you will like my blog, and you can also leave your link in the comment area, thanks.</strong></p><div class="note info">            <h2 id="Recruitment-Notes"><a href="#Recruitment-Notes" class="headerlink" title="Recruitment Notes"></a>Recruitment Notes</h2><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Bytedance-Logo.png" alt="Bytedance"></p><p><strong>Do challenging things with excellent people!</strong></p><blockquote><p>Introduction Group of QQ: 631647844</p><p>Summer Internship: Class of 2023 (graduation between September 2022 and August 2023)</p><p>Full-time supplementary enrollment: 2022 freshman (graduation between September 2021 and August 2022)</p></blockquote><h3 id="Campus-Recruiting"><a href="#Campus-Recruiting" class="headerlink" title="Campus Recruiting"></a>Campus Recruiting</h3><ul><li>Delivery link: <a href="https://jobs.toutiao.com/s/LvNLPHX">https://jobs.toutiao.com/s/LvNLPHX</a></li><li>Introduction Code: 13HAUHW</li></ul><h3 id="Social-Recruiting"><a href="#Social-Recruiting" class="headerlink" title="Social Recruiting"></a>Social Recruiting</h3><ul><li>Delivery link: <a href="https://job.toutiao.com/s/LvLoqDw">https://job.toutiao.com/s/LvLoqDw</a></li></ul>          </div>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Bulletin-Board&quot;&gt;&lt;a href=&quot;#Bulletin-Board&quot; class=&quot;headerlink&quot; title=&quot;Bulletin Board&quot;&gt;&lt;/a&gt;Bulletin Board&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Hello, here is smallstars’s blog bulletin board! I hope you will like my blog, and you can also leave your link in the comment area, thanks.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>KMP</title>
    <link href="http://blog.smallstars.top/posts/ad32db8f/"/>
    <id>http://blog.smallstars.top/posts/ad32db8f/</id>
    <published>2021-04-19T10:09:42.000Z</published>
    <updated>2021-05-01T04:13:00.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p><strong>KMP algorithm is an improved version of pattern matching. It’s reduced the number of repeated mathcing.</strong></p><h2 id="Partial-Match-Array"><a href="#Partial-Match-Array" class="headerlink" title="Partial Match Array"></a>Partial Match Array</h2><h3 id="Define"><a href="#Define" class="headerlink" title="Define"></a>Define</h3><p><strong>Prefix string:</strong> All header substrings of a string except the last character.</p><p><strong>Suffix string:</strong> All trailing substrings of a string execept the first character.</p><p><strong>PM:</strong> PM is the maximum length of string at the intersection of prefix and suffix string.</p><div class="table-container"><table><thead><tr><th style="text-align:center">Index</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center"><strong>S=”ababa”</strong></td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center"><strong>PM</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr></tbody></table></div><ol><li>‘a’: $pre=suf=\varnothing$, PM = 0.</li><li>‘ab’: $pre={a}, \ suf={b}, \ pre \cap suf = \varnothing$, PM = 0.</li><li>‘aba’:$pre={a,ab}, \ suf={a,ba}, \ pre \cap suf = {a}$, PM = 1.</li><li>‘abab’:$pre={a,ab,aba}, \ suf={b,ab,bab}, \ pre \cap suf = {ab}$, PM = 2.</li><li>‘ababa’:$pre={a,ab,aba,abab}, \ suf={a,ba,aba,baba}, \ pre \cap suf = {a,aba}$, PM = 3.</li></ol><h3 id="Matching-Process"><a href="#Matching-Process" class="headerlink" title="Matching Process"></a>Matching Process</h3><p><strong>j</strong> is mathcing pointer position of current substring.</p><p><strong>The number of digits moving to the right = The number of characters have been matched - PM value of corresponding section.</strong></p><script type="math/tex; mode=display">txt = ababcabcacbab,\  pat=abcac</script><script type="math/tex; mode=display">Move = (j-1)\  - \  PM[j-1]</script><div class="table-container"><table><thead><tr><th style="text-align:center">Index</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center"><strong>S=”abcac”</strong></td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center">a</td><td style="text-align:center">c</td></tr><tr><td style="text-align:center"><strong>PM</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><p><strong>step 1:</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">c</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><script type="math/tex; mode=display">Move = (3 - 1) - PM[2] = 2 - 0 = 2</script><p><strong>step 2:</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">c</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center">a</td><td style="text-align:center">c</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><script type="math/tex; mode=display">Move = (5 - 1) - PM[4] = 4 - 1 = 3</script><p><strong>step 3:</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">c</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center">a</td><td style="text-align:center">c</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><div class="table-container"><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">c</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center">a</td><td style="text-align:center">c</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center">a</td><td style="text-align:center">c</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p>For PM, when matching failed, we query the PM value of previous element. We move the PM values one place to right, this new array is called Next, we use -1 to fill in the first place. Now we can use Next value of current position when matching failed.</p><div class="table-container"><table><thead><tr><th style="text-align:center">Index</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center"><strong>S=”abcac”</strong></td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center">a</td><td style="text-align:center">c</td></tr><tr><td style="text-align:center"><strong>Next</strong></td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table></div><script type="math/tex; mode=display">Move = (j - 1)\  - \ next[j]</script><script type="math/tex; mode=display">j = j - Move = j - ((j-1)-next[j]) = next[j] + 1</script><p>So we can simplify the formula. Add 1 to all values in Next.</p><div class="table-container"><table><thead><tr><th style="text-align:center">Index</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center"><strong>S=”abcac”</strong></td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center">a</td><td style="text-align:center">c</td></tr><tr><td style="text-align:center"><strong>Next</strong></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr></tbody></table></div><script type="math/tex; mode=display">j = next[j]</script><h2 id="Get-Next"><a href="#Get-Next" class="headerlink" title="Get Next"></a>Get Next</h2><p><strong>We can get it form the previous PM, but it’s too troublesome.</strong></p><script type="math/tex; mode=display">txt = s_1s_2...s_n</script><script type="math/tex; mode=display">pat = p_1p_2...p_m</script><p><strong>k</strong> means it’s being compared to the k-th character in the pattern string. i is the current matching pointer of main string.</p><script type="math/tex; mode=display">p_1p_2...p_{k-1} = p_{j-k+1}p_{j-k+2}...p_{j-1}</script><p>Here refer to the calculation of PM value. PM is the maximum value, so they’re the same when it doesn’t reach the maximum.</p><p><strong>The strings in parentheses are the same.</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">$s_1$</th><th style="text-align:center">[…</th><th style="text-align:center">…</th><th style="text-align:center">…]</th><th style="text-align:center">…</th><th style="text-align:center">…</th><th style="text-align:center">[$s_{i-k+1}$</th><th style="text-align:center">…</th><th style="text-align:center">$s_{i-1}$]</th><th style="text-align:center">$s_i$</th><th style="text-align:center">…</th><th style="text-align:center">…</th><th style="text-align:center">…</th><th style="text-align:center">…</th><th style="text-align:center">$s_n$</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">[$p_1$</td><td style="text-align:center">…</td><td style="text-align:center">$p_{k-1}$]</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">[$p_{i-k+1}$</td><td style="text-align:center">…</td><td style="text-align:center">$p_{j-1}$]</td><td style="text-align:center">$p_j$</td><td style="text-align:center">…</td><td style="text-align:center">$p_{m}$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">[$p_1$</td><td style="text-align:center">…</td><td style="text-align:center">$p_{k-1}$]</td><td style="text-align:center">$p_k$</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">$p_{m}$</td><td style="text-align:center"></td></tr></tbody></table></div><script type="math/tex; mode=display">next[j] =\begin{cases}0, &(j = 0)\\max(next[k])+1, &(1 \lt k \lt j \ and \ p_1...p_k = p_{j-k+1}...p_{j-1})\\1, &else\end{cases}</script><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getNext = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = s.length,</span><br><span class="line">    j = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> next = <span class="keyword">new</span> <span class="built_in">Array</span>(len).fill(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; next[++i] = ++j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j !== -<span class="number">1</span> &amp;&amp; s[i] !== s[j]) &#123;</span><br><span class="line">      j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> kmp = <span class="function">(<span class="params">s, t</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> next = getNext(t),</span><br><span class="line">    [slen, tlen] = [s.length, t.length],</span><br><span class="line">    i = (j = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; slen &amp;&amp; j &lt; tlen) &#123;</span><br><span class="line">    <span class="comment">// next[0] is -1</span></span><br><span class="line">    <span class="keyword">if</span> (j === <span class="number">0</span> || s[i] === t[j]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      j++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (j &gt;= tlen) <span class="keyword">return</span> i - tlen;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.bilibili.com/video/BV16X4y137qw/?spm_id_from=333.788.recommend_more_video.1">KMP 算法之求 next 数组代码讲解</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;KMP&quot;&gt;&lt;a href=&quot;#KMP&quot; class=&quot;headerlink&quot; title=&quot;KMP&quot;&gt;&lt;/a&gt;KMP&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;KMP algorithm is an improved version of pattern matching. It’s reduced the number of repeated mathcing.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://blog.smallstars.top/tags/Algorithm/"/>
    
    <category term="JavaScript" scheme="http://blog.smallstars.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ACM Problems</title>
    <link href="http://blog.smallstars.top/posts/643e93d7/"/>
    <id>http://blog.smallstars.top/posts/643e93d7/</id>
    <published>2021-04-17T09:10:39.000Z</published>
    <updated>2021-08-25T14:53:18.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACM-Problems"><a href="#ACM-Problems" class="headerlink" title="ACM Problems"></a>ACM Problems</h1><p><strong>Here are some of the problems I encountered in ACM.</strong></p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="Merge-Intervals"><a href="#Merge-Intervals" class="headerlink" title="Merge Intervals"></a><a href="https://leetcode-cn.com/problems/merge-intervals/">Merge Intervals</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Intervals that can be merged must be contiguous.</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span> (<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Sort the intervals and start from the minimum value.</span></span><br><span class="line">  intervals.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = res.length;</span><br><span class="line">    <span class="comment">// compare with the last value of res.</span></span><br><span class="line">    <span class="keyword">if</span> (res.length === <span class="number">0</span> || res[len - <span class="number">1</span>][<span class="number">1</span>] &lt; intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">      res.push([...intervals[i]]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Take the maximum value when merge.</span></span><br><span class="line">      res[len - <span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">Math</span>.max(res[len - <span class="number">1</span>][<span class="number">1</span>], intervals[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Diagonal-Traverse"><a href="#Diagonal-Traverse" class="headerlink" title="Diagonal Traverse"></a><a href="https://leetcode-cn.com/problems/diagonal-traverse/">Diagonal Traverse</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Traverse the array with each value in the first row as starting point in the upper right corner, and finally reverse the odd traversal array.</span></span><br><span class="line"><span class="keyword">var</span> findDiagonalOrder = <span class="function"><span class="keyword">function</span> (<span class="params">mat</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [h, w] = [mat.length, mat[<span class="number">0</span>].length],</span><br><span class="line">    <span class="comment">// n is the number of traversal</span></span><br><span class="line">    n = h + w - <span class="number">1</span>,</span><br><span class="line">    res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j, i;</span><br><span class="line">    <span class="comment">// When hight is larger than the width, the starting point moves down.</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt;= w) &#123;</span><br><span class="line">      j = w - <span class="number">1</span>;</span><br><span class="line">      i = k - (w - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      j = k;</span><br><span class="line">      i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sub = [];</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; i &lt; h) &#123;</span><br><span class="line">      sub.push(mat[i][j]);</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!((i + j) % <span class="number">2</span>)) &#123;</span><br><span class="line">      sub = sub.reverse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(res, sub);</span></span><br><span class="line">    res = res.concat(sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="Longest-Common-Prefix-LCP"><a href="#Longest-Common-Prefix-LCP" class="headerlink" title="Longest Common Prefix (LCP)"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/">Longest Common Prefix (LCP)</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The longest common prefix is continuously updated by the first string standard.</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span> (<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (strs.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (strs.length === <span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> res = strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; res.length; j++) &#123;</span><br><span class="line">      <span class="comment">// console.log(j, res[j], strs[i][j]);</span></span><br><span class="line">      <span class="keyword">if</span> (res[j] !== strs[i][j]) &#123;</span><br><span class="line">        res = res.substring(<span class="number">0</span>, j);</span><br><span class="line">        <span class="comment">// console.log(res);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h2><h3 id="Valid-Sudoku"><a href="#Valid-Sudoku" class="headerlink" title="Valid Sudoku"></a><a href="https://leetcode-cn.com/problems/valid-sudoku/">Valid Sudoku</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Double traversal, putting different values into different arrays, filtering according to the rules.</span></span><br><span class="line"><span class="keyword">var</span> isValidSudoku = <span class="function"><span class="keyword">function</span> (<span class="params">board</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rowArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>()),</span><br><span class="line">    colArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>()),</span><br><span class="line">    boxArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">      <span class="comment">// if there is not a number, skip it.</span></span><br><span class="line">      <span class="keyword">if</span> (board[i][j] === <span class="string">&quot;.&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="comment">// according the i and j to judge the index of sub-box.</span></span><br><span class="line">      <span class="keyword">let</span> boxIndex = <span class="built_in">Math</span>.floor(i / <span class="number">3</span>) * <span class="number">3</span> + <span class="built_in">Math</span>.floor(j / <span class="number">3</span>);</span><br><span class="line">      <span class="comment">// check row</span></span><br><span class="line">      <span class="keyword">if</span> (rowArr[i].has(board[i][j])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// check column</span></span><br><span class="line">      <span class="keyword">if</span> (colArr[j].has(board[i][j])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// check box</span></span><br><span class="line">      <span class="keyword">if</span> (boxArr[boxIndex].has(board[i][j])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add the new valid value.</span></span><br><span class="line">      rowArr[i].add(board[i][j]);</span><br><span class="line">      colArr[j].add(board[i][j]);</span><br><span class="line">      boxArr[boxIndex].add(board[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(rowArr);</span></span><br><span class="line">  <span class="comment">// console.log(colArr);</span></span><br><span class="line">  <span class="comment">// console.log(boxArr);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><h3 id="Coin-Change"><a href="#Coin-Change" class="headerlink" title="Coin Change"></a><a href="https://leetcode-cn.com/problems/coin-change/">Coin Change</a></h3><p><strong>Transition equations:</strong> $F(i) = \min_{j=0…n-1}F(i - Cj) + 1$</p><p><strong><em>F(i)</em></strong> is the minimum number of coins required to make up current amount. <strong><em>Cj</em></strong> is the value of j-th coins.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// From 1 to amount, find the optimal solution for each step.</span></span><br><span class="line"><span class="keyword">var</span> coinChange = <span class="function"><span class="keyword">function</span> (<span class="params">coins, amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (coins.length === <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> len = coins.length,</span><br><span class="line">    dp = [<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">    <span class="comment">// Initial</span></span><br><span class="line">    dp.push(<span class="literal">Infinity</span>);</span><br><span class="line">    <span class="comment">// optimal solution of currenting money</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt;= coins[j] &amp;&amp; dp[i - coins[j]] !== <span class="literal">Infinity</span>) &#123;</span><br><span class="line">        <span class="comment">// with the different coin update the dp[i] to minimum constantly.</span></span><br><span class="line">        dp[i] = <span class="built_in">Math</span>.min(dp[i - coins[j]] + <span class="number">1</span>, dp[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(dp);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[amount] === <span class="literal">Infinity</span> ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Jump-Game"><a href="#Jump-Game" class="headerlink" title=" Jump Game"></a><a href="https://leetcode-cn.com/problems/jump-game/"> Jump Game</a></h3><p><strong>Transition equations:</strong> $F(j) = F(i) \ and \ (i+u(i)) \geq j \ \ (0\le i \lt j)$</p><p><strong><em>F(j)</em></strong> records whether the position can be reached. <strong><em>u(i)</em></strong> is the displacement at <strong><em>i</em></strong>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Record whether current position can be reached.</span></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!nums || nums.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> dp = [<span class="literal">true</span>],</span><br><span class="line">    len = nums.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    dp.push(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (dp[j] &amp;&amp; j + nums[j] &gt;= i) &#123;</span><br><span class="line">        dp[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(dp);</span></span><br><span class="line">  <span class="keyword">return</span> dp[len - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Unique-Paths"><a href="#Unique-Paths" class="headerlink" title="Unique Paths"></a><a href="https://leetcode-cn.com/problems/unique-paths/">Unique Paths</a></h3><p><strong>Transition equations:</strong> $f(i,j) = f(i−1, j) + f(i, j−1)$</p><p><strong><em>F(i,j)</em></strong> is the number of paths to record the current location.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Current number of path is equal to the sum of values of upper cell and left cell.</span></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span> (<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(m).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">0</span> || j === <span class="number">0</span>) dp[i][j] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(dp);</span></span><br><span class="line">  <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Unique-Paths-II"><a href="#Unique-Paths-II" class="headerlink" title="Unique Paths II"></a><a href="https://leetcode-cn.com/problems/unique-paths-ii/">Unique Paths II</a></h3><p><strong>Transition equations:</strong> $f(i,j) =<br>\begin{cases}<br>0, &amp;u(i, j) = 0    \<br>f(i-1, j) + f(i, j-1), &amp;u(i, j) \neq 0<br>\end{cases}$</p><p><strong><em>u(i,j)</em></strong> is to record whether there is an obstacle at the current location.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniquePathsWithObstacles = <span class="function"><span class="keyword">function</span> (<span class="params">obstacleGrid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [h, w] = [obstacleGrid.length, obstacleGrid[<span class="number">0</span>].length];</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(h).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(w).fill(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obstacleGrid[i][j] === <span class="number">1</span>) dp[i][j] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span> &amp;&amp; j === <span class="number">0</span>) &#123;</span><br><span class="line">          dp[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obstacleGrid[i][j] !== <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= <span class="number">1</span>) dp[i][j] += dp[i - <span class="number">1</span>][j];</span><br><span class="line">          <span class="keyword">if</span> (j &gt;= <span class="number">1</span>) dp[i][j] += dp[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(dp);</span></span><br><span class="line">  <span class="keyword">return</span> dp[h - <span class="number">1</span>][w - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">Best Time to Buy and Sell Stock</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span> (<span class="params">prices</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// judge the boundary conditions</span></span><br><span class="line">  <span class="keyword">if</span> (!prices || prices.length === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> len = prices.length,</span><br><span class="line">    dp = [<span class="number">0</span>],</span><br><span class="line">    minPrice = prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// find the minimum price</span></span><br><span class="line">    minPrice = <span class="built_in">Math</span>.min(minPrice, prices[i]);</span><br><span class="line">    <span class="comment">// record the maximum profit of per day</span></span><br><span class="line">    dp.push(<span class="built_in">Math</span>.max(dp[i - <span class="number">1</span>], prices[i] - minPrice));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[len - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><h3 id="Jump-Game-1"><a href="#Jump-Game-1" class="headerlink" title=" Jump Game"></a><a href="https://leetcode-cn.com/problems/jump-game/"> Jump Game</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constantly update maximum distance, observe whether the maximum distance can reach the finish line.</span></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> maxPos = nums[<span class="number">0</span>],</span><br><span class="line">    len = nums.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Whether you can continue to expand scope within scope of accessibility.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= maxPos; i++) &#123;</span><br><span class="line">    maxPos = <span class="built_in">Math</span>.max(maxPos, i + nums[i]);</span><br><span class="line">    <span class="comment">// console.log(i, maxPos);</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; len - <span class="number">1</span> &amp;&amp; maxPos &gt;= len - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/ACMer1.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dx = [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  dy = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> polymerize = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length,</span><br><span class="line">    res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> h,</span><br><span class="line">    w = -<span class="literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    h = h &gt; arr[i][<span class="number">0</span>] ? h : arr[i][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">    w = w &gt; arr[i][<span class="number">1</span>] ? w : arr[i][<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> flag = <span class="keyword">new</span> <span class="built_in">Array</span>(h).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(w).fill(<span class="literal">false</span>)),</span><br><span class="line">    lake = <span class="keyword">new</span> <span class="built_in">Array</span>(h).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(w).fill(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    lake[arr[i][<span class="number">0</span>]][arr[i][<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(lake);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag[arr[i][<span class="number">0</span>]][arr[i][<span class="number">1</span>]]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    flag[arr[i][<span class="number">0</span>]][arr[i][<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> cur = [arr[i]],</span><br><span class="line">      index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index !== cur.length) &#123;</span><br><span class="line">      <span class="keyword">let</span> [m, n] = cur[index];</span><br><span class="line">      <span class="comment">// console.log(m, n);</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// console.log(m + dy[i]);</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          m + dy[i] &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">          m + dy[i] &lt; h &amp;&amp;</span><br><span class="line">          n + dx[i] &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">          n + dx[i] &lt; w &amp;&amp;</span><br><span class="line">          !flag[m + dy[i]][n + dx[i]] &amp;&amp;</span><br><span class="line">          lake[m + dy[i]][n + dx[i]]</span><br><span class="line">        ) &#123;</span><br><span class="line">          cur.push([m + dy[i], n + dx[i]]);</span><br><span class="line">          flag[m + dy[i]][n + dx[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      index++;</span><br><span class="line">      <span class="comment">// console.log(cur);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.push([...cur]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="Max-Area-of-Island"><a href="#Max-Area-of-Island" class="headerlink" title="Max Area of Island"></a><a href="https://leetcode-cn.com/problems/max-area-of-island/">Max Area of Island</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> maxAreaOfIsland = <span class="function">(<span class="params">grid</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// up down left right</span></span><br><span class="line">  <span class="keyword">const</span> dx = [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> dy = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (!grid) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// width height</span></span><br><span class="line">  <span class="keyword">const</span> [w, h] = [grid[<span class="number">0</span>].length, grid.length];</span><br><span class="line">  <span class="comment">// curMaxLen is the number of a block</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>,</span><br><span class="line">    curMaxLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Judge the boundary conditions</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt;= h || y &gt;= w || x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || !grid[x][y]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// Mark the point reached</span></span><br><span class="line">    grid[x][y] = <span class="number">0</span>;</span><br><span class="line">    curMaxLen++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spread to surrounding points</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      dfs(x + dx[i], y + dy[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line">      <span class="comment">// if the value is 0</span></span><br><span class="line">      <span class="keyword">if</span> (!grid[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">      dfs(i, j);</span><br><span class="line">      res = <span class="built_in">Math</span>.max(res, curMaxLen);</span><br><span class="line">      <span class="comment">// Need to clear the length after traversing a part</span></span><br><span class="line">      curMaxLen = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Permutations"><a href="#Permutations" class="headerlink" title="Permutations"></a><a href="https://leetcode-cn.com/problems/permutations/">Permutations</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permute = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">curPath</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// All  number has been recorded</span></span><br><span class="line">    <span class="keyword">if</span> (curPath.length === nums.length) <span class="keyword">return</span> res.push([...curPath]);</span><br><span class="line">    <span class="comment">//  Traverse array to find the unrecorded numbers</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (curPath.indexOf(nums[i]) !== -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">      curPath.push(nums[i]);</span><br><span class="line">      dfs(curPath);</span><br><span class="line">      curPath.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// Initialize the path array</span></span><br><span class="line">  dfs([]);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ACM-Problems&quot;&gt;&lt;a href=&quot;#ACM-Problems&quot; class=&quot;headerlink&quot; title=&quot;ACM Problems&quot;&gt;&lt;/a&gt;ACM Problems&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Here are some of the problems I encountered in ACM.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="http://blog.smallstars.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm and Data Structure</title>
    <link href="http://blog.smallstars.top/posts/17f44e1a/"/>
    <id>http://blog.smallstars.top/posts/17f44e1a/</id>
    <published>2021-04-05T15:00:51.000Z</published>
    <updated>2021-08-25T14:53:18.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm-and-Data-Structure"><a href="#Algorithm-and-Data-Structure" class="headerlink" title="Algorithm and Data Structure"></a>Algorithm and Data Structure</h1><p><strong>Algorithm and Data Structure.</strong></p><h2 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><strong>The position of substrings (pattern string) is called pattern matching of strings.</strong></p><h4 id="Implement-strStr"><a href="#Implement-strStr" class="headerlink" title="Implement strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/">Implement strStr()</a></h4><ul><li><p>Violent match</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strStr = <span class="function"><span class="keyword">function</span> (<span class="params">haystack, needle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [len1, len2] = [haystack.length, needle.length];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = (j = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2) &#123;</span><br><span class="line">    <span class="comment">// console.log(i, j);</span></span><br><span class="line">    <span class="keyword">if</span> (haystack[i] === needle[j]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      j++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i = i - j + <span class="number">1</span>;</span><br><span class="line">      j = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (j &gt;= len2) <span class="keyword">return</span> i - j;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>KMP</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h3><p><strong>Hash Table is a structure of key-value.</strong></p><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><h4 id="Array-to-Tree"><a href="#Array-to-Tree" class="headerlink" title="Array to Tree"></a>Array to Tree</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the stuct of TreeNode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">  id = <span class="number">0</span>;</span><br><span class="line">  pid = <span class="number">0</span>;</span><br><span class="line">  name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  children = [];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, pid, name &#125; = node;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.pid = pid;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createTreeNode = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">new</span> TreeNode(node);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the compare of sort</span></span><br><span class="line"><span class="keyword">const</span> compare = <span class="function">(<span class="params">properties</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[properties[<span class="number">0</span>]] !== b[properties[<span class="number">0</span>]]) &#123;</span><br><span class="line">      <span class="keyword">return</span> a[properties[<span class="number">0</span>]] - b[properties[<span class="number">0</span>]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a[properties[<span class="number">1</span>]] - b[properties[<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayToTree = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// judge the boundary conditions</span></span><br><span class="line">  <span class="keyword">if</span> (!arr || !arr.length) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// sort the data according to rules, pid -&gt; id</span></span><br><span class="line">  arr.sort(compare([<span class="string">&quot;pid&quot;</span>, <span class="string">&quot;id&quot;</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * root</span></span><br><span class="line"><span class="comment">   * curNodes: record which nodes have been traversed</span></span><br><span class="line"><span class="comment">   * curParNode: record who the current parent node is</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> root = createTreeNode(arr.shift()),</span><br><span class="line">    curNodes = [root],</span><br><span class="line">    curParNode = curNodes.shift();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> node <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">let</span> curNode = createTreeNode(node);</span><br><span class="line">    <span class="comment">// Mark the curNode(current node) has been traversed, put it into the curNodes</span></span><br><span class="line">    curNodes.push(curNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Determine whether the parent node of curNode(current node) is the curParNode(current parent node)</span></span><br><span class="line">    <span class="keyword">while</span> (curParNode.id !== curNode.pid) &#123;</span><br><span class="line">      <span class="comment">// if not, changed the curParNode</span></span><br><span class="line">      curParNode = curNodes.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// put the children node into the curParNode&#x27;s children array</span></span><br><span class="line">    curParNode.children.push(curNode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrayToTree(data));</span><br></pre></td></tr></table></figure><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h3 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">arr, a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = arr[a]</span><br><span class="line">  arr[a] = arr[b]</span><br><span class="line">  arr[b] = temp</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BubbleSort"><a href="#BubbleSort" class="headerlink" title="BubbleSort"></a>BubbleSort</h4><p><strong>If a larger value is encountered, pass it backward.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bubbleSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="comment">// Tow adjacent elements compare and swap.</span></span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) swap(arr, i, i + <span class="number">1</span>)</span><br><span class="line">      <span class="comment">// Current element and the last element compare and swap.</span></span><br><span class="line">      <span class="comment">// if(arr[i] &gt; arr[len]) swap(arr, i, len)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SelectSort"><a href="#SelectSort" class="headerlink" title="SelectSort"></a>SelectSort</h4><p><strong>Select the maximum value in current scope and place it last.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selectSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">    <span class="keyword">let</span> maxIndex = <span class="number">0</span>,</span><br><span class="line">      maxVal = arr[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// because len--, here sholud is len+1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len + <span class="number">1</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] &gt; maxVal)&#123;</span><br><span class="line">      maxVal = arr[i]</span><br><span class="line">        maxIndex = i</span><br><span class="line">      &#125;</span><br><span class="line">      swap(arr, maxIndex, len)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InsertSort"><a href="#InsertSort" class="headerlink" title="InsertSort"></a>InsertSort</h4><p><strong>From the beginning of traversal, asuume that the n-1 has been sorted, and compare and insert from back to front.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insertSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Assume the first value is ordered.</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> j = i,</span><br><span class="line">        temp = arr[j]</span><br><span class="line">    <span class="comment">// Find the current correct position.</span></span><br><span class="line">    <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; temp)&#123;</span><br><span class="line">      arr[j] = arr[j-<span class="number">1</span>]</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ShellSort"><a href="#ShellSort" class="headerlink" title="ShellSort"></a>ShellSort</h4><p><strong>The advanced version of  insert sort.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shellSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">let</span> gap = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(gap)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// shellSort is start from the second part, so our i start from gap to the end of array.</span></span><br><span class="line">    <span class="comment">// This gap is rounded down, so there may be extra parts in lower half.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = gap; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="keyword">let</span> j = i,</span><br><span class="line">          temp = arr[i]</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j - gap] &gt; temp)&#123;</span><br><span class="line">        arr[j] = arr[j - gap]</span><br><span class="line">        j -= gap</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QuickSort"><a href="#QuickSort" class="headerlink" title="QuickSort"></a>QuickSort</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quickSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  quick(arr, <span class="number">0</span>, len-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quick = <span class="function">(<span class="params">arr, left, right</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span> arr</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// find the pivot</span></span><br><span class="line">  <span class="keyword">let</span> pivot = median(arr, left, right)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// double pointers traversal exchange value</span></span><br><span class="line">  <span class="keyword">let</span> i = left</span><br><span class="line">  <span class="keyword">let</span> j = right-<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= pivot) i++</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[j] &gt;= pivot) j--</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= j) <span class="keyword">break</span></span><br><span class="line">    swap(arr, i, j)</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, j, right-<span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  quick(arr, left, j-<span class="number">1</span>)</span><br><span class="line">  quick(arr, j+<span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="function"><span class="title">median</span>(<span class="params">arr, left, right</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// first, sort the three values</span></span><br><span class="line">  <span class="keyword">if</span>(arr[left] &gt; arr[right]) swap(arr, left, right)</span><br><span class="line">  <span class="keyword">if</span>(arr[left] &gt; arr[mid]) swap(arr, left, mid)</span><br><span class="line">  <span class="keyword">if</span>(arr[mid] &gt; arr[right]) swap(arr, mid, right)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// second, place the middle value in the correct position</span></span><br><span class="line">  swap(arr, mid, right-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> arr[right-<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MergeSort"><a href="#MergeSort" class="headerlink" title="MergeSort"></a>MergeSort</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">if</span>(len &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> leftArr = arr.slice(<span class="number">0</span>, mid),</span><br><span class="line">      rightArr = arr.slice(mid)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(leftArr), mergeSort(rightArr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">leftArr, rightArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [leftArrLen, rightArrLen] = [leftArr.length, rightArr.length]</span><br><span class="line">  <span class="keyword">let</span> leftIndex = <span class="number">0</span>, rightIndex = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> mergeArr = []</span><br><span class="line">  <span class="keyword">while</span>(leftIndex &lt; leftArrLen &amp;&amp; rightIndex &lt; rightArrLen)&#123;</span><br><span class="line">    mergeArr.push(leftArr[leftIndex] &lt; rightArr[rightIndex] ? leftArr[leftIndex++] : rightArr[rightIndex++])</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(leftIndex &lt; leftArrLen) mergeArr.push(leftArr[leftIndex++])</span><br><span class="line">  <span class="keyword">while</span>(rightIndex &lt; rightArrLen) mergeArr.push(rightArr[rightIndex++])</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> mergeArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CountingSort"><a href="#CountingSort" class="headerlink" title="CountingSort"></a>CountingSort</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countingSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> bucket = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!bucket[val]) bucket[val] = <span class="number">0</span>;</span><br><span class="line">    bucket[val]++;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> bucket) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket[key]; i++) &#123;</span><br><span class="line">      arr[index] = <span class="built_in">parseInt</span>(key);</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="HeapSort"><a href="#HeapSort" class="headerlink" title="HeapSort"></a>HeapSort</h4><h5 id="Maximum-Heap"><a href="#Maximum-Heap" class="headerlink" title="Maximum Heap"></a>Maximum Heap</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> heapSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  buildHeap(arr)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    swap(arr, <span class="number">0</span>, i)</span><br><span class="line">    heapify(arr, i, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buildHeap = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length,</span><br><span class="line">      last_node = len-<span class="number">1</span>,</span><br><span class="line">      buildIndex = <span class="built_in">Math</span>.floor((last_node - <span class="number">1</span>) / <span class="number">2</span>) </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = buildIndex; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    heapify(arr, len, i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> heapify = <span class="function">(<span class="params">arr, len, parent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> left = parent * <span class="number">2</span> + <span class="number">1</span>,</span><br><span class="line">      right = parent * <span class="number">2</span> + <span class="number">2</span>,</span><br><span class="line">      maxPos = parent</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(left &lt; len &amp;&amp; arr[left] &gt; arr[maxPos]) maxPos = left</span><br><span class="line">  <span class="keyword">while</span>(right &lt; len &amp;&amp; arr[right] &gt; arr[maxPos]) maxPos = right</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(maxPos !== parent)&#123;</span><br><span class="line">    swap(arr, parent, maxPos)</span><br><span class="line">    heapify(arr, len, maxPos)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Minimum-Heap"><a href="#Minimum-Heap" class="headerlink" title="Minimum Heap"></a>Minimum Heap</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> heapify = <span class="function">(<span class="params">arr, len, parent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> left = parent * <span class="number">2</span> + <span class="number">1</span>,</span><br><span class="line">      right = parent * <span class="number">2</span> + <span class="number">2</span>,</span><br><span class="line">      minPos = parent</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(left &lt; len &amp;&amp; arr[left] &lt; arr[minPos]) maxPos = left</span><br><span class="line">  <span class="keyword">while</span>(right &lt; len &amp;&amp; arr[right] &lt; arr[minPos]) maxPos = right</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(maxPos !== parent)&#123;</span><br><span class="line">    swap(arr, parent, minPos)</span><br><span class="line">    heapify(arr, len, minPos)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bucketSort"><a href="#bucketSort" class="headerlink" title="bucketSort"></a>bucketSort</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bucketSort = <span class="function">(<span class="params">arr, bucketSize</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">let</span> minValue = <span class="built_in">Math</span>.min(...arr),</span><br><span class="line">      maxValue = <span class="built_in">Math</span>.max(...arr)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Initialize the bucket</span></span><br><span class="line">  bucketSize = bucketSize || <span class="number">5</span></span><br><span class="line">  <span class="keyword">let</span> bucketCount = <span class="built_in">Math</span>.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span>,</span><br><span class="line">      buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(bucketCount)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Note here must be a new array and cannot refer to the same array address.</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) bucket[i] = []</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// putting the number to corresponding scope.</span></span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> buckets[<span class="built_in">Math</span>.floor((i - minValue) / bucketSize)].push(i))</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// reset the arr</span></span><br><span class="line">  arr.length = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buckets.length; i++)&#123;</span><br><span class="line">    insertSort(buckets[i])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; buckets[i]; j++)&#123;</span><br><span class="line">      arr.push(buckets[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://blog.csdn.net/weixin_40596016/article/details/79711682">十大排序算法详解</a></p><p><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">十大经典排序算法</a></p><p><a href="https://www.bilibili.com/video/BV1Eb41147dK?from=search&amp;seid=16277008371724387204">HeapSort Video</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Algorithm-and-Data-Structure&quot;&gt;&lt;a href=&quot;#Algorithm-and-Data-Structure&quot; class=&quot;headerlink&quot; title=&quot;Algorithm and Data Structure&quot;&gt;&lt;/a&gt;Algorithm and Data Structure&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Algorithm and Data Structure.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://blog.smallstars.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>EventLoop</title>
    <link href="http://blog.smallstars.top/posts/df38ec5a/"/>
    <id>http://blog.smallstars.top/posts/df38ec5a/</id>
    <published>2021-04-04T13:09:45.000Z</published>
    <updated>2021-04-06T09:38:36.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h1><p><strong>The JS monitor process determines the order in which different event are executed. This is the Event Loop</strong></p><h2 id="Basic-knowledge-of-JS"><a href="#Basic-knowledge-of-JS" class="headerlink" title="Basic knowledge of JS"></a>Basic knowledge of JS</h2><ul><li><p>JS is a sigle line scripting language. So it avoids the paradoxical problem of working with the same DOM at the same time.</p></li><li><p>The monitor process will constantly check if the main thread execution stack is empty. and if it is, it will go to the Event Queue to check if there are any functions waiting to be called.</p></li><li><p>All synchronized tasked are executed on the main thread, forming an execution stack.</p></li><li><p>Synchronous</p><p>Tasks queued for execution on the main thread which must wait the previous task to complete.</p></li><li><p>Asynchronous</p><p>Tasks enter the task queue but don’t enter the main thread cannot enter the main thread until the task queue notifies the main thread that an asynchronous task is ready.</p><ul><li>setTimeout</li><li>setInterval</li><li>ajax</li><li>promise</li><li>I/O</li></ul></li><li><p>Micro Task</p><ul><li>promise.then</li><li>promise.nextTick (node)</li></ul></li><li>Macro Task<ul><li>The overall script</li><li>setTimeout</li><li>setInterval</li></ul></li></ul><h2 id="Event-Loop-1"><a href="#Event-Loop-1" class="headerlink" title="Event Loop"></a>Event Loop</h2><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/EventLoop1.png" alt="EventLoop"></p><ol><li>With the overall scripty as the first macro task starting, splite the all task into two parts. Synchronous tasks and asynchronous tasks.</li><li>Synchronous tasks will be executed enter the main thread right now.</li><li>Asynchronous tasks will splite into micro and macro tasks.</li><li>Macro and micro tasks will enter the different Event Table, and moves the registered callback function for the specified event to different event queue.</li><li>When the main thread is idle, it will executed the callback functions in the Event Queue of microtask and the macro task in order.</li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> event1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">    resolve(<span class="number">5</span>);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 4 10 5 6 7 2 3 9 8</span></span><br><span class="line">event1()</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">Micro</th><th style="text-align:center">Macro</th><th style="text-align:center">Output</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">2,9</td><td style="text-align:center">1,4,10</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">2,9,8</td><td style="text-align:center">1,4,10,5,6,7</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">9,8</td><td style="text-align:center">1,4,10,5,6,7,2</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">8</td><td style="text-align:center">1,4,10,5,6,7,2,3,9</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1,4,10,5,6,7,2,3,9,8</td></tr></tbody></table></div><h3 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> event2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">    resolve(<span class="number">5</span>);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 4 7 5 2 3 6</span></span><br><span class="line">event2()</span><br></pre></td></tr></table></figure><h3 id="Case-3"><a href="#Case-3" class="headerlink" title="Case 3"></a>Case 3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> event3 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  async1();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">reslove</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    reslove();</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return of await as a then()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">await async2();</span></span><br><span class="line"><span class="comment">console.log(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">is same as</span></span><br><span class="line"><span class="comment">new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">      console.log(&quot;3&quot;);</span></span><br><span class="line"><span class="comment">      resolve(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">    &#125;).then((res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">      console.log(res);</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 4 1 3 6 8 2 7 5</span></span><br><span class="line">event3()</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.jianshu.com/p/e06e86ef2595">js运行机制详解（Event Loop）</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Event-Loop&quot;&gt;&lt;a href=&quot;#Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;Event Loop&quot;&gt;&lt;/a&gt;Event Loop&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;The JS monitor process determines the order in which different event are executed. This is the Event Loop&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Emoji</title>
    <link href="http://blog.smallstars.top/posts/778ad936/"/>
    <id>http://blog.smallstars.top/posts/778ad936/</id>
    <published>2021-04-03T13:07:12.000Z</published>
    <updated>2021-04-04T12:55:47.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h1><p><strong>Emoji is a visual symbol used in wireless communication in Japan. Image refers to pictures, while text refers to characters, which can be used to represent a variety of expression, such as smiley faces representing laughter and cakes representing food.</strong></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://emojixd.com/">EmojiXD</a></p><p><a href="http://emojihomepage.com/">Emoji Homepage</a></p><p><a href="https://blog.csdn.net/lw250397846/article/details/112651038">github 提交消息的emoji表情符号规范</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Emoji&quot;&gt;&lt;a href=&quot;#Emoji&quot; class=&quot;headerlink&quot; title=&quot;Emoji&quot;&gt;&lt;/a&gt;Emoji&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Emoji is a visual symbol used in wireless communication in Japan. Image refers to pictures, while text refers to characters, which can be used to represent a variety of expression, such as smiley faces representing laughter and cakes representing food.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Emoji" scheme="http://blog.smallstars.top/tags/Emoji/"/>
    
  </entry>
  
  <entry>
    <title>Docsify</title>
    <link href="http://blog.smallstars.top/posts/2eeac462/"/>
    <id>http://blog.smallstars.top/posts/2eeac462/</id>
    <published>2021-04-03T11:21:27.000Z</published>
    <updated>2021-04-03T12:19:30.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a>Docsify</h1><p><strong>Docsify generates your documentation website on the fly. Unlike GitBook, it does not generate static html files. Instead, it smartly loads and parses your Markdown files and displays them as a website. To start using it, all you need to do is create an index.html and deploy it on GitHub Pages.</strong></p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure><h2 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify init</span><br></pre></td></tr></table></figure><ul><li><code>index.html</code> as the entry file.</li><li><code>Readme.md</code> as the home page.</li><li><code>.nojekyll</code> prevents the GitHub Page from ignoring files that begin with an underscore.</li></ul><p>A basic configuration</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>神奇的docsify<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置浏览器图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Description&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认主题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/themes/vue.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义加载时候的动作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.$docsify = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 项目名称</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;docsify-demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 仓库地址，点击右上角的Github章鱼猫头像会跳转到此地址</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">repo</span>: <span class="string">&#x27;https://github.com/zjcscut/docsify-demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 侧边栏支持，默认加载的是项目根目录下的_sidebar.md文件</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">loadSidebar</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 导航栏支持，默认加载的是项目根目录下的_navbar.md文件</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">loadNavbar</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 封面支持，默认加载的是项目根目录下的_coverpage.md文件</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">coverpage</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 最大支持渲染的标题层级</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">maxLevel</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 自定义侧边栏后默认不会再生成目录，设置生成目录的最大层级，建议配置为1或者2</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">subMaxLevel</span>: <span class="number">2</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 搜索配置</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.$docsify = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">search</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">maxAge</span>: <span class="number">86400000</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">paths</span>: auto,</span></span><br><span class="line"><span class="javascript">                <span class="attr">placeholder</span>: <span class="string">&#x27;搜索&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">noData</span>: <span class="string">&#x27;找不到结果&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">depth</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">hideOtherSidebarContent</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">namespace</span>: <span class="string">&#x27;docsify-demo&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- docsify的js依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- emoji表情支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/emoji.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片放大缩小支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/zoom-image.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索功能支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">Component</th><th style="text-align:center">File</th></tr></thead><tbody><tr><td style="text-align:center">Sidebar</td><td style="text-align:center">_sidebar.md</td></tr><tr><td style="text-align:center">Navicat</td><td style="text-align:center">_navbar.md</td></tr><tr><td style="text-align:center">Cover</td><td style="text-align:center">_coverpage.md</td></tr></tbody></table></div><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://docsify.js.org/">Official</a></p><p><a href="https://www.cnblogs.com/throwable/p/13605289.html">使用开源文档工具docsify，用写博客的姿势写文档</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Docsify&quot;&gt;&lt;a href=&quot;#Docsify&quot; class=&quot;headerlink&quot; title=&quot;Docsify&quot;&gt;&lt;/a&gt;Docsify&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Docsify generates your documentation website on the fly. Unlike GitBook, it does not generate static html files. Instead, it smartly loads and parses your Markdown files and displays them as a website. To start using it, all you need to do is create an index.html and deploy it on GitHub Pages.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docsify" scheme="http://blog.smallstars.top/tags/Docsify/"/>
    
  </entry>
  
  <entry>
    <title>Event Flow in HTML</title>
    <link href="http://blog.smallstars.top/posts/7c75da10/"/>
    <id>http://blog.smallstars.top/posts/7c75da10/</id>
    <published>2021-03-29T14:41:37.000Z</published>
    <updated>2021-05-30T01:27:40.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Event-Flow-in-HTML"><a href="#Event-Flow-in-HTML" class="headerlink" title="Event Flow in HTML"></a>Event Flow in HTML</h1><p><strong>An event is a specific moment of interaction that occurs in a document or brower window and act as a bridge between JavaScript and DOM. Event Flow describes the order in which events are received from the page.</strong></p><h2 id="W3C-Event-Flow"><a href="#W3C-Event-Flow" class="headerlink" title="W3C Event Flow"></a>W3C Event Flow</h2><p><strong>The W3C specifies that the DOM event flow has three phases.</strong></p><ol><li>The event capture phase.</li><li>The in-target phase.</li><li>The event bubbling phase.</li></ol><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Event-Flow1.png" alt=""></p><h2 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h2><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target.addEventListener(type, listener [, options]);</span><br><span class="line">target.addEventListener(type, listener [, useCapture]);</span><br></pre></td></tr></table></figure><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><ul><li><p><strong>type</strong> (String)</p><p>A case-sensitive string representing the <a href="https://developer.mozilla.org/en-US/docs/Web/Events">event type</a> to listen for.</p></li><li><p><strong>listener</strong> (Object, Function)</p><p>An object that implements the EventListener interface, or a JavaScript function.</p></li><li><p><strong>useCapture</strong> (Boolean)</p><p>The default value is false. If the value is false, the listener is executed during the bubbling phase. if true during the capture phase.</p></li></ul><h2 id="Events-Executed-Order"><a href="#Events-Executed-Order" class="headerlink" title="Events  Executed Order"></a>Events  Executed Order</h2><p><strong>Capture stars at the outermost layer and bubbling from the response layer. But in the in-target phase, the order is determined by the code.</strong></p><div  id="event_flow_page"  style="    background-color: red;    width: 150px;    height: 150px;    display: flex;    align-items: center;    justify-content: space-around;    left: 0;    right: 0;    margin: 0 auto;  ">  <div    id="event_flow_content"    style="      background-color: blue;      width: 75px;      height: 75px;      display: flex;      align-items: center;      justify-content: space-around;    "  >    <button id="event_flow_buttom" style="background-color: white; color: black">      execute    </button>  </div></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Event execution sequence is caputer -&gt; aims -&gt; bubble</span></span><br><span class="line"><span class="comment">// But the execution order in the aims is determined by the code order</span></span><br><span class="line"><span class="keyword">const</span> eventFlowPrint = <span class="function">(<span class="params">e, name, isCaputer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;isCaputer ? <span class="string">&quot;Caputer&quot;</span> : <span class="string">&quot;bubble&quot;</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// console.log(`$&#123;name&#125;: $&#123;isCaputer ? &quot;Caputer&quot; : &quot;bubble&quot;&#125;`, e.target);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Code Order:</span></span><br><span class="line"><span class="comment">page:capture -&gt; bubbling</span></span><br><span class="line"><span class="comment">content:bubbling -&gt; capture</span></span><br><span class="line"><span class="comment">buttom: bubbling -&gt; capture</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> bindEventFlow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// page</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_page&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;page&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_page&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;page&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// content</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_content&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;content&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_content&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;content&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// buttom</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_buttom&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;buttom&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;event_flow_buttom&quot;</span>).addEventListener(</span><br><span class="line">    <span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      eventFlowPrint(e, <span class="string">&quot;buttom&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>Click Page</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page: Caputer</span><br><span class="line"><span class="attr">page</span>: bubble</span><br></pre></td></tr></table></figure></li><li><p>Click Content</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the in-target phase, the order is determined by the code.</span></span><br><span class="line"><span class="attr">page</span>: Caputer</span><br><span class="line"><span class="attr">content</span>: bubble</span><br><span class="line"><span class="attr">content</span>: Caputer</span><br><span class="line"><span class="attr">page</span>: bubble</span><br></pre></td></tr></table></figure></li><li><p>Click Buttom</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the in-target phase, the order is determined by the code.</span></span><br><span class="line"><span class="attr">page</span>: Caputer</span><br><span class="line"><span class="attr">content</span>: Caputer</span><br><span class="line"><span class="attr">buttom</span>: bubble</span><br><span class="line"><span class="attr">buttom</span>: Caputer</span><br><span class="line"><span class="attr">content</span>: bubble</span><br><span class="line"><span class="attr">page</span>: bubble</span><br></pre></td></tr></table></figure></li></ul><h2 id="Event-Agent"><a href="#Event-Agent" class="headerlink" title="Event Agent"></a>Event Agent</h2><p><strong>Event agent users the event bubbling to manage all events of a certain type by  specifying only one event handler.</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item n<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Bind the event to the tag ‘ul’ to manage the tag ‘li’ event. This reduces memory consumption and efficiency.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/wubh/p/javascript-event-flow.html">JS 事件冒泡和事件捕获</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener">addEventListener MDN</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/Events">Event Type</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Event-Flow-in-HTML&quot;&gt;&lt;a href=&quot;#Event-Flow-in-HTML&quot; class=&quot;headerlink&quot; title=&quot;Event Flow in HTML&quot;&gt;&lt;/a&gt;Event Flow in HTML&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;An event is a specific moment of interaction that occurs in a document or brower window and act as a bridge between JavaScript and DOM. Event Flow describes the order in which events are received from the page.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="HTML" scheme="http://blog.smallstars.top/tags/HTML/"/>
    
    <category term="JavaScript" scheme="http://blog.smallstars.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>The JavaScript &#39;new&#39; keyword</title>
    <link href="http://blog.smallstars.top/posts/de945f16/"/>
    <id>http://blog.smallstars.top/posts/de945f16/</id>
    <published>2021-03-28T09:08:27.000Z</published>
    <updated>2021-03-28T15:30:31.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-JavaScript-‘new’-keyword"><a href="#The-JavaScript-‘new’-keyword" class="headerlink" title="The JavaScript ‘new’ keyword"></a>The JavaScript ‘new’ keyword</h1><p><strong>In JavaScript, the ‘new’ keyword is used to create an instance object of a class (mock class). When an object is instantiated, it inherits the properties and methods of the class.</strong></p><h2 id="Execution-Process"><a href="#Execution-Process" class="headerlink" title="Execution Process"></a>Execution Process</h2><ol><li>Create a new and empty object.</li><li>Set the new object prototype to point to class constructor.</li><li>Execute the constructor, binding the ‘this’ keyword.</li><li>If the constructor does not return an object, it returns this. </li></ol><h2 id="Simulate-the-‘new’-keyword"><a href="#Simulate-the-‘new’-keyword" class="headerlink" title="Simulate the ‘new’ keyword"></a>Simulate the ‘new’ keyword</h2><h3 id="use-Object-create-to-simulate-‘new’-keyword"><a href="#use-Object-create-to-simulate-‘new’-keyword" class="headerlink" title="use Object.create to simulate ‘new’ keyword"></a>use Object.create to simulate ‘new’ keyword</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newNew = <span class="function"><span class="keyword">function</span> (<span class="params">Parent, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newObj = <span class="built_in">Object</span>.create(Parent.prototype);</span><br><span class="line">  <span class="keyword">let</span> res = Parent.apply(newObj, args);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> ? res : newObj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object1 = <span class="keyword">new</span> Base();</span><br><span class="line"><span class="keyword">let</span> object2 = newNew(Base);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(object1.__proto__ === object2.__proto__);</span><br></pre></td></tr></table></figure><h3 id="No-Object-create-to-simulate-‘new’-keyword"><a href="#No-Object-create-to-simulate-‘new’-keyword" class="headerlink" title="No Object.create to simulate ‘new’ keyword"></a>No Object.create to simulate ‘new’ keyword</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// newNew</span></span><br><span class="line"><span class="keyword">const</span> newNew1 = <span class="function"><span class="keyword">function</span> (<span class="params">Parent, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// let newObject = &#123;&#125;;</span></span><br><span class="line">  <span class="keyword">let</span> newObject = <span class="built_in">Object</span>();</span><br><span class="line">  newObject.__proto__ = Parent.prototype;</span><br><span class="line">  <span class="keyword">let</span> res = Parent.apply(newObject, args);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> ? res : newObject;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object1 = <span class="keyword">new</span> Base();</span><br><span class="line"><span class="keyword">let</span> object2 = newNew(Base);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(object1.__proto__ === object2.__proto__);</span><br></pre></td></tr></table></figure><h2 id="‘new’-keyword-and-Object-create"><a href="#‘new’-keyword-and-Object-create" class="headerlink" title="‘new’  keyword and Object.create()"></a>‘new’  keyword and Object.create()</h2><p><strong>Their __proto__ points to different things. The ‘new’ point to the constructor’s prototype object and create point to the Function.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.create &amp; new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  getNum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj = <span class="keyword">new</span> Base();</span><br><span class="line"><span class="keyword">let</span> createObj = <span class="built_in">Object</span>.create(Base);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newObj, createObj);</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/JS-new.png" alt=""></p><h2 id="Use-‘new’-to-simulate-Object-create"><a href="#Use-‘new’-to-simulate-Object-create" class="headerlink" title="Use ‘new’ to simulate Object.create()"></a>Use ‘new’ to simulate Object.create()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> create1 = <span class="function"><span class="keyword">function</span> (<span class="params">Parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  res.prototype = Parent;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> res();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object3 = <span class="built_in">Object</span>.create(Base);</span><br><span class="line"><span class="keyword">let</span> object4 = create1(Base);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(object3.__proto__ === object4.__proto__);</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.jianshu.com/p/4bbf0c582e97">JavaScript new 关键字</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">MDN Object.create</a></p><p><a href="https://blog.csdn.net/DepressedPrince/article/details/80909636">New 和 Object.create()的区别</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;The-JavaScript-‘new’-keyword&quot;&gt;&lt;a href=&quot;#The-JavaScript-‘new’-keyword&quot; class=&quot;headerlink&quot; title=&quot;The JavaScript ‘new’ keyword&quot;&gt;&lt;/a&gt;The JavaScript ‘new’ keyword&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;In JavaScript, the ‘new’ keyword is used to create an instance object of a class (mock class). When an object is instantiated, it inherits the properties and methods of the class.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="http://blog.smallstars.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS Question</title>
    <link href="http://blog.smallstars.top/posts/a511bb1e/"/>
    <id>http://blog.smallstars.top/posts/a511bb1e/</id>
    <published>2021-03-20T11:49:45.000Z</published>
    <updated>2021-06-27T04:05:55.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Question"><a href="#JavaScript-Question" class="headerlink" title="JavaScript Question"></a>JavaScript Question</h1><p><strong>Some interview questions and answers.</strong></p><h2 id="QA-1-getName"><a href="#QA-1-getName" class="headerlink" title="QA 1: getName"></a>QA 1: getName</h2><p><strong>Write out the value of each output.</strong></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// console.log(&quot;this is&quot; + this);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;baidu&quot;</span> &amp;&amp; <span class="string">&quot;google&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2</span></span><br><span class="line">Foo.getName();</span><br><span class="line"><span class="comment">// 4Both var and function declaration are promoted, andt the function is overwritten before the variable is promted.</span></span><br><span class="line">getName();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">Foo().getName();</span><br><span class="line"><span class="comment">// 1Foo() return this is window, widown.getName has been rewritten.</span></span><br><span class="line">getName();</span><br><span class="line"><span class="comment">// 2According the rule, it&#x27;s the same as new (Foo.getName)(), so the answer is 2.[Foo.getName() --&gt; new]</span></span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="comment">// google(new Foo()).getName(), the Foo object constructor does not have getName, find it in prototype object.[Foo.getName --&gt; Foo.prototype.getName]</span></span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="comment">// googlenew((new Foo()).getName)()</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol><li><p>Operator precedence</p><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/JS-QA1-1.png" alt=""></p></li><li><p>For ‘&amp;&amp;’, if the former is true, then execute the latter, otherwish only execute the former. For ‘||’, if the former is true, only execute the former, the latter don’t have to execute, otherwish have to execute the latter.</p></li></ol><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://blog.smallstars.top/posts/de945f16/">The JavaScript ‘new’ keyword</a></p><h2 id="QA-2-Array-Flattening"><a href="#QA-2-Array-Flattening" class="headerlink" title="QA 2: Array Flattening"></a>QA 2: Array Flattening</h2><p><strong>Flat the structure of multiple nested arrays.</strong></p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// This method only expend one layer.</span></span><br><span class="line"><span class="keyword">const</span> flatten1 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [].concat(...arr);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// join and split</span></span><br><span class="line"><span class="comment">// This method will involve implicit conversion, some values will be affected like undefined, null,etc.</span></span><br><span class="line"><span class="keyword">const</span> flatten2 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.join(<span class="string">&quot;,&quot;</span>).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toString and split</span></span><br><span class="line"><span class="comment">// This method will involve implicit conversion, some values will be affected like undefined, null,etc.</span></span><br><span class="line"><span class="keyword">const</span> flatten3 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recursion and reduce</span></span><br><span class="line"><span class="keyword">const</span> flatten4 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// we can filter some unwanted values.</span></span><br><span class="line">    <span class="keyword">if</span> (cur === <span class="literal">undefined</span> || cur === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(cur) ? pre.concat(flatten4(cur)) : pre.concat(cur);</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> flatten5 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// es6 flat method only expand one layer by default</span></span><br><span class="line">  <span class="comment">// return arr.flat()</span></span><br><span class="line">  <span class="keyword">return</span> arr.flat(<span class="literal">Infinity</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="QA-3-Sleep"><a href="#QA-3-Sleep" class="headerlink" title="QA 3: Sleep"></a>QA 3: Sleep</h2><p><strong>Use Promise to encapuslate a Sleep function.</strong></p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(res, delay);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>).then(<span class="built_in">console</span>.log(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h2 id="QA-4-Time-Interval-Output"><a href="#QA-4-Time-Interval-Output" class="headerlink" title="QA 4: Time Interval Output"></a>QA 4: Time Interval Output</h2><p><strong>Output the values in array at regular interval.</strong></p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> closureFunction = <span class="function">(<span class="params">arr, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    (<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">      &#125;, i * delay);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setTimeoutFunction = <span class="function">(<span class="params">arr, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">    &#125;, i * delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setIntervalFunction = <span class="function">(<span class="params">arr, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[index]);</span><br><span class="line">    index === arr.length ? <span class="built_in">clearInterval</span>(timer) : index++;</span><br><span class="line">  &#125;, delay);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="QA-5-Currying"><a href="#QA-5-Currying" class="headerlink" title="QA 5: Currying"></a>QA 5: Currying</h2><p><strong>Currying can convert a multi-argument function to a single-argument function and return a new function which can take the remaining arguments and return a result.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="QA-6-DeepCopy"><a href="#QA-6-DeepCopy" class="headerlink" title="QA 6: DeepCopy"></a>QA 6: DeepCopy</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Recursion</span></span><br><span class="line"><span class="keyword">const</span> deepCopy = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newObj;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(val)) &#123;</span><br><span class="line">      newObj = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> val) &#123;</span><br><span class="line">        newObj.push(deepCopy(i));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.constructor === <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newObj = &#123;&#125;;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> val) &#123;</span><br><span class="line">        newObj[i] = deepCopy(val[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// It isn&#x27;t an object</span></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.assign is shallow copy, but the target is a new Object.</span></span><br><span class="line"><span class="keyword">const</span> deepCopy1 = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This can&#x27;t copy the undefined, function and RegExp etc</span></span><br><span class="line"><span class="comment">// if the value is null, it will report the error.</span></span><br><span class="line"><span class="keyword">const</span> deepCopy2 = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(val));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JavaScript-Question&quot;&gt;&lt;a href=&quot;#JavaScript-Question&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Question&quot;&gt;&lt;/a&gt;JavaScript Question&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Some interview questions and answers.&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="http://blog.smallstars.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Debounce And Throttle</title>
    <link href="http://blog.smallstars.top/posts/48951515/"/>
    <id>http://blog.smallstars.top/posts/48951515/</id>
    <published>2021-03-20T08:46:18.000Z</published>
    <updated>2021-05-01T02:05:08.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Debounce-And-Throttle"><a href="#Debounce-And-Throttle" class="headerlink" title="Debounce And Throttle"></a>Debounce And Throttle</h1><p><strong>They are all done the closing package</strong></p><ul><li><p>Debounce</p><p>The same action is triggered consecutively over a period of time, executing only the last triggered action.</p></li><li><p>Throttle</p><p>The same action is triggered consecutively over a period of time, executing the action at each interval.</p></li></ul><p><img data-src="https://cdn.jsdelivr.net/gh/SmaIIstars/imgCDN/myBlog/Debounce&amp;Throttle.png" alt="Debounce and Throttle"></p><h2 id="Principle-of-implementation"><a href="#Principle-of-implementation" class="headerlink" title="Principle of implementation"></a>Principle of implementation</h2><h3 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn(args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Throttle"><a href="#Throttle" class="headerlink" title="Throttle"></a>Throttle</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// timer</span></span><br><span class="line"><span class="keyword">const</span> throttleTimer = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn(args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timestamp</span></span><br><span class="line"><span class="keyword">const</span> throttleTimestamp = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> curTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">let</span> remainTime = delay - (curTime - startTime);</span><br><span class="line">    <span class="keyword">if</span> (remainTime &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      fn(args);</span><br><span class="line">      startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// time + timestamp</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> curTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">let</span> remainTime = delay - (curTime - startTime);</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="keyword">if</span> (remainTime &gt; <span class="number">0</span>) timer = <span class="built_in">setTimeout</span>(fn, delay);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      fn(...args);</span><br><span class="line">      startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/aurora-ql/p/13757733.html">详解防抖函数（debounce）和节流函数（throttle）</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Debounce-And-Throttle&quot;&gt;&lt;a href=&quot;#Debounce-And-Throttle&quot; class=&quot;headerlink&quot; title=&quot;Debounce And Throttle&quot;&gt;&lt;/a&gt;Debounce And Throttle&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;They are all done the closing package&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="http://blog.smallstars.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>XLRD and XLWT in Python</title>
    <link href="http://blog.smallstars.top/posts/14aa609c/"/>
    <id>http://blog.smallstars.top/posts/14aa609c/</id>
    <published>2021-02-19T11:19:08.000Z</published>
    <updated>2021-03-16T14:39:28.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="‘xlrd’-and-‘xlwt’-in-Python"><a href="#‘xlrd’-and-‘xlwt’-in-Python" class="headerlink" title="‘xlrd’ and ‘xlwt’ in Python"></a>‘xlrd’ and ‘xlwt’ in Python</h1><p><strong>‘<em>xlrd</em>‘ and ‘<em>xlwt</em>‘ are two Python tripartite library for working with Excel files</strong>.</p><h2 id="xlrd"><a href="#xlrd" class="headerlink" title="xlrd"></a>xlrd</h2><p>Responsible for reading files.</p><ul><li><p>Open up the Excel files</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workbook = xlrd.open_workbook(path)</span><br></pre></td></tr></table></figure></li><li><p>Get all sheets of file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workbook.sheet_names()</span><br></pre></td></tr></table></figure></li><li><p>Get the sheet and content</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Get sheet by index</span></span><br><span class="line">  sheet2 = workbook.sheet_by_index(<span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Get sheet by name</span></span><br><span class="line">  sheet2 = workbook.sheet_by_name(<span class="string">&#x27;sheet2&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Get content</span></span><br><span class="line">  sheet2.name</span><br><span class="line">  sheet2.nrows</span><br><span class="line">sheet2.ncols</span><br><span class="line">  </span><br><span class="line">  sheet2.row_values(index)</span><br><span class="line">  sheet2.col_values(index)</span><br></pre></td></tr></table></figure></li></ul><h2 id="xlwt"><a href="#xlwt" class="headerlink" title="xlwt"></a>xlwt</h2><p>Responsible for write files.</p><h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><ul><li><p>Excel xlsx file not supported</p><p>Change the version of ‘xlrd’, it has been updated to 2.0.1 and only supports <em>.xls</em> files, not <em>.xlsx</em></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xlrd==<span class="number">1</span>.<span class="number">2</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>If file path has Chinese, ‘open’ operation needs to be transcoded.</p><ol><li>The prefix ‘r’ to path indicates the native string.</li><li>filename = filename.decode(‘utf-8’)</li></ol></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/insane-Mr-Li/p/9092619.html">python里面的xlrd模块详解（一）</a></p><p><a href="https://www.cnblogs.com/linyfeng/p/7123423.html">Python中xlrd和xlwt模块使用方法</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;‘xlrd’-and-‘xlwt’-in-Python&quot;&gt;&lt;a href=&quot;#‘xlrd’-and-‘xlwt’-in-Python&quot; class=&quot;headerlink&quot; title=&quot;‘xlrd’ and ‘xlwt’ in Python&quot;&gt;&lt;/a&gt;‘xlrd’ and ‘xlwt’ in Python&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;‘&lt;em&gt;xlrd&lt;/em&gt;‘ and ‘&lt;em&gt;xlwt&lt;/em&gt;‘ are two Python tripartite library for working with Excel files&lt;/strong&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://blog.smallstars.top/tags/Python/"/>
    
  </entry>
  
</feed>
